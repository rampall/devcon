{
	"systeminfo": "AVX = 1 | AVX2 = 1 | AVX512 = 0 | FMA = 1 | NEON = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | VSX = 0 | ",
	"model": {
		"type": "base",
		"multilingual": false,
		"vocab": 51864,
		"audio": {
			"ctx": 1500,
			"state": 512,
			"head": 8,
			"layer": 6
		},
		"text": {
			"ctx": 448,
			"state": 512,
			"head": 8,
			"layer": 6
		},
		"mels": 80,
		"f16": 1
	},
	"params": {
		"model": "models/ggml-base.en.bin",
		"language": "en",
		"translate": false
	},
	"result": {
		"language": "en"
	},
	"transcription": [
		{
			"timestamps": {
				"from": "00:00:00,000",
				"to": "00:00:14,000"
			},
			"offsets": {
				"from": 0,
				"to": 14000
			},
			"text": " [MUSIC]"
		},
		{
			"timestamps": {
				"from": "00:00:14,000",
				"to": "00:00:16,560"
			},
			"offsets": {
				"from": 14000,
				"to": 16560
			},
			"text": " >> Yeah. So with that,"
		},
		{
			"timestamps": {
				"from": "00:00:16,560",
				"to": "00:00:18,720"
			},
			"offsets": {
				"from": 16560,
				"to": 18720
			},
			"text": " out of the way, I'll get started."
		},
		{
			"timestamps": {
				"from": "00:00:18,720",
				"to": "00:00:25,120"
			},
			"offsets": {
				"from": 18720,
				"to": 25120
			},
			"text": " So like I said, usually in the information security community,"
		},
		{
			"timestamps": {
				"from": "00:00:25,120",
				"to": "00:00:29,280"
			},
			"offsets": {
				"from": 25120,
				"to": 29280
			},
			"text": " the focus of security testing is things like"
		},
		{
			"timestamps": {
				"from": "00:00:29,280",
				"to": "00:00:32,520"
			},
			"offsets": {
				"from": 29280,
				"to": 32520
			},
			"text": " network switches which process external data and"
		},
		{
			"timestamps": {
				"from": "00:00:32,520",
				"to": "00:00:35,120"
			},
			"offsets": {
				"from": 32520,
				"to": 35120
			},
			"text": " provide access to private infrastructure."
		},
		{
			"timestamps": {
				"from": "00:00:35,120",
				"to": "00:00:38,840"
			},
			"offsets": {
				"from": 35120,
				"to": 38840
			},
			"text": " So compiler is not, let's say, a popular target."
		},
		{
			"timestamps": {
				"from": "00:00:38,840",
				"to": "00:00:41,920"
			},
			"offsets": {
				"from": 38840,
				"to": 41920
			},
			"text": " So let me be clear,"
		},
		{
			"timestamps": {
				"from": "00:00:41,920",
				"to": "00:00:43,880"
			},
			"offsets": {
				"from": 41920,
				"to": 43880
			},
			"text": " state that our threat model is not"
		},
		{
			"timestamps": {
				"from": "00:00:43,880",
				"to": "00:00:45,560"
			},
			"offsets": {
				"from": 43880,
				"to": 45560
			},
			"text": " by the user who's a developer."
		},
		{
			"timestamps": {
				"from": "00:00:45,560",
				"to": "00:00:49,600"
			},
			"offsets": {
				"from": 45560,
				"to": 49600
			},
			"text": " So we don't assume that the person using the compiler is delicious."
		},
		{
			"timestamps": {
				"from": "00:00:49,600",
				"to": "00:00:56,080"
			},
			"offsets": {
				"from": 49600,
				"to": 56080
			},
			"text": " But rather we focus on if the code generated by the optimized explorer."
		},
		{
			"timestamps": {
				"from": "00:00:56,080",
				"to": "00:00:58,080"
			},
			"offsets": {
				"from": 56080,
				"to": 58080
			},
			"text": " So for example, if you have a function,"
		},
		{
			"timestamps": {
				"from": "00:00:58,080",
				"to": "00:01:00,480"
			},
			"offsets": {
				"from": 58080,
				"to": 60480
			},
			"text": " this is the use style program."
		},
		{
			"timestamps": {
				"from": "00:01:00,480",
				"to": "00:01:04,120"
			},
			"offsets": {
				"from": 60480,
				"to": 64120
			},
			"text": " Essentially what it's doing is providing a function foo which returns x and"
		},
		{
			"timestamps": {
				"from": "00:01:04,120",
				"to": "00:01:06,480"
			},
			"offsets": {
				"from": 64120,
				"to": 66480
			},
			"text": " essentially setting that x to p."
		},
		{
			"timestamps": {
				"from": "00:01:06,480",
				"to": "00:01:12,880"
			},
			"offsets": {
				"from": 66480,
				"to": 72880
			},
			"text": " So if you, and it's storing at location 0 in the memory,"
		},
		{
			"timestamps": {
				"from": "00:01:12,880",
				"to": "00:01:14,640"
			},
			"offsets": {
				"from": 72880,
				"to": 74640
			},
			"text": " the value returned by p."
		},
		{
			"timestamps": {
				"from": "00:01:14,640",
				"to": "00:01:20,160"
			},
			"offsets": {
				"from": 74640,
				"to": 80160
			},
			"text": " So essentially you expect this to store the value 2 in the location 0."
		},
		{
			"timestamps": {
				"from": "00:01:20,160",
				"to": "00:01:24,520"
			},
			"offsets": {
				"from": 80160,
				"to": 84520
			},
			"text": " Right? So, and this is what you get on the right hand side after optimization,"
		},
		{
			"timestamps": {
				"from": "00:01:24,520",
				"to": "00:01:26,600"
			},
			"offsets": {
				"from": 84520,
				"to": 86600
			},
			"text": " which is the speed and store 0, 2."
		},
		{
			"timestamps": {
				"from": "00:01:26,600",
				"to": "00:01:31,480"
			},
			"offsets": {
				"from": 86600,
				"to": 91480
			},
			"text": " So essentially we want to make sure that it's correct code, right?"
		},
		{
			"timestamps": {
				"from": "00:01:31,480",
				"to": "00:01:35,640"
			},
			"offsets": {
				"from": 91480,
				"to": 95640
			},
			"text": " And it behaves, the compiler behaves as expected."
		},
		{
			"timestamps": {
				"from": "00:01:35,640",
				"to": "00:01:39,160"
			},
			"offsets": {
				"from": 95640,
				"to": 99160
			},
			"text": " So for those of you who are not familiar with fast testing,"
		},
		{
			"timestamps": {
				"from": "00:01:39,160",
				"to": "00:01:41,160"
			},
			"offsets": {
				"from": 99160,
				"to": 101160
			},
			"text": " fasting in a nutshell is essentially like this."
		},
		{
			"timestamps": {
				"from": "00:01:41,160",
				"to": "00:01:45,320"
			},
			"offsets": {
				"from": 101160,
				"to": 105320
			},
			"text": " So you, in a loop, what you do is you generate input and"
		},
		{
			"timestamps": {
				"from": "00:01:45,320",
				"to": "00:01:47,720"
			},
			"offsets": {
				"from": 105320,
				"to": 107720
			},
			"text": " feed that input to the program on the test."
		},
		{
			"timestamps": {
				"from": "00:01:47,720",
				"to": "00:01:49,760"
			},
			"offsets": {
				"from": 107720,
				"to": 109760
			},
			"text": " And essentially you can do it for as long as you want."
		},
		{
			"timestamps": {
				"from": "00:01:49,760",
				"to": "00:01:54,440"
			},
			"offsets": {
				"from": 109760,
				"to": 114440
			},
			"text": " But typically you won't have any gains beyond a certain threshold."
		},
		{
			"timestamps": {
				"from": "00:01:54,440",
				"to": "00:01:58,840"
			},
			"offsets": {
				"from": 114440,
				"to": 118840
			},
			"text": " So at some point you do control C or end the whole process."
		},
		{
			"timestamps": {
				"from": "00:01:58,840",
				"to": "00:02:03,280"
			},
			"offsets": {
				"from": 118840,
				"to": 123280
			},
			"text": " It's been, sure to be surprisingly effective at finding bugs."
		},
		{
			"timestamps": {
				"from": "00:02:03,280",
				"to": "00:02:07,720"
			},
			"offsets": {
				"from": 123280,
				"to": 127720
			},
			"text": " Because most often you'll notice capture a subset of program behavior."
		},
		{
			"timestamps": {
				"from": "00:02:07,720",
				"to": "00:02:12,720"
			},
			"offsets": {
				"from": 127720,
				"to": 132720
			},
			"text": " And here we randomly generate things that are usually"
		},
		{
			"timestamps": {
				"from": "00:02:12,720",
				"to": "00:02:15,480"
			},
			"offsets": {
				"from": 132720,
				"to": 135480
			},
			"text": " call a cases somehow and break the program."
		},
		{
			"timestamps": {
				"from": "00:02:15,480",
				"to": "00:02:23,440"
			},
			"offsets": {
				"from": 135480,
				"to": 143440
			},
			"text": " However, applying traditional fast testing is limited because"
		},
		{
			"timestamps": {
				"from": "00:02:23,440",
				"to": "00:02:26,920"
			},
			"offsets": {
				"from": 143440,
				"to": 146920
			},
			"text": " our use case is essentially testing the compiler."
		},
		{
			"timestamps": {
				"from": "00:02:26,920",
				"to": "00:02:29,280"
			},
			"offsets": {
				"from": 146920,
				"to": 149280
			},
			"text": " And it's very important to generate valid programs for"
		},
		{
			"timestamps": {
				"from": "00:02:29,280",
				"to": "00:02:33,280"
			},
			"offsets": {
				"from": 149280,
				"to": 153280
			},
			"text": " the compiler, which means let's say you have the valid program on the left."
		},
		{
			"timestamps": {
				"from": "00:02:33,280",
				"to": "00:02:36,160"
			},
			"offsets": {
				"from": 153280,
				"to": 156160
			},
			"text": " So let me program on the left, which defines the contract."
		},
		{
			"timestamps": {
				"from": "00:02:36,160",
				"to": "00:02:39,080"
			},
			"offsets": {
				"from": 156160,
				"to": 159080
			},
			"text": " And the function foods at the contract does something, right?"
		},
		{
			"timestamps": {
				"from": "00:02:39,080",
				"to": "00:02:44,760"
			},
			"offsets": {
				"from": 159080,
				"to": 164760
			},
			"text": " And you apply, and the fuzzer, let's assume that the fuzzer applies a mutation."
		},
		{
			"timestamps": {
				"from": "00:02:44,760",
				"to": "00:02:50,520"
			},
			"offsets": {
				"from": 164760,
				"to": 170520
			},
			"text": " Mutation is essentially any operation which tweaks, bites, adds bites or"
		},
		{
			"timestamps": {
				"from": "00:02:50,520",
				"to": "00:02:53,080"
			},
			"offsets": {
				"from": 170520,
				"to": 173080
			},
			"text": " removes bites from the bites fleek on the left."
		},
		{
			"timestamps": {
				"from": "00:02:53,080",
				"to": "00:02:59,320"
			},
			"offsets": {
				"from": 173080,
				"to": 179320
			},
			"text": " So you can think, so the fuzzer sees the input as a stream of bites on the left."
		},
		{
			"timestamps": {
				"from": "00:02:59,320",
				"to": "00:03:02,800"
			},
			"offsets": {
				"from": 179320,
				"to": 182800
			},
			"text": " And just tweaks bites and adds removes."
		},
		{
			"timestamps": {
				"from": "00:03:02,800",
				"to": "00:03:07,120"
			},
			"offsets": {
				"from": 182800,
				"to": 187120
			},
			"text": " So you can put creative mutation like the code shown on the right,"
		},
		{
			"timestamps": {
				"from": "00:03:07,120",
				"to": "00:03:12,600"
			},
			"offsets": {
				"from": 187120,
				"to": 192600
			},
			"text": " which basically tweaks the keyword function and public, right?"
		},
		{
			"timestamps": {
				"from": "00:03:12,600",
				"to": "00:03:14,200"
			},
			"offsets": {
				"from": 192600,
				"to": 194200
			},
			"text": " Because it's totally random."
		},
		{
			"timestamps": {
				"from": "00:03:14,200",
				"to": "00:03:17,640"
			},
			"offsets": {
				"from": 194200,
				"to": 197640
			},
			"text": " So you can imagine that with a very high likelihood"
		},
		{
			"timestamps": {
				"from": "00:03:17,640",
				"to": "00:03:25,080"
			},
			"offsets": {
				"from": 197640,
				"to": 205080
			},
			"text": " random mutation at the input level is where to be simply rejected by the pass-off."
		},
		{
			"timestamps": {
				"from": "00:03:25,080",
				"to": "00:03:30,080"
			},
			"offsets": {
				"from": 205080,
				"to": 210080
			},
			"text": " And we don't want that because we want the program to be parsed and"
		},
		{
			"timestamps": {
				"from": "00:03:30,080",
				"to": "00:03:33,280"
			},
			"offsets": {
				"from": 210080,
				"to": 213280
			},
			"text": " then optimized and then test the optimizer."
		},
		{
			"timestamps": {
				"from": "00:03:33,280",
				"to": "00:03:37,600"
			},
			"offsets": {
				"from": 213280,
				"to": 217600
			},
			"text": " So this clearly won't work or it works, but it's not very efficient."
		},
		{
			"timestamps": {
				"from": "00:03:37,600",
				"to": "00:03:45,840"
			},
			"offsets": {
				"from": 217600,
				"to": 225840
			},
			"text": " So basically the learning is that causing a compiler requires"
		},
		{
			"timestamps": {
				"from": "00:03:45,840",
				"to": "00:03:50,360"
			},
			"offsets": {
				"from": 225840,
				"to": 230360
			},
			"text": " generating valid programs and now generating valid programs requires"
		},
		{
			"timestamps": {
				"from": "00:03:50,360",
				"to": "00:03:52,040"
			},
			"offsets": {
				"from": 230360,
				"to": 232040
			},
			"text": " some sort of structure of awareness."
		},
		{
			"timestamps": {
				"from": "00:03:52,040",
				"to": "00:03:57,240"
			},
			"offsets": {
				"from": 232040,
				"to": 237240
			},
			"text": " So let me talk about what a structure of awareness and"
		},
		{
			"timestamps": {
				"from": "00:03:57,240",
				"to": "00:03:58,440"
			},
			"offsets": {
				"from": 237240,
				"to": 238440
			},
			"text": " how we approach this problem."
		},
		{
			"timestamps": {
				"from": "00:03:58,440",
				"to": "00:04:04,920"
			},
			"offsets": {
				"from": 238440,
				"to": 244920
			},
			"text": " So essentially we start with high level specification."
		},
		{
			"timestamps": {
				"from": "00:04:04,920",
				"to": "00:04:09,360"
			},
			"offsets": {
				"from": 244920,
				"to": 249360
			},
			"text": " The specification is written in the interface description language called"
		},
		{
			"timestamps": {
				"from": "00:04:09,360",
				"to": "00:04:13,560"
			},
			"offsets": {
				"from": 249360,
				"to": 253560
			},
			"text": " protocol, or protocol buffers, which is the whole thing."
		},
		{
			"timestamps": {
				"from": "00:04:13,560",
				"to": "00:04:18,800"
			},
			"offsets": {
				"from": 253560,
				"to": 258800
			},
			"text": " It was virtually developed by Google, but it's used for various purposes,"
		},
		{
			"timestamps": {
				"from": "00:04:18,800",
				"to": "00:04:19,960"
			},
			"offsets": {
				"from": 258800,
				"to": 259960
			},
			"text": " also interesting."
		},
		{
			"timestamps": {
				"from": "00:04:19,960",
				"to": "00:04:25,120"
			},
			"offsets": {
				"from": 259960,
				"to": 265120
			},
			"text": " So essentially in the port of a language, you can define"
		},
		{
			"timestamps": {
				"from": "00:04:25,120",
				"to": "00:04:29,960"
			},
			"offsets": {
				"from": 265120,
				"to": 269960
			},
			"text": " units of data as messages."
		},
		{
			"timestamps": {
				"from": "00:04:29,960",
				"to": "00:04:36,760"
			},
			"offsets": {
				"from": 269960,
				"to": 276760
			},
			"text": " And each message contains one or more fields from other messages."
		},
		{
			"timestamps": {
				"from": "00:04:36,760",
				"to": "00:04:42,360"
			},
			"offsets": {
				"from": 276760,
				"to": 282360
			},
			"text": " So for example, it's useful to talk of the specification of the"
		},
		{
			"timestamps": {
				"from": "00:04:42,360",
				"to": "00:04:46,320"
			},
			"offsets": {
				"from": 282360,
				"to": 286320
			},
			"text": " U programming language that we're testing in a top-down fashion."
		},
		{
			"timestamps": {
				"from": "00:04:46,320",
				"to": "00:04:50,600"
			},
			"offsets": {
				"from": 286320,
				"to": 290600
			},
			"text": " At the very top you have a program, so the message program,"
		},
		{
			"timestamps": {
				"from": "00:04:50,600",
				"to": "00:04:54,360"
			},
			"offsets": {
				"from": 290600,
				"to": 294360
			},
			"text": " which contains a rotated sequence of a message called block,"
		},
		{
			"timestamps": {
				"from": "00:04:54,360",
				"to": "00:05:02,240"
			},
			"offsets": {
				"from": 294360,
				"to": 302240
			},
			"text": " which we also define as a repeated sequence of a message called statement,"
		},
		{
			"timestamps": {
				"from": "00:05:02,240",
				"to": "00:05:03,880"
			},
			"offsets": {
				"from": 302240,
				"to": 303880
			},
			"text": " and so on and so forth."
		},
		{
			"timestamps": {
				"from": "00:05:03,880",
				"to": "00:05:08,360"
			},
			"offsets": {
				"from": 303880,
				"to": 308360
			},
			"text": " So you could, although it's not shown on this slide,"
		},
		{
			"timestamps": {
				"from": "00:05:08,360",
				"to": "00:05:13,360"
			},
			"offsets": {
				"from": 308360,
				"to": 313360
			},
			"text": " you could define a message called if statement,"
		},
		{
			"timestamps": {
				"from": "00:05:13,360",
				"to": "00:05:18,120"
			},
			"offsets": {
				"from": 313360,
				"to": 318120
			},
			"text": " a for statement, so on and so forth, which contain other fields."
		},
		{
			"timestamps": {
				"from": "00:05:18,120",
				"to": "00:05:21,240"
			},
			"offsets": {
				"from": 318120,
				"to": 321240
			},
			"text": " And then make statement a union of all these statements."
		},
		{
			"timestamps": {
				"from": "00:05:21,240",
				"to": "00:05:27,880"
			},
			"offsets": {
				"from": 321240,
				"to": 327880
			},
			"text": " You could use the keyword one off to make the union of these statements."
		},
		{
			"timestamps": {
				"from": "00:05:27,880",
				"to": "00:05:31,960"
			},
			"offsets": {
				"from": 327880,
				"to": 331960
			},
			"text": " So essentially, build this specification in a top-down fashion until you have"
		},
		{
			"timestamps": {
				"from": "00:05:31,960",
				"to": "00:05:38,240"
			},
			"offsets": {
				"from": 331960,
				"to": 338240
			},
			"text": " all the leaf nodes, typically literals or constants and stuff like that."
		},
		{
			"timestamps": {
				"from": "00:05:38,240",
				"to": "00:05:42,800"
			},
			"offsets": {
				"from": 338240,
				"to": 342800
			},
			"text": " And yeah, essentially try to cover as many aspects of the programming language as"
		},
		{
			"timestamps": {
				"from": "00:05:42,800",
				"to": "00:05:43,560"
			},
			"offsets": {
				"from": 342800,
				"to": 343560
			},
			"text": " possible."
		},
		{
			"timestamps": {
				"from": "00:05:43,560",
				"to": "00:05:48,520"
			},
			"offsets": {
				"from": 343560,
				"to": 348520
			},
			"text": " Bear in mind that this is fully handwritten, so it's not exhaustive or complete."
		},
		{
			"timestamps": {
				"from": "00:05:48,520",
				"to": "00:05:53,080"
			},
			"offsets": {
				"from": 348520,
				"to": 353080
			},
			"text": " But for the purpose of testing, the hope is that it covers sufficient language"
		},
		{
			"timestamps": {
				"from": "00:05:53,080",
				"to": "00:05:58,160"
			},
			"offsets": {
				"from": 353080,
				"to": 358160
			},
			"text": " features for us to get a sufficient assurance that things work as expected."
		},
		{
			"timestamps": {
				"from": "00:05:58,160",
				"to": "00:06:01,800"
			},
			"offsets": {
				"from": 358160,
				"to": 361800
			},
			"text": " Of course, you can find this full spec at the link below if you're interested."
		},
		{
			"timestamps": {
				"from": "00:06:01,800",
				"to": "00:06:05,880"
			},
			"offsets": {
				"from": 361800,
				"to": 365880
			},
			"text": " So the next thing is input generation."
		},
		{
			"timestamps": {
				"from": "00:06:05,880",
				"to": "00:06:09,360"
			},
			"offsets": {
				"from": 365880,
				"to": 369360
			},
			"text": " We have the spec, how do we convert the spec into a valid input?"
		},
		{
			"timestamps": {
				"from": "00:06:09,360",
				"to": "00:06:13,840"
			},
			"offsets": {
				"from": 369360,
				"to": 373840
			},
			"text": " We don't generate the input ourselves."
		},
		{
			"timestamps": {
				"from": "00:06:13,840",
				"to": "00:06:17,120"
			},
			"offsets": {
				"from": 373840,
				"to": 377120
			},
			"text": " Fortunately, there is a library called LipProbop of New Data,"
		},
		{
			"timestamps": {
				"from": "00:06:17,120",
				"to": "00:06:21,920"
			},
			"offsets": {
				"from": 377120,
				"to": 381920
			},
			"text": " which is also developed at Google, which takes the specification shown in the previous"
		},
		{
			"timestamps": {
				"from": "00:06:21,920",
				"to": "00:06:29,280"
			},
			"offsets": {
				"from": 381920,
				"to": 389280
			},
			"text": " slide deck and converts it into a valid input, which is an instantiation of the spec."
		},
		{
			"timestamps": {
				"from": "00:06:29,280",
				"to": "00:06:33,480"
			},
			"offsets": {
				"from": 389280,
				"to": 393480
			},
			"text": " So each input is essentially a tree, for example."
		},
		{
			"timestamps": {
				"from": "00:06:33,480",
				"to": "00:06:36,560"
			},
			"offsets": {
				"from": 393480,
				"to": 396560
			},
			"text": " It can look like what is shown below here."
		},
		{
			"timestamps": {
				"from": "00:06:36,560",
				"to": "00:06:44,440"
			},
			"offsets": {
				"from": 396560,
				"to": 404440
			},
			"text": " So you have it defines blocks and blocks contains a statement, which is a list statement in this case."
		},
		{
			"timestamps": {
				"from": "00:06:44,440",
				"to": "00:06:50,040"
			},
			"offsets": {
				"from": 404440,
				"to": 410040
			},
			"text": " And the if statement has a condition which contains a binary operation, which is an"
		},
		{
			"timestamps": {
				"from": "00:06:50,040",
				"to": "00:06:55,960"
			},
			"offsets": {
				"from": 410040,
				"to": 415960
			},
			"text": " equality and the first operand of the equality is a variable reference."
		},
		{
			"timestamps": {
				"from": "00:06:55,960",
				"to": "00:07:02,040"
			},
			"offsets": {
				"from": 415960,
				"to": 422040
			},
			"text": " The variables ID is zero and then the constant that it is being compared against is zero."
		},
		{
			"timestamps": {
				"from": "00:07:03,040",
				"to": "00:07:09,160"
			},
			"offsets": {
				"from": 423040,
				"to": 429160
			},
			"text": " This is the textual form of a protocol message for clarity."
		},
		{
			"timestamps": {
				"from": "00:07:09,160",
				"to": "00:07:15,960"
			},
			"offsets": {
				"from": 429160,
				"to": 435960
			},
			"text": " But of course, this doesn't really make sense yet to feed this to the compiler, right?"
		},
		{
			"timestamps": {
				"from": "00:07:15,960",
				"to": "00:07:21,160"
			},
			"offsets": {
				"from": 435960,
				"to": 441160
			},
			"text": " Because the new optimizer does not recognize protocol."
		},
		{
			"timestamps": {
				"from": "00:07:21,160",
				"to": "00:07:27,560"
			},
			"offsets": {
				"from": 441160,
				"to": 447560
			},
			"text": " So we need a program that converts an instance of the protocol message into a valid new program."
		},
		{
			"timestamps": {
				"from": "00:07:27,560",
				"to": "00:07:30,240"
			},
			"offsets": {
				"from": 447560,
				"to": 450240
			},
			"text": " And this is where the converter program comes in."
		},
		{
			"timestamps": {
				"from": "00:07:30,240",
				"to": "00:07:36,080"
			},
			"offsets": {
				"from": 450240,
				"to": 456080
			},
			"text": " So this is something that we have to write, but fortunately this is not too complex."
		},
		{
			"timestamps": {
				"from": "00:07:36,080",
				"to": "00:07:39,320"
			},
			"offsets": {
				"from": 456080,
				"to": 459320
			},
			"text": " And it's about council and support."
		},
		{
			"timestamps": {
				"from": "00:07:39,320",
				"to": "00:07:42,760"
			},
			"offsets": {
				"from": 459320,
				"to": 462760
			},
			"text": " So essentially converters are source to source translator."
		},
		{
			"timestamps": {
				"from": "00:07:42,760",
				"to": "00:07:49,040"
			},
			"offsets": {
				"from": 462760,
				"to": 469040
			},
			"text": " The input is the protocol serialization format and the output is the new program."
		},
		{
			"timestamps": {
				"from": "00:07:49,040",
				"to": "00:07:56,200"
			},
			"offsets": {
				"from": 469040,
				"to": 476200
			},
			"text": " So we talked about the protocol message in previous slide decks, how it looks like when"
		},
		{
			"timestamps": {
				"from": "00:07:56,200",
				"to": "00:07:58,760"
			},
			"offsets": {
				"from": 476200,
				"to": 478760
			},
			"text": " it converted to a youth code is shown at the bottom."
		},
		{
			"timestamps": {
				"from": "00:07:58,760",
				"to": "00:08:03,720"
			},
			"offsets": {
				"from": 478760,
				"to": 483720
			},
			"text": " So essentially it's an if statement with a variable called x underscore zero."
		},
		{
			"timestamps": {
				"from": "00:08:03,720",
				"to": "00:08:06,520"
			},
			"offsets": {
				"from": 483720,
				"to": 486520
			},
			"text": " If it's a check that it's equal to zero."
		},
		{
			"timestamps": {
				"from": "00:08:06,520",
				"to": "00:08:11,640"
			},
			"offsets": {
				"from": 486520,
				"to": 491640
			},
			"text": " Of course, this is a snippet of a larger piece of a program."
		},
		{
			"timestamps": {
				"from": "00:08:11,640",
				"to": "00:08:14,640"
			},
			"offsets": {
				"from": 491640,
				"to": 494640
			},
			"text": " So it doesn't make sense to feed this to the policy here."
		},
		{
			"timestamps": {
				"from": "00:08:14,640",
				"to": "00:08:19,640"
			},
			"offsets": {
				"from": 494640,
				"to": 499640
			},
			"text": " But this is just to give you an idea how the conversion looks like and"
		},
		{
			"timestamps": {
				"from": "00:08:19,640",
				"to": "00:08:24,200"
			},
			"offsets": {
				"from": 499640,
				"to": 504200
			},
			"text": " what's the input and the output of the conversion process."
		},
		{
			"timestamps": {
				"from": "00:08:25,400",
				"to": "00:08:31,080"
			},
			"offsets": {
				"from": 505400,
				"to": 511080
			},
			"text": " But in reality, we have a complete valid program which compiles and does something."
		},
		{
			"timestamps": {
				"from": "00:08:31,080",
				"to": "00:08:40,120"
			},
			"offsets": {
				"from": 511080,
				"to": 520120
			},
			"text": " So to put these two pieces together, what we have is a specification that we had right in the beginning."
		},
		{
			"timestamps": {
				"from": "00:08:40,120",
				"to": "00:08:44,000"
			},
			"offsets": {
				"from": 520120,
				"to": 524000
			},
			"text": " And a library called a little protocol for new data."
		},
		{
			"timestamps": {
				"from": "00:08:44,000",
				"to": "00:08:47,440"
			},
			"offsets": {
				"from": 524000,
				"to": 527440
			},
			"text": " We use our library to generate input, but that input is not ready to be fed."
		},
		{
			"timestamps": {
				"from": "00:08:47,440",
				"to": "00:08:49,800"
			},
			"offsets": {
				"from": 527440,
				"to": 529800
			},
			"text": " Yes, because it's a protocol for language."
		},
		{
			"timestamps": {
				"from": "00:08:49,800",
				"to": "00:08:55,720"
			},
			"offsets": {
				"from": 529800,
				"to": 535720
			},
			"text": " So we use a program called provider program for a converter which converts from this"
		},
		{
			"timestamps": {
				"from": "00:08:55,720",
				"to": "00:09:00,840"
			},
			"offsets": {
				"from": 535720,
				"to": 540840
			},
			"text": " language to a valid test program that can then be fed to the compiler."
		},
		{
			"timestamps": {
				"from": "00:09:00,840",
				"to": "00:09:05,040"
			},
			"offsets": {
				"from": 540840,
				"to": 545040
			},
			"text": " So finally, we have an input that could be used to test the compiler."
		},
		{
			"timestamps": {
				"from": "00:09:05,040",
				"to": "00:09:11,840"
			},
			"offsets": {
				"from": 545040,
				"to": 551840
			},
			"text": " But then testing the compiler actually requires encoding and expectations somehow."
		},
		{
			"timestamps": {
				"from": "00:09:11,840",
				"to": "00:09:16,680"
			},
			"offsets": {
				"from": 551840,
				"to": 556680
			},
			"text": " So imagine that you randomly test, randomly create a test program,"
		},
		{
			"timestamps": {
				"from": "00:09:16,680",
				"to": "00:09:20,720"
			},
			"offsets": {
				"from": 556680,
				"to": 560720
			},
			"text": " but you don't know what it's supposed to be doing, what side effects it has."
		},
		{
			"timestamps": {
				"from": "00:09:20,720",
				"to": "00:09:23,240"
			},
			"offsets": {
				"from": 560720,
				"to": 563240
			},
			"text": " So how do you encode an expectation, right?"
		},
		{
			"timestamps": {
				"from": "00:09:23,240",
				"to": "00:09:27,320"
			},
			"offsets": {
				"from": 563240,
				"to": 567320
			},
			"text": " So what do you check that is doing the right thing?"
		},
		{
			"timestamps": {
				"from": "00:09:27,320",
				"to": "00:09:33,160"
			},
			"offsets": {
				"from": 567320,
				"to": 573160
			},
			"text": " The approach that we use is differential fast testing."
		},
		{
			"timestamps": {
				"from": "00:09:33,160",
				"to": "00:09:38,000"
			},
			"offsets": {
				"from": 573160,
				"to": 578000
			},
			"text": " So essentially it involves tracking the side effects of a program using execution"
		},
		{
			"timestamps": {
				"from": "00:09:38,000",
				"to": "00:09:42,360"
			},
			"offsets": {
				"from": 578000,
				"to": 582360
			},
			"text": " race, running the program and then running the optimized version of the program and"
		},
		{
			"timestamps": {
				"from": "00:09:42,360",
				"to": "00:09:43,960"
			},
			"offsets": {
				"from": 582360,
				"to": 583960
			},
			"text": " to varying the side effects."
		},
		{
			"timestamps": {
				"from": "00:09:43,960",
				"to": "00:09:51,320"
			},
			"offsets": {
				"from": 583960,
				"to": 591320
			},
			"text": " So we use the original program as a baseline to compare against and"
		},
		{
			"timestamps": {
				"from": "00:09:51,320",
				"to": "00:09:53,280"
			},
			"offsets": {
				"from": 591320,
				"to": 593280
			},
			"text": " we compare that with the optimized program."
		},
		{
			"timestamps": {
				"from": "00:09:53,280",
				"to": "00:09:54,920"
			},
			"offsets": {
				"from": 593280,
				"to": 594920
			},
			"text": " So it's not a complicated."
		},
		{
			"timestamps": {
				"from": "00:09:54,920",
				"to": "00:10:01,880"
			},
			"offsets": {
				"from": 594920,
				"to": 601880
			},
			"text": " However, before we can do that, we need an execution quiz which tracks side effects"
		},
		{
			"timestamps": {
				"from": "00:10:01,880",
				"to": "00:10:04,400"
			},
			"offsets": {
				"from": 601880,
				"to": 604400
			},
			"text": " of the execution of the program, right?"
		},
		{
			"timestamps": {
				"from": "00:10:04,400",
				"to": "00:10:09,400"
			},
			"offsets": {
				"from": 604400,
				"to": 609400
			},
			"text": " So we need to know somehow what is happening to check whether it is happening"
		},
		{
			"timestamps": {
				"from": "00:10:09,400",
				"to": "00:10:11,640"
			},
			"offsets": {
				"from": 609400,
				"to": 611640
			},
			"text": " correctly post-optimization."
		},
		{
			"timestamps": {
				"from": "00:10:11,640",
				"to": "00:10:15,680"
			},
			"offsets": {
				"from": 611640,
				"to": 615680
			},
			"text": " And this is where the U interpreter comes in."
		},
		{
			"timestamps": {
				"from": "00:10:15,680",
				"to": "00:10:22,040"
			},
			"offsets": {
				"from": 615680,
				"to": 622040
			},
			"text": " Yeah, U interpreter is essentially an interpreter for U programs that was written by"
		},
		{
			"timestamps": {
				"from": "00:10:22,040",
				"to": "00:10:22,720"
			},
			"offsets": {
				"from": 622040,
				"to": 622720
			},
			"text": " quiz."
		},
		{
			"timestamps": {
				"from": "00:10:22,720",
				"to": "00:10:27,720"
			},
			"offsets": {
				"from": 622720,
				"to": 627720
			},
			"text": " So essentially what it does is it interprets arbitrary U programs."
		},
		{
			"timestamps": {
				"from": "00:10:27,720",
				"to": "00:10:35,200"
			},
			"offsets": {
				"from": 627720,
				"to": 635200
			},
			"text": " So apart from interpretation, what it additionally does is outputs the side effect"
		},
		{
			"timestamps": {
				"from": "00:10:35,200",
				"to": "00:10:37,040"
			},
			"offsets": {
				"from": 635200,
				"to": 637040
			},
			"text": " of the program as a quiz."
		},
		{
			"timestamps": {
				"from": "00:10:37,040",
				"to": "00:10:39,320"
			},
			"offsets": {
				"from": 637040,
				"to": 639320
			},
			"text": " A trace can be thought of as a strength."
		},
		{
			"timestamps": {
				"from": "00:10:39,320",
				"to": "00:10:42,360"
			},
			"offsets": {
				"from": 639320,
				"to": 642360
			},
			"text": " So for example, you have the test program on the left."
		},
		{
			"timestamps": {
				"from": "00:10:42,360",
				"to": "00:10:44,400"
			},
			"offsets": {
				"from": 642360,
				"to": 644400
			},
			"text": " You feel it to the U interpreter."
		},
		{
			"timestamps": {
				"from": "00:10:44,400",
				"to": "00:10:50,600"
			},
			"offsets": {
				"from": 644400,
				"to": 650600
			},
			"text": " It executes it step by step and then creates this execution quiz shown on the right,"
		},
		{
			"timestamps": {
				"from": "00:10:50,600",
				"to": "00:10:56,560"
			},
			"offsets": {
				"from": 650600,
				"to": 656560
			},
			"text": " which can look like you load something from memory from some address X and then store it,"
		},
		{
			"timestamps": {
				"from": "00:10:56,560",
				"to": "00:11:01,240"
			},
			"offsets": {
				"from": 656560,
				"to": 661240
			},
			"text": " store some value at address Y, don't need a copy, so on and so forth."
		},
		{
			"timestamps": {
				"from": "00:11:01,240",
				"to": "00:11:06,120"
			},
			"offsets": {
				"from": 661240,
				"to": 666120
			},
			"text": " So we've built the execution quiz of the test program using the U interpreter."
		},
		{
			"timestamps": {
				"from": "00:11:08,040",
				"to": "00:11:14,240"
			},
			"offsets": {
				"from": 668040,
				"to": 674240
			},
			"text": " And finally we are ready to actually like put all these blocks together and test the"
		},
		{
			"timestamps": {
				"from": "00:11:14,240",
				"to": "00:11:15,840"
			},
			"offsets": {
				"from": 674240,
				"to": 675840
			},
			"text": " optimizer."
		},
		{
			"timestamps": {
				"from": "00:11:15,840",
				"to": "00:11:21,280"
			},
			"offsets": {
				"from": 675840,
				"to": 681280
			},
			"text": " So we started generating the program, feed it to the interpreter, optimize the same program,"
		},
		{
			"timestamps": {
				"from": "00:11:21,280",
				"to": "00:11:25,120"
			},
			"offsets": {
				"from": 681280,
				"to": 685120
			},
			"text": " keep that again, the optimized version to the interpreter."
		},
		{
			"timestamps": {
				"from": "00:11:25,120",
				"to": "00:11:28,400"
			},
			"offsets": {
				"from": 685120,
				"to": 688400
			},
			"text": " And then you get two execution quizzes which are essentially strings."
		},
		{
			"timestamps": {
				"from": "00:11:28,400",
				"to": "00:11:32,480"
			},
			"offsets": {
				"from": 688400,
				"to": 692480
			},
			"text": " And then you can simply do string equality check, right?"
		},
		{
			"timestamps": {
				"from": "00:11:32,480",
				"to": "00:11:39,440"
			},
			"offsets": {
				"from": 692480,
				"to": 699440
			},
			"text": " So if the execution quizzes of all these versions are equal, everything's fine as we expect."
		},
		{
			"timestamps": {
				"from": "00:11:39,440",
				"to": "00:11:43,240"
			},
			"offsets": {
				"from": 699440,
				"to": 703240
			},
			"text": " If it's not equal, that's about most likely in the optimizer."
		},
		{
			"timestamps": {
				"from": "00:11:43,240",
				"to": "00:11:46,960"
			},
			"offsets": {
				"from": 703240,
				"to": 706960
			},
			"text": " But in practice we've also had situations where the bug is somewhere else."
		},
		{
			"timestamps": {
				"from": "00:11:46,960",
				"to": "00:11:49,720"
			},
			"offsets": {
				"from": 706960,
				"to": 709720
			},
			"text": " But with high likelihood it's the optimizer."
		},
		{
			"timestamps": {
				"from": "00:11:49,720",
				"to": "00:11:58,240"
			},
			"offsets": {
				"from": 709720,
				"to": 718240
			},
			"text": " So essentially like I said, we found about this approach to be with T effective in practice."
		},
		{
			"timestamps": {
				"from": "00:11:58,240",
				"to": "00:12:05,040"
			},
			"offsets": {
				"from": 718240,
				"to": 725040
			},
			"text": " We found about seven bugs, two of which were in the optimization rule that was used to"
		},
		{
			"timestamps": {
				"from": "00:12:05,040",
				"to": "00:12:07,160"
			},
			"offsets": {
				"from": 725040,
				"to": 727160
			},
			"text": " essentially optimize programs."
		},
		{
			"timestamps": {
				"from": "00:12:07,160",
				"to": "00:12:11,600"
			},
			"offsets": {
				"from": 727160,
				"to": 731600
			},
			"text": " Fiverr in the experimental U optimizer, but yeah, it's not supposed to be used by users"
		},
		{
			"timestamps": {
				"from": "00:12:11,600",
				"to": "00:12:13,240"
			},
			"offsets": {
				"from": 731600,
				"to": 733240
			},
			"text": " right now."
		},
		{
			"timestamps": {
				"from": "00:12:13,240",
				"to": "00:12:17,360"
			},
			"offsets": {
				"from": 733240,
				"to": 737360
			},
			"text": " So that's the purpose of testing anyway."
		},
		{
			"timestamps": {
				"from": "00:12:17,360",
				"to": "00:12:25,080"
			},
			"offsets": {
				"from": 737360,
				"to": 745080
			},
			"text": " So yeah, two are in the EVM optimizer, so it was used in production but fortunately it's"
		},
		{
			"timestamps": {
				"from": "00:12:25,080",
				"to": "00:12:28,680"
			},
			"offsets": {
				"from": 745080,
				"to": 748680
			},
			"text": " low, very low severity."
		},
		{
			"timestamps": {
				"from": "00:12:28,680",
				"to": "00:12:37,160"
			},
			"offsets": {
				"from": 748680,
				"to": 757160
			},
			"text": " Yeah, mostly because the, the, the buggy word question was optimizing constant."
		},
		{
			"timestamps": {
				"from": "00:12:37,160",
				"to": "00:12:43,960"
			},
			"offsets": {
				"from": 757160,
				"to": 763960
			},
			"text": " So it was, it was a very specific pattern that was going wrong."
		},
		{
			"timestamps": {
				"from": "00:12:43,960",
				"to": "00:12:51,400"
			},
			"offsets": {
				"from": 763960,
				"to": 771400
			},
			"text": " And this pattern could be detected visually because it's a compiler and constant or yeah,"
		},
		{
			"timestamps": {
				"from": "00:12:51,400",
				"to": "00:12:54,120"
			},
			"offsets": {
				"from": 771400,
				"to": 774120
			},
			"text": " that's essentially why it was low."
		},
		{
			"timestamps": {
				"from": "00:12:54,120",
				"to": "00:13:02,240"
			},
			"offsets": {
				"from": 774120,
				"to": 782240
			},
			"text": " The others were of course in the experimental versions of, that's why we tested it."
		},
		{
			"timestamps": {
				"from": "00:13:02,240",
				"to": "00:13:03,240"
			},
			"offsets": {
				"from": 782240,
				"to": 783240
			},
			"text": " So that's what we've done."
		},
		{
			"timestamps": {
				"from": "00:13:03,240",
				"to": "00:13:06,440"
			},
			"offsets": {
				"from": 783240,
				"to": 786440
			},
			"text": " Challenge is for being going forward."
		},
		{
			"timestamps": {
				"from": "00:13:06,440",
				"to": "00:13:11,080"
			},
			"offsets": {
				"from": 786440,
				"to": 791080
			},
			"text": " The main thing is we would like to find high severity bugs before the compiler should, right?"
		},
		{
			"timestamps": {
				"from": "00:13:11,080",
				"to": "00:13:13,760"
			},
			"offsets": {
				"from": 791080,
				"to": 793760
			},
			"text": " Because that's what matters."
		},
		{
			"timestamps": {
				"from": "00:13:13,760",
				"to": "00:13:19,640"
			},
			"offsets": {
				"from": 793760,
				"to": 799640
			},
			"text": " The main problem with fuzzing the compiler for correctness is that it's usually slow,"
		},
		{
			"timestamps": {
				"from": "00:13:19,640",
				"to": "00:13:20,640"
			},
			"offsets": {
				"from": 799640,
				"to": 800640
			},
			"text": " it's a slow process."
		},
		{
			"timestamps": {
				"from": "00:13:20,640",
				"to": "00:13:25,880"
			},
			"offsets": {
				"from": 800640,
				"to": 805880
			},
			"text": " I mean, typically in fuzzing, you select a small piece of code that's security critical"
		},
		{
			"timestamps": {
				"from": "00:13:25,880",
				"to": "00:13:32,480"
			},
			"offsets": {
				"from": 805880,
				"to": 812480
			},
			"text": " and fuzz it, which means typically you would like execution speeds of over 100 per second."
		},
		{
			"timestamps": {
				"from": "00:13:32,480",
				"to": "00:13:38,840"
			},
			"offsets": {
				"from": 812480,
				"to": 818840
			},
			"text": " But for example, if you want to test a component, we decided to test the EVM to encoder inside"
		},
		{
			"timestamps": {
				"from": "00:13:38,840",
				"to": "00:13:45,720"
			},
			"offsets": {
				"from": 818840,
				"to": 825720
			},
			"text": " solid E. The problem is that compilation is slow and this is perfectly fine for the use"
		},
		{
			"timestamps": {
				"from": "00:13:45,720",
				"to": "00:13:52,200"
			},
			"offsets": {
				"from": 825720,
				"to": 832200
			},
			"text": " case because developers can spend an additional second or so to save gas, right?"
		},
		{
			"timestamps": {
				"from": "00:13:52,200",
				"to": "00:13:58,840"
			},
			"offsets": {
				"from": 832200,
				"to": 838840
			},
			"text": " The only problem is that if you apply for fuzz testing, it can become a bottleneck."
		},
		{
			"timestamps": {
				"from": "00:13:58,840",
				"to": "00:14:07,520"
			},
			"offsets": {
				"from": 838840,
				"to": 847520
			},
			"text": " So to find ways to basically make it more suitable to fuzzing is a challenge that we"
		},
		{
			"timestamps": {
				"from": "00:14:07,520",
				"to": "00:14:10,680"
			},
			"offsets": {
				"from": 847520,
				"to": 850680
			},
			"text": " are currently working on."
		},
		{
			"timestamps": {
				"from": "00:14:10,680",
				"to": "00:14:15,880"
			},
			"offsets": {
				"from": 850680,
				"to": 855880
			},
			"text": " So in conclusion, we started doing continuous structure aware fuzzing to detect problems"
		},
		{
			"timestamps": {
				"from": "00:14:15,880",
				"to": "00:14:23,520"
			},
			"offsets": {
				"from": 855880,
				"to": 863520
			},
			"text": " with the optimizer and alert us whenever there's a bug in the codebase."
		},
		{
			"timestamps": {
				"from": "00:14:23,520",
				"to": "00:14:29,960"
			},
			"offsets": {
				"from": 863520,
				"to": 869960
			},
			"text": " It has been so far used for mainly testing the optimizer and data and decoding."
		},
		{
			"timestamps": {
				"from": "00:14:29,960",
				"to": "00:14:33,560"
			},
			"offsets": {
				"from": 869960,
				"to": 873560
			},
			"text": " It has decent assurance, but well-minded testing is not formal."
		},
		{
			"timestamps": {
				"from": "00:14:33,560",
				"to": "00:14:36,200"
			},
			"offsets": {
				"from": 873560,
				"to": 876200
			},
			"text": " It doesn't give you any formal guarantees."
		},
		{
			"timestamps": {
				"from": "00:14:36,200",
				"to": "00:14:40,360"
			},
			"offsets": {
				"from": 876200,
				"to": 880360
			},
			"text": " Yeah, take that with a grain solid, but yeah."
		},
		{
			"timestamps": {
				"from": "00:14:40,360",
				"to": "00:14:41,360"
			},
			"offsets": {
				"from": 880360,
				"to": 881360
			},
			"text": " That's a good idea."
		},
		{
			"timestamps": {
				"from": "00:14:41,360",
				"to": "00:14:42,360"
			},
			"offsets": {
				"from": 881360,
				"to": 882360
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:14:42,360",
				"to": "00:14:43,360"
			},
			"offsets": {
				"from": 882360,
				"to": 883360
			},
			"text": " Thank you."
		},
		{
			"timestamps": {
				"from": "00:14:43,360",
				"to": "00:14:44,360"
			},
			"offsets": {
				"from": 883360,
				"to": 884360
			},
			"text": " Any questions?"
		},
		{
			"timestamps": {
				"from": "00:14:44,360",
				"to": "00:14:47,360"
			},
			"offsets": {
				"from": 884360,
				"to": 887360
			},
			"text": " So how much do you know about the coverage that you're able to get with, say, what Monday"
		},
		{
			"timestamps": {
				"from": "00:14:47,360",
				"to": "00:14:48,360"
			},
			"offsets": {
				"from": 887360,
				"to": 888360
			},
			"text": " fuzzing?"
		},
		{
			"timestamps": {
				"from": "00:14:48,360",
				"to": "00:15:05,360"
			},
			"offsets": {
				"from": 888360,
				"to": 905360
			},
			"text": " With one day, it's hard to say, but with the use that you run it every day, right?"
		},
		{
			"timestamps": {
				"from": "00:15:05,360",
				"to": "00:15:12,640"
			},
			"offsets": {
				"from": 905360,
				"to": 912640
			},
			"text": " So we started and then it builds a corpus and the same corpus is used."
		},
		{
			"timestamps": {
				"from": "00:15:12,640",
				"to": "00:15:15,360"
			},
			"offsets": {
				"from": 912640,
				"to": 915360
			},
			"text": " So you can think of it as a cumulative curve."
		},
		{
			"timestamps": {
				"from": "00:15:15,360",
				"to": "00:15:18,840"
			},
			"offsets": {
				"from": 915360,
				"to": 918840
			},
			"text": " It improves over time and then keeps increasing essentially."
		},
		{
			"timestamps": {
				"from": "00:15:18,840",
				"to": "00:15:23,560"
			},
			"offsets": {
				"from": 918840,
				"to": 923560
			},
			"text": " So essentially right now, as it stands, just for the optimizer, it's pretty good."
		},
		{
			"timestamps": {
				"from": "00:15:23,560",
				"to": "00:15:28,360"
			},
			"offsets": {
				"from": 923560,
				"to": 928360
			},
			"text": " It's about 93% of something of edge coverage."
		},
		{
			"timestamps": {
				"from": "00:15:28,360",
				"to": "00:15:29,360"
			},
			"offsets": {
				"from": 928360,
				"to": 929360
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:15:29,360",
				"to": "00:15:30,360"
			},
			"offsets": {
				"from": 929360,
				"to": 930360
			},
			"text": " Cool."
		},
		{
			"timestamps": {
				"from": "00:15:30,360",
				"to": "00:15:35,360"
			},
			"offsets": {
				"from": 930360,
				"to": 935360
			},
			"text": " And we keep running to keep an eye on it and see if we can improve itself."
		},
		{
			"timestamps": {
				"from": "00:15:35,360",
				"to": "00:15:37,160"
			},
			"offsets": {
				"from": 935360,
				"to": 937160
			},
			"text": " Any idea of what's missing?"
		},
		{
			"timestamps": {
				"from": "00:15:37,160",
				"to": "00:15:42,160"
			},
			"offsets": {
				"from": 937160,
				"to": 942160
			},
			"text": " Is it syntactic features of the input language that aren't in a vertical buffer specification"
		},
		{
			"timestamps": {
				"from": "00:15:42,160",
				"to": "00:15:46,520"
			},
			"offsets": {
				"from": 942160,
				"to": 946520
			},
			"text": " or is it something else?"
		},
		{
			"timestamps": {
				"from": "00:15:46,520",
				"to": "00:15:51,760"
			},
			"offsets": {
				"from": 946520,
				"to": 951760
			},
			"text": " So I believe this is syntactic."
		},
		{
			"timestamps": {
				"from": "00:15:51,760",
				"to": "00:15:56,440"
			},
			"offsets": {
				"from": 951760,
				"to": 956440
			},
			"text": " Issues are not a problem right now."
		},
		{
			"timestamps": {
				"from": "00:15:56,440",
				"to": "00:16:01,440"
			},
			"offsets": {
				"from": 956440,
				"to": 961440
			},
			"text": " So the main challenge is to keep up with language improvement."
		},
		{
			"timestamps": {
				"from": "00:16:01,440",
				"to": "00:16:07,240"
			},
			"offsets": {
				"from": 961440,
				"to": 967240
			},
			"text": " So a new language features get added and that has to be reflected in the probe of spec."
		},
		{
			"timestamps": {
				"from": "00:16:07,240",
				"to": "00:16:14,640"
			},
			"offsets": {
				"from": 967240,
				"to": 974640
			},
			"text": " So essentially to keep up with it and making sure that when there's some change, that change"
		},
		{
			"timestamps": {
				"from": "00:16:14,640",
				"to": "00:16:16,560"
			},
			"offsets": {
				"from": 974640,
				"to": 976560
			},
			"text": " is covered in the fuzzing process."
		},
		{
			"timestamps": {
				"from": "00:16:16,560",
				"to": "00:16:17,560"
			},
			"offsets": {
				"from": 976560,
				"to": 977560
			},
			"text": " So yeah."
		},
		{
			"timestamps": {
				"from": "00:16:17,560",
				"to": "00:16:18,560"
			},
			"offsets": {
				"from": 977560,
				"to": 978560
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:16:18,560",
				"to": "00:16:19,560"
			},
			"offsets": {
				"from": 978560,
				"to": 979560
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:16:19,560",
				"to": "00:16:26,160"
			},
			"offsets": {
				"from": 979560,
				"to": 986160
			},
			"text": " Maybe what is missing is to check if all branch statements inside the optimizer steps are"
		},
		{
			"timestamps": {
				"from": "00:16:26,160",
				"to": "00:16:34,480"
			},
			"offsets": {
				"from": 986160,
				"to": 994480
			},
			"text": " covered at a very poor level, but at a high level, it's hard to say."
		},
		{
			"timestamps": {
				"from": "00:16:34,480",
				"to": "00:16:35,480"
			},
			"offsets": {
				"from": 994480,
				"to": 995480
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:16:35,480",
				"to": "00:16:41,120"
			},
			"offsets": {
				"from": 995480,
				"to": 1001120
			},
			"text": " How do you decide when you decide to use your problem?"
		},
		{
			"timestamps": {
				"from": "00:16:41,120",
				"to": "00:16:46,120"
			},
			"offsets": {
				"from": 1001120,
				"to": 1006120
			},
			"text": " Because you are introducing some local, so you will obtain different transfers."
		},
		{
			"timestamps": {
				"from": "00:16:46,120",
				"to": "00:16:52,480"
			},
			"offsets": {
				"from": 1006120,
				"to": 1012480
			},
			"text": " So when you decide is an issue or not?"
		},
		{
			"timestamps": {
				"from": "00:16:52,480",
				"to": "00:16:56,880"
			},
			"offsets": {
				"from": 1012480,
				"to": 1016880
			},
			"text": " So regarding gas costs, the new interpreter is oblivious to gas."
		},
		{
			"timestamps": {
				"from": "00:16:56,880",
				"to": "00:16:58,560"
			},
			"offsets": {
				"from": 1016880,
				"to": 1018560
			},
			"text": " There's no notion of gas."
		},
		{
			"timestamps": {
				"from": "00:16:58,560",
				"to": "00:17:01,560"
			},
			"offsets": {
				"from": 1018560,
				"to": 1021560
			},
			"text": " It just runs code."
		},
		{
			"timestamps": {
				"from": "00:17:01,560",
				"to": "00:17:11,120"
			},
			"offsets": {
				"from": 1021560,
				"to": 1031120
			},
			"text": " Regarding how we decide, basically there's a bug file by the fuzzing program and it has"
		},
		{
			"timestamps": {
				"from": "00:17:11,120",
				"to": "00:17:12,800"
			},
			"offsets": {
				"from": 1031120,
				"to": 1032800
			},
			"text": " a minimized input."
		},
		{
			"timestamps": {
				"from": "00:17:12,800",
				"to": "00:17:17,600"
			},
			"offsets": {
				"from": 1032800,
				"to": 1037600
			},
			"text": " We try to rerun the input and check the side effects."
		},
		{
			"timestamps": {
				"from": "00:17:17,600",
				"to": "00:17:23,040"
			},
			"offsets": {
				"from": 1037600,
				"to": 1043040
			},
			"text": " It's pretty simple workflow, mainly because of the interpreter."
		},
		{
			"timestamps": {
				"from": "00:17:23,040",
				"to": "00:17:28,080"
			},
			"offsets": {
				"from": 1043040,
				"to": 1048080
			},
			"text": " So you get an execution trace, which is sort of readable."
		},
		{
			"timestamps": {
				"from": "00:17:28,080",
				"to": "00:17:34,320"
			},
			"offsets": {
				"from": 1048080,
				"to": 1054320
			},
			"text": " And if the pack execution trace is pre-enforced and it's pretty straightforward."
		},
		{
			"timestamps": {
				"from": "00:17:34,320",
				"to": "00:17:41,640"
			},
			"offsets": {
				"from": 1054320,
				"to": 1061640
			},
			"text": " So it can quickly tell you whether it's a bug in the optimizer or that some other code."
		},
		{
			"timestamps": {
				"from": "00:17:41,640",
				"to": "00:17:45,280"
			},
			"offsets": {
				"from": 1061640,
				"to": 1065280
			},
			"text": " Of course, like I said, we introduced code and there could be a bug in the code that we"
		},
		{
			"timestamps": {
				"from": "00:17:45,280",
				"to": "00:17:47,240"
			},
			"offsets": {
				"from": 1065280,
				"to": 1067240
			},
			"text": " introduced."
		},
		{
			"timestamps": {
				"from": "00:17:47,240",
				"to": "00:17:54,240"
			},
			"offsets": {
				"from": 1067240,
				"to": 1074240
			},
			"text": " But it doesn't take longer than a few minutes to quickly decide whether which bucket it"
		},
		{
			"timestamps": {
				"from": "00:17:54,240",
				"to": "00:17:55,240"
			},
			"offsets": {
				"from": 1074240,
				"to": 1075240
			},
			"text": " also took."
		},
		{
			"timestamps": {
				"from": "00:17:55,240",
				"to": "00:18:02,240"
			},
			"offsets": {
				"from": 1075240,
				"to": 1082240
			},
			"text": " Thank you."
		},
		{
			"timestamps": {
				"from": "00:18:02,240",
				"to": "00:18:09,240"
			},
			"offsets": {
				"from": 1082240,
				"to": 1089240
			},
			"text": " [Applause]"
		},
		{
			"timestamps": {
				"from": "00:18:09,240",
				"to": "00:18:24,240"
			},
			"offsets": {
				"from": 1089240,
				"to": 1104240
			},
			"text": " [Music]"
		}
	]
}
