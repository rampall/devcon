{
	"systeminfo": "AVX = 1 | AVX2 = 1 | AVX512 = 0 | FMA = 1 | NEON = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | VSX = 0 | ",
	"model": {
		"type": "base",
		"multilingual": false,
		"vocab": 51864,
		"audio": {
			"ctx": 1500,
			"state": 512,
			"head": 8,
			"layer": 6
		},
		"text": {
			"ctx": 448,
			"state": 512,
			"head": 8,
			"layer": 6
		},
		"mels": 80,
		"f16": 1
	},
	"params": {
		"model": "models/ggml-base.en.bin",
		"language": "en",
		"translate": false
	},
	"result": {
		"language": "en"
	},
	"transcription": [
		{
			"timestamps": {
				"from": "00:00:00,000",
				"to": "00:00:02,980"
			},
			"offsets": {
				"from": 0,
				"to": 2980
			},
			"text": " [MUSIC PLAYING]"
		},
		{
			"timestamps": {
				"from": "00:00:02,980",
				"to": "00:00:17,800"
			},
			"offsets": {
				"from": 2980,
				"to": 17800
			},
			"text": " Welcome to this workshop on how to build secure contract"
		},
		{
			"timestamps": {
				"from": "00:00:17,800",
				"to": "00:00:20,040"
			},
			"offsets": {
				"from": 17800,
				"to": 20040
			},
			"text": " using fuzzing."
		},
		{
			"timestamps": {
				"from": "00:00:20,040",
				"to": "00:00:21,920"
			},
			"offsets": {
				"from": 20040,
				"to": 21920
			},
			"text": " Before we start, just to get a sense,"
		},
		{
			"timestamps": {
				"from": "00:00:21,920",
				"to": "00:00:26,880"
			},
			"offsets": {
				"from": 21920,
				"to": 26880
			},
			"text": " how many of you have used a key nine in the past?"
		},
		{
			"timestamps": {
				"from": "00:00:26,880",
				"to": "00:00:29,680"
			},
			"offsets": {
				"from": 26880,
				"to": 29680
			},
			"text": " A kinder, it's a-- what we're going to present."
		},
		{
			"timestamps": {
				"from": "00:00:29,680",
				"to": "00:00:35,400"
			},
			"offsets": {
				"from": 29680,
				"to": 35400
			},
			"text": " OK, so who are we?"
		},
		{
			"timestamps": {
				"from": "00:00:35,400",
				"to": "00:00:38,360"
			},
			"offsets": {
				"from": 35400,
				"to": 38360
			},
			"text": " So Gustavo, Rachael, and myself, Rosanna Feist."
		},
		{
			"timestamps": {
				"from": "00:00:38,360",
				"to": "00:00:41,120"
			},
			"offsets": {
				"from": 38360,
				"to": 41120
			},
			"text": " We are both security researcher at 12-bit."
		},
		{
			"timestamps": {
				"from": "00:00:41,120",
				"to": "00:00:43,320"
			},
			"offsets": {
				"from": 41120,
				"to": 43320
			},
			"text": " If you don't know us, we are a company"
		},
		{
			"timestamps": {
				"from": "00:00:43,320",
				"to": "00:00:46,280"
			},
			"offsets": {
				"from": 43320,
				"to": 46280
			},
			"text": " where we specialize in high-hand security technology."
		},
		{
			"timestamps": {
				"from": "00:00:46,280",
				"to": "00:00:48,640"
			},
			"offsets": {
				"from": 46280,
				"to": 48640
			},
			"text": " We have expertise in blockchain, but also in other topics."
		},
		{
			"timestamps": {
				"from": "00:00:48,640",
				"to": "00:00:51,280"
			},
			"offsets": {
				"from": 48640,
				"to": 51280
			},
			"text": " For example, we do a lot of cloud-native application,"
		},
		{
			"timestamps": {
				"from": "00:00:51,280",
				"to": "00:00:53,960"
			},
			"offsets": {
				"from": 51280,
				"to": 53960
			},
			"text": " or we do a lot of cryptography with like Vico stuff."
		},
		{
			"timestamps": {
				"from": "00:00:53,960",
				"to": "00:00:58,000"
			},
			"offsets": {
				"from": 53960,
				"to": 58000
			},
			"text": " And so something that I think differs from other company"
		},
		{
			"timestamps": {
				"from": "00:00:58,000",
				"to": "00:01:00,040"
			},
			"offsets": {
				"from": 58000,
				"to": 60040
			},
			"text": " is that we spend a lot of time trying"
		},
		{
			"timestamps": {
				"from": "00:01:00,040",
				"to": "00:01:02,120"
			},
			"offsets": {
				"from": 60040,
				"to": 62120
			},
			"text": " to apply research and program analysis"
		},
		{
			"timestamps": {
				"from": "00:01:02,120",
				"to": "00:01:03,800"
			},
			"offsets": {
				"from": 62120,
				"to": 63800
			},
			"text": " into our daily job."
		},
		{
			"timestamps": {
				"from": "00:01:03,800",
				"to": "00:01:06,840"
			},
			"offsets": {
				"from": 63800,
				"to": 66840
			},
			"text": " As a result, we have built a lot of open source tool."
		},
		{
			"timestamps": {
				"from": "00:01:06,840",
				"to": "00:01:09,960"
			},
			"offsets": {
				"from": 66840,
				"to": 69960
			},
			"text": " You might know Slitter, which is a static analyzer for Solidity,"
		},
		{
			"timestamps": {
				"from": "00:01:09,960",
				"to": "00:01:11,200"
			},
			"offsets": {
				"from": 69960,
				"to": 71200
			},
			"text": " a keynote."
		},
		{
			"timestamps": {
				"from": "00:01:11,200",
				"to": "00:01:13,080"
			},
			"offsets": {
				"from": 71200,
				"to": 73080
			},
			"text": " We are going to talk about it today."
		},
		{
			"timestamps": {
				"from": "00:01:13,080",
				"to": "00:01:14,680"
			},
			"offsets": {
				"from": 73080,
				"to": 74680
			},
			"text": " But we have a lot of other tools, for example,"
		},
		{
			"timestamps": {
				"from": "00:01:14,680",
				"to": "00:01:17,400"
			},
			"offsets": {
				"from": 74680,
				"to": 77400
			},
			"text": " Tiller, which is a static analyzer for Algorand,"
		},
		{
			"timestamps": {
				"from": "00:01:17,400",
				"to": "00:01:19,560"
			},
			"offsets": {
				"from": 77400,
				"to": 79560
			},
			"text": " Armana, which is a static analyzer for KEO,"
		},
		{
			"timestamps": {
				"from": "00:01:19,560",
				"to": "00:01:22,760"
			},
			"offsets": {
				"from": 79560,
				"to": 82760
			},
			"text": " and so on for techniques."
		},
		{
			"timestamps": {
				"from": "00:01:22,760",
				"to": "00:01:24,840"
			},
			"offsets": {
				"from": 82760,
				"to": 84840
			},
			"text": " The first one is using unit test."
		},
		{
			"timestamps": {
				"from": "00:01:24,840",
				"to": "00:01:27,200"
			},
			"offsets": {
				"from": 84840,
				"to": 87200
			},
			"text": " The second one is using manual review."
		},
		{
			"timestamps": {
				"from": "00:01:27,200",
				"to": "00:01:30,120"
			},
			"offsets": {
				"from": 87200,
				"to": 90120
			},
			"text": " And the two last techniques are using fully automated"
		},
		{
			"timestamps": {
				"from": "00:01:30,120",
				"to": "00:01:34,040"
			},
			"offsets": {
				"from": 90120,
				"to": 94040
			},
			"text": " or semi-automated technique."
		},
		{
			"timestamps": {
				"from": "00:01:34,040",
				"to": "00:01:37,760"
			},
			"offsets": {
				"from": 94040,
				"to": 97760
			},
			"text": " I'm assuming everyone here is familiar with unit test."
		},
		{
			"timestamps": {
				"from": "00:01:37,760",
				"to": "00:01:40,080"
			},
			"offsets": {
				"from": 97760,
				"to": 100080
			},
			"text": " You should use unit test, and they are good, usually,"
		},
		{
			"timestamps": {
				"from": "00:01:40,080",
				"to": "00:01:43,840"
			},
			"offsets": {
				"from": 100080,
				"to": 103840
			},
			"text": " to cover that the system is working as expected"
		},
		{
			"timestamps": {
				"from": "00:01:43,840",
				"to": "00:01:45,600"
			},
			"offsets": {
				"from": 103840,
				"to": 105600
			},
			"text": " in the happy path."
		},
		{
			"timestamps": {
				"from": "00:01:45,600",
				"to": "00:01:48,000"
			},
			"offsets": {
				"from": 105600,
				"to": 108000
			},
			"text": " Something that we have learned over audit"
		},
		{
			"timestamps": {
				"from": "00:01:48,000",
				"to": "00:01:51,400"
			},
			"offsets": {
				"from": 108000,
				"to": 111400
			},
			"text": " and analysis that we have done is"
		},
		{
			"timestamps": {
				"from": "00:01:51,400",
				"to": "00:01:54,520"
			},
			"offsets": {
				"from": 111400,
				"to": 114520
			},
			"text": " there is no correlation between the quality"
		},
		{
			"timestamps": {
				"from": "00:01:54,520",
				"to": "00:01:55,800"
			},
			"offsets": {
				"from": 114520,
				"to": 115800
			},
			"text": " and the quantity of the unit test"
		},
		{
			"timestamps": {
				"from": "00:01:55,800",
				"to": "00:01:59,800"
			},
			"offsets": {
				"from": 115800,
				"to": 119800
			},
			"text": " and the likelihood of having high severity vulnerability."
		},
		{
			"timestamps": {
				"from": "00:01:59,800",
				"to": "00:02:02,160"
			},
			"offsets": {
				"from": 119800,
				"to": 122160
			},
			"text": " And this is actually a very academic paper on this,"
		},
		{
			"timestamps": {
				"from": "00:02:02,160",
				"to": "00:02:05,000"
			},
			"offsets": {
				"from": 122160,
				"to": 125000
			},
			"text": " where we have looked over all the audits we have done,"
		},
		{
			"timestamps": {
				"from": "00:02:05,000",
				"to": "00:02:08,400"
			},
			"offsets": {
				"from": 125000,
				"to": 128400
			},
			"text": " and this is a correlation that we have not found."
		},
		{
			"timestamps": {
				"from": "00:02:08,400",
				"to": "00:02:10,920"
			},
			"offsets": {
				"from": 128400,
				"to": 130920
			},
			"text": " The reason why our intuition tells us"
		},
		{
			"timestamps": {
				"from": "00:02:10,920",
				"to": "00:02:12,840"
			},
			"offsets": {
				"from": 130920,
				"to": 132840
			},
			"text": " that when you are going to write your unit test,"
		},
		{
			"timestamps": {
				"from": "00:02:12,840",
				"to": "00:02:15,240"
			},
			"offsets": {
				"from": 132840,
				"to": 135240
			},
			"text": " you are going to try to cover happy path,"
		},
		{
			"timestamps": {
				"from": "00:02:15,240",
				"to": "00:02:18,640"
			},
			"offsets": {
				"from": 135240,
				"to": 138640
			},
			"text": " things that are supposed to do in the correct execution,"
		},
		{
			"timestamps": {
				"from": "00:02:18,640",
				"to": "00:02:21,480"
			},
			"offsets": {
				"from": 138640,
				"to": 141480
			},
			"text": " while vulnerability usually lies in the edge case"
		},
		{
			"timestamps": {
				"from": "00:02:21,480",
				"to": "00:02:23,640"
			},
			"offsets": {
				"from": 141480,
				"to": 143640
			},
			"text": " in the things that you haven't considered."
		},
		{
			"timestamps": {
				"from": "00:02:23,640",
				"to": "00:02:29,440"
			},
			"offsets": {
				"from": 143640,
				"to": 149440
			},
			"text": " The second, this is an example of unit test."
		},
		{
			"timestamps": {
				"from": "00:02:29,440",
				"to": "00:02:32,040"
			},
			"offsets": {
				"from": 149440,
				"to": 152040
			},
			"text": " The second technique that you can use is manual review."
		},
		{
			"timestamps": {
				"from": "00:02:32,040",
				"to": "00:02:34,400"
			},
			"offsets": {
				"from": 152040,
				"to": 154400
			},
			"text": " You can go line by line and try to understand"
		},
		{
			"timestamps": {
				"from": "00:02:34,400",
				"to": "00:02:36,040"
			},
			"offsets": {
				"from": 154400,
				"to": 156040
			},
			"text": " what the code is supposed to do,"
		},
		{
			"timestamps": {
				"from": "00:02:36,040",
				"to": "00:02:37,120"
			},
			"offsets": {
				"from": 156040,
				"to": 157120
			},
			"text": " what it is actually doing,"
		},
		{
			"timestamps": {
				"from": "00:02:37,120",
				"to": "00:02:39,920"
			},
			"offsets": {
				"from": 157120,
				"to": 159920
			},
			"text": " and if there is a difference between both."
		},
		{
			"timestamps": {
				"from": "00:02:39,920",
				"to": "00:02:43,240"
			},
			"offsets": {
				"from": 159920,
				"to": 163240
			},
			"text": " Doing manual review requires a specific set of skills."
		},
		{
			"timestamps": {
				"from": "00:02:43,240",
				"to": "00:02:47,280"
			},
			"offsets": {
				"from": 163240,
				"to": 167280
			},
			"text": " It's time-consuming, it's kind of difficult to do."
		},
		{
			"timestamps": {
				"from": "00:02:47,280",
				"to": "00:02:49,760"
			},
			"offsets": {
				"from": 167280,
				"to": 169760
			},
			"text": " Usually, you are going to go through a security company"
		},
		{
			"timestamps": {
				"from": "00:02:49,760",
				"to": "00:02:51,880"
			},
			"offsets": {
				"from": 169760,
				"to": 171880
			},
			"text": " to do a security assessment to have people"
		},
		{
			"timestamps": {
				"from": "00:02:51,880",
				"to": "00:02:53,640"
			},
			"offsets": {
				"from": 171880,
				"to": 173640
			},
			"text": " that have this specific set of skills."
		},
		{
			"timestamps": {
				"from": "00:02:53,640",
				"to": "00:02:57,320"
			},
			"offsets": {
				"from": 173640,
				"to": 177320
			},
			"text": " The next technique that you can use"
		},
		{
			"timestamps": {
				"from": "00:02:57,320",
				"to": "00:02:59,760"
			},
			"offsets": {
				"from": 177320,
				"to": 179760
			},
			"text": " is using a fully automated tool."
		},
		{
			"timestamps": {
				"from": "00:02:59,760",
				"to": "00:03:02,800"
			},
			"offsets": {
				"from": 179760,
				"to": 182800
			},
			"text": " These are like the tools that are going to find"
		},
		{
			"timestamps": {
				"from": "00:03:02,800",
				"to": "00:03:05,160"
			},
			"offsets": {
				"from": 182800,
				"to": 185160
			},
			"text": " some of the common bugs you're just going to click"
		},
		{
			"timestamps": {
				"from": "00:03:05,160",
				"to": "00:03:07,000"
			},
			"offsets": {
				"from": 185160,
				"to": 187000
			},
			"text": " on the bottom and the tool is going to tell you"
		},
		{
			"timestamps": {
				"from": "00:03:07,000",
				"to": "00:03:09,240"
			},
			"offsets": {
				"from": 187000,
				"to": 189240
			},
			"text": " there is this type of bug or not."
		},
		{
			"timestamps": {
				"from": "00:03:09,240",
				"to": "00:03:10,520"
			},
			"offsets": {
				"from": 189240,
				"to": 190520
			},
			"text": " For example, you might know Slitter,"
		},
		{
			"timestamps": {
				"from": "00:03:10,520",
				"to": "00:03:12,920"
			},
			"offsets": {
				"from": 190520,
				"to": 192920
			},
			"text": " which is our static analyzer for Solidity."
		},
		{
			"timestamps": {
				"from": "00:03:12,920",
				"to": "00:03:15,520"
			},
			"offsets": {
				"from": 192920,
				"to": 195520
			},
			"text": " This type of techniques might give you false running,"
		},
		{
			"timestamps": {
				"from": "00:03:16,560",
				"to": "00:03:17,760"
			},
			"offsets": {
				"from": 196560,
				"to": 197760
			},
			"text": " but they are also really powerful"
		},
		{
			"timestamps": {
				"from": "00:03:17,760",
				"to": "00:03:20,720"
			},
			"offsets": {
				"from": 197760,
				"to": 200720
			},
			"text": " because they might cut critical bugs."
		},
		{
			"timestamps": {
				"from": "00:03:20,720",
				"to": "00:03:23,720"
			},
			"offsets": {
				"from": 200720,
				"to": 203720
			},
			"text": " Oh, yeah."
		},
		{
			"timestamps": {
				"from": "00:03:23,720",
				"to": "00:03:25,960"
			},
			"offsets": {
				"from": 203720,
				"to": 205960
			},
			"text": " (mumbling)"
		},
		{
			"timestamps": {
				"from": "00:03:25,960",
				"to": "00:03:28,960"
			},
			"offsets": {
				"from": 205960,
				"to": 208960
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:03:28,960",
				"to": "00:03:31,200"
			},
			"offsets": {
				"from": 208960,
				"to": 211200
			},
			"text": " (mumbling)"
		},
		{
			"timestamps": {
				"from": "00:03:31,200",
				"to": "00:03:36,400"
			},
			"offsets": {
				"from": 211200,
				"to": 216400
			},
			"text": " Okay, so for Slitter, the best technique is"
		},
		{
			"timestamps": {
				"from": "00:03:36,400",
				"to": "00:03:39,200"
			},
			"offsets": {
				"from": 216400,
				"to": 219200
			},
			"text": " spend one hour, like the first time you tried it."
		},
		{
			"timestamps": {
				"from": "00:03:39,200",
				"to": "00:03:41,360"
			},
			"offsets": {
				"from": 219200,
				"to": 221360
			},
			"text": " There is a triage mode, so once you have triage,"
		},
		{
			"timestamps": {
				"from": "00:03:41,360",
				"to": "00:03:42,960"
			},
			"offsets": {
				"from": 221360,
				"to": 222960
			},
			"text": " like the result, as I won't show up,"
		},
		{
			"timestamps": {
				"from": "00:03:42,960",
				"to": "00:03:44,680"
			},
			"offsets": {
				"from": 222960,
				"to": 224680
			},
			"text": " like in the next execution."
		},
		{
			"timestamps": {
				"from": "00:03:44,680",
				"to": "00:03:46,600"
			},
			"offsets": {
				"from": 224680,
				"to": 226600
			},
			"text": " And if it takes you like one hour,"
		},
		{
			"timestamps": {
				"from": "00:03:46,600",
				"to": "00:03:48,600"
			},
			"offsets": {
				"from": 226600,
				"to": 228600
			},
			"text": " and at the end of the day, you might be able"
		},
		{
			"timestamps": {
				"from": "00:03:48,600",
				"to": "00:03:50,680"
			},
			"offsets": {
				"from": 228600,
				"to": 230680
			},
			"text": " to catch critical vulnerability,"
		},
		{
			"timestamps": {
				"from": "00:03:50,680",
				"to": "00:03:53,440"
			},
			"offsets": {
				"from": 230680,
				"to": 233440
			},
			"text": " I would say it's for things for the first result."
		},
		{
			"timestamps": {
				"from": "00:03:53,440",
				"to": "00:03:57,560"
			},
			"offsets": {
				"from": 233440,
				"to": 237560
			},
			"text": " And like, we have like a list of trophy for Slitter"
		},
		{
			"timestamps": {
				"from": "00:03:57,560",
				"to": "00:03:59,760"
			},
			"offsets": {
				"from": 237560,
				"to": 239760
			},
			"text": " that demonstrates that we have found a lot"
		},
		{
			"timestamps": {
				"from": "00:03:59,760",
				"to": "00:04:01,480"
			},
			"offsets": {
				"from": 239760,
				"to": 241480
			},
			"text": " of like actual bugs using it."
		},
		{
			"timestamps": {
				"from": "00:04:01,480",
				"to": "00:04:05,320"
			},
			"offsets": {
				"from": 241480,
				"to": 245320
			},
			"text": " So yet there is like a false positive pass for Salam,"
		},
		{
			"timestamps": {
				"from": "00:04:05,320",
				"to": "00:04:07,720"
			},
			"offsets": {
				"from": 245320,
				"to": 247720
			},
			"text": " but it's not going to take you so much time"
		},
		{
			"timestamps": {
				"from": "00:04:07,720",
				"to": "00:04:09,600"
			},
			"offsets": {
				"from": 247720,
				"to": 249600
			},
			"text": " and it's going to provide you value."
		},
		{
			"timestamps": {
				"from": "00:04:09,600",
				"to": "00:04:12,160"
			},
			"offsets": {
				"from": 249600,
				"to": 252160
			},
			"text": " For example, we have a GitHub action with Slitter"
		},
		{
			"timestamps": {
				"from": "00:04:12,160",
				"to": "00:04:15,320"
			},
			"offsets": {
				"from": 252160,
				"to": 255320
			},
			"text": " when you can connect it to GitHub on every pull request"
		},
		{
			"timestamps": {
				"from": "00:04:15,320",
				"to": "00:04:17,640"
			},
			"offsets": {
				"from": 255320,
				"to": 257640
			},
			"text": " coming depending on how you are going to configure it."
		},
		{
			"timestamps": {
				"from": "00:04:17,640",
				"to": "00:04:19,840"
			},
			"offsets": {
				"from": 257640,
				"to": 259840
			},
			"text": " It's going to run if to see if you are introducing"
		},
		{
			"timestamps": {
				"from": "00:04:19,840",
				"to": "00:04:21,320"
			},
			"offsets": {
				"from": 259840,
				"to": 261320
			},
			"text": " you new vulnerability."
		},
		{
			"timestamps": {
				"from": "00:04:21,320",
				"to": "00:04:23,080"
			},
			"offsets": {
				"from": 261320,
				"to": 263080
			},
			"text": " - Yeah, perhaps, sorry, perfect."
		},
		{
			"timestamps": {
				"from": "00:04:23,080",
				"to": "00:04:27,080"
			},
			"offsets": {
				"from": 263080,
				"to": 267080
			},
			"text": " Perhaps next year we will do a Slitter worship on."
		},
		{
			"timestamps": {
				"from": "00:04:27,080",
				"to": "00:04:28,440"
			},
			"offsets": {
				"from": 267080,
				"to": 268440
			},
			"text": " - Yeah."
		},
		{
			"timestamps": {
				"from": "00:04:28,440",
				"to": "00:04:30,360"
			},
			"offsets": {
				"from": 268440,
				"to": 270360
			},
			"text": " And this is open source and which way."
		},
		{
			"timestamps": {
				"from": "00:04:30,360",
				"to": "00:04:35,560"
			},
			"offsets": {
				"from": 270360,
				"to": 275560
			},
			"text": " Okay, the last technique that you can use"
		},
		{
			"timestamps": {
				"from": "00:04:35,560",
				"to": "00:04:38,080"
			},
			"offsets": {
				"from": 275560,
				"to": 278080
			},
			"text": " is using semi-automated analysis."
		},
		{
			"timestamps": {
				"from": "00:04:38,080",
				"to": "00:04:40,720"
			},
			"offsets": {
				"from": 278080,
				"to": 280720
			},
			"text": " So these are going to be tools for which you are going"
		},
		{
			"timestamps": {
				"from": "00:04:40,720",
				"to": "00:04:43,200"
			},
			"offsets": {
				"from": 280720,
				"to": 283200
			},
			"text": " to provide some information for which you are going"
		},
		{
			"timestamps": {
				"from": "00:04:43,200",
				"to": "00:04:47,080"
			},
			"offsets": {
				"from": 283200,
				"to": 287080
			},
			"text": " to other human intervention to explain to the tool"
		},
		{
			"timestamps": {
				"from": "00:04:47,080",
				"to": "00:04:48,800"
			},
			"offsets": {
				"from": 287080,
				"to": 288800
			},
			"text": " what you are looking for."
		},
		{
			"timestamps": {
				"from": "00:04:48,800",
				"to": "00:04:50,840"
			},
			"offsets": {
				"from": 288800,
				"to": 290840
			},
			"text": " And this is a bit more difficult to use"
		},
		{
			"timestamps": {
				"from": "00:04:50,840",
				"to": "00:04:52,760"
			},
			"offsets": {
				"from": 290840,
				"to": 292760
			},
			"text": " because it requires like this interaction"
		},
		{
			"timestamps": {
				"from": "00:04:52,760",
				"to": "00:04:54,100"
			},
			"offsets": {
				"from": 292760,
				"to": 294100
			},
			"text": " from the user."
		},
		{
			"timestamps": {
				"from": "00:04:54,100",
				"to": "00:04:56,480"
			},
			"offsets": {
				"from": 294100,
				"to": 296480
			},
			"text": " It's a technique we are going to see today"
		},
		{
			"timestamps": {
				"from": "00:04:56,480",
				"to": "00:04:58,400"
			},
			"offsets": {
				"from": 296480,
				"to": 298400
			},
			"text": " with property-based testing with EKNO."
		},
		{
			"timestamps": {
				"from": "00:04:58,400",
				"to": "00:05:02,560"
			},
			"offsets": {
				"from": 298400,
				"to": 302560
			},
			"text": " So what is property-based testing?"
		},
		{
			"timestamps": {
				"from": "00:05:02,560",
				"to": "00:05:07,080"
			},
			"offsets": {
				"from": 302560,
				"to": 307080
			},
			"text": " To understand how it works,"
		},
		{
			"timestamps": {
				"from": "00:05:07,080",
				"to": "00:05:08,440"
			},
			"offsets": {
				"from": 307080,
				"to": 308440
			},
			"text": " I have to introduce FELTING."
		},
		{
			"timestamps": {
				"from": "00:05:08,440",
				"to": "00:05:11,160"
			},
			"offsets": {
				"from": 308440,
				"to": 311160
			},
			"text": " So FELTING is a standard program analysis technique"
		},
		{
			"timestamps": {
				"from": "00:05:11,160",
				"to": "00:05:14,600"
			},
			"offsets": {
				"from": 311160,
				"to": 314600
			},
			"text": " that is used a lot in traditional security."
		},
		{
			"timestamps": {
				"from": "00:05:14,600",
				"to": "00:05:18,040"
			},
			"offsets": {
				"from": 314600,
				"to": 318040
			},
			"text": " The idea is basically you provide a random input"
		},
		{
			"timestamps": {
				"from": "00:05:18,040",
				"to": "00:05:20,880"
			},
			"offsets": {
				"from": 318040,
				"to": 320880
			},
			"text": " to the program and you try to see what's going to happen."
		},
		{
			"timestamps": {
				"from": "00:05:20,880",
				"to": "00:05:23,560"
			},
			"offsets": {
				"from": 320880,
				"to": 323560
			},
			"text": " You try to stress this with random input."
		},
		{
			"timestamps": {
				"from": "00:05:23,560",
				"to": "00:05:26,720"
			},
			"offsets": {
				"from": 323560,
				"to": 326720
			},
			"text": " The most trivial, further that you can write,"
		},
		{
			"timestamps": {
				"from": "00:05:26,720",
				"to": "00:05:30,440"
			},
			"offsets": {
				"from": 326720,
				"to": 330440
			},
			"text": " you just go on your keyboard and you push on the bottom"
		},
		{
			"timestamps": {
				"from": "00:05:30,440",
				"to": "00:05:33,640"
			},
			"offsets": {
				"from": 330440,
				"to": 333640
			},
			"text": " and you see what's going to happen on your program."
		},
		{
			"timestamps": {
				"from": "00:05:33,640",
				"to": "00:05:35,760"
			},
			"offsets": {
				"from": 333640,
				"to": 335760
			},
			"text": " Again, it's well-established in traditional security."
		},
		{
			"timestamps": {
				"from": "00:05:35,760",
				"to": "00:05:36,720"
			},
			"offsets": {
				"from": 335760,
				"to": 336720
			},
			"text": " We have a lot of tools."
		},
		{
			"timestamps": {
				"from": "00:05:36,720",
				"to": "00:05:38,960"
			},
			"offsets": {
				"from": 336720,
				"to": 338960
			},
			"text": " A fairly further go further and so on."
		},
		{
			"timestamps": {
				"from": "00:05:38,960",
				"to": "00:05:43,480"
			},
			"offsets": {
				"from": 338960,
				"to": 343480
			},
			"text": " However, most of the traditional further"
		},
		{
			"timestamps": {
				"from": "00:05:43,480",
				"to": "00:05:45,800"
			},
			"offsets": {
				"from": 343480,
				"to": 345800
			},
			"text": " are going to look for memory corruption"
		},
		{
			"timestamps": {
				"from": "00:05:45,800",
				"to": "00:05:47,560"
			},
			"offsets": {
				"from": 345800,
				"to": 347560
			},
			"text": " for crash in the program."
		},
		{
			"timestamps": {
				"from": "00:05:47,560",
				"to": "00:05:51,040"
			},
			"offsets": {
				"from": 347560,
				"to": 351040
			},
			"text": " We don't have a lot of memory corruption on solidity."
		},
		{
			"timestamps": {
				"from": "00:05:51,040",
				"to": "00:05:53,000"
			},
			"offsets": {
				"from": 351040,
				"to": 353000
			},
			"text": " They are some, but they are not that common."
		},
		{
			"timestamps": {
				"from": "00:05:53,000",
				"to": "00:05:56,160"
			},
			"offsets": {
				"from": 353000,
				"to": 356160
			},
			"text": " What we are going to try to look for is"
		},
		{
			"timestamps": {
				"from": "00:05:56,160",
				"to": "00:05:58,800"
			},
			"offsets": {
				"from": 356160,
				"to": 358800
			},
			"text": " property of the system that can be broken."
		},
		{
			"timestamps": {
				"from": "00:05:58,800",
				"to": "00:06:01,800"
			},
			"offsets": {
				"from": 358800,
				"to": 361800
			},
			"text": " And this is why we call it property-based testing."
		},
		{
			"timestamps": {
				"from": "00:06:01,800",
				"to": "00:06:03,560"
			},
			"offsets": {
				"from": 361800,
				"to": 363560
			},
			"text": " Basically the way it works is that the user"
		},
		{
			"timestamps": {
				"from": "00:06:03,560",
				"to": "00:06:05,200"
			},
			"offsets": {
				"from": 363560,
				"to": 365200
			},
			"text": " is going to define invariance."
		},
		{
			"timestamps": {
				"from": "00:06:06,120",
				"to": "00:06:09,360"
			},
			"offsets": {
				"from": 366120,
				"to": 369360
			},
			"text": " The further is going to explore one domain of the program"
		},
		{
			"timestamps": {
				"from": "00:06:09,360",
				"to": "00:06:13,240"
			},
			"offsets": {
				"from": 369360,
				"to": 373240
			},
			"text": " and is going to try to see if the invariance are not."
		},
		{
			"timestamps": {
				"from": "00:06:13,240",
				"to": "00:06:17,000"
			},
			"offsets": {
				"from": 373240,
				"to": 377000
			},
			"text": " You can think of a furthering really as like unit test"
		},
		{
			"timestamps": {
				"from": "00:06:17,000",
				"to": "00:06:18,080"
			},
			"offsets": {
				"from": 377000,
				"to": 378080
			},
			"text": " on steroids."
		},
		{
			"timestamps": {
				"from": "00:06:18,080",
				"to": "00:06:21,160"
			},
			"offsets": {
				"from": 378080,
				"to": 381160
			},
			"text": " Well, with unit test you try one specific value"
		},
		{
			"timestamps": {
				"from": "00:06:21,160",
				"to": "00:06:23,920"
			},
			"offsets": {
				"from": 381160,
				"to": 383920
			},
			"text": " with the program while phasing is just going to try"
		},
		{
			"timestamps": {
				"from": "00:06:23,920",
				"to": "00:06:25,920"
			},
			"offsets": {
				"from": 383920,
				"to": 385920
			},
			"text": " one domain of a lot of different value."
		},
		{
			"timestamps": {
				"from": "00:06:25,920",
				"to": "00:06:31,120"
			},
			"offsets": {
				"from": 385920,
				"to": 391120
			},
			"text": " I've been talking a lot about invariance"
		},
		{
			"timestamps": {
				"from": "00:06:31,120",
				"to": "00:06:32,400"
			},
			"offsets": {
				"from": 391120,
				"to": 392400
			},
			"text": " or what an invariant."
		},
		{
			"timestamps": {
				"from": "00:06:32,400",
				"to": "00:06:34,600"
			},
			"offsets": {
				"from": 392400,
				"to": 394600
			},
			"text": " An invariant is something within your system"
		},
		{
			"timestamps": {
				"from": "00:06:34,600",
				"to": "00:06:36,200"
			},
			"offsets": {
				"from": 394600,
				"to": 396200
			},
			"text": " that should always be true."
		},
		{
			"timestamps": {
				"from": "00:06:36,200",
				"to": "00:06:38,800"
			},
			"offsets": {
				"from": 396200,
				"to": 398800
			},
			"text": " It's something that should never be false"
		},
		{
			"timestamps": {
				"from": "00:06:38,800",
				"to": "00:06:41,480"
			},
			"offsets": {
				"from": 398800,
				"to": 401480
			},
			"text": " or that should never be not possible to check"
		},
		{
			"timestamps": {
				"from": "00:06:41,480",
				"to": "00:06:43,080"
			},
			"offsets": {
				"from": 401480,
				"to": 403080
			},
			"text": " if it's actually a holding."
		},
		{
			"timestamps": {
				"from": "00:06:43,080",
				"to": "00:06:47,600"
			},
			"offsets": {
				"from": 403080,
				"to": 407600
			},
			"text": " So I've talked also about EKina."
		},
		{
			"timestamps": {
				"from": "00:06:47,600",
				"to": "00:06:52,440"
			},
			"offsets": {
				"from": 407600,
				"to": 412440
			},
			"text": " So EKina is our further for smart contract and so pencils."
		},
		{
			"timestamps": {
				"from": "00:06:52,440",
				"to": "00:06:55,360"
			},
			"offsets": {
				"from": 412440,
				"to": 415360
			},
			"text": " We have been using it for like for our five years"
		},
		{
			"timestamps": {
				"from": "00:06:55,360",
				"to": "00:06:57,600"
			},
			"offsets": {
				"from": 415360,
				"to": 417600
			},
			"text": " even now in all our audits."
		},
		{
			"timestamps": {
				"from": "00:06:57,600",
				"to": "00:07:01,000"
			},
			"offsets": {
				"from": 417600,
				"to": 421000
			},
			"text": " You can see a list of match your cut-base actually using"
		},
		{
			"timestamps": {
				"from": "00:07:01,000",
				"to": "00:07:03,460"
			},
			"offsets": {
				"from": 421000,
				"to": 423460
			},
			"text": " and have integrated EKina in their process."
		},
		{
			"timestamps": {
				"from": "00:07:04,400",
				"to": "00:07:07,800"
			},
			"offsets": {
				"from": 424400,
				"to": 427800
			},
			"text": " For EKina we are focusing on the ease of use."
		},
		{
			"timestamps": {
				"from": "00:07:07,800",
				"to": "00:07:12,720"
			},
			"offsets": {
				"from": 427800,
				"to": 432720
			},
			"text": " So the invariant are going to be described in solidity."
		},
		{
			"timestamps": {
				"from": "00:07:12,720",
				"to": "00:07:15,360"
			},
			"offsets": {
				"from": 432720,
				"to": 435360
			},
			"text": " We have a GitHub action similar to SITA"
		},
		{
			"timestamps": {
				"from": "00:07:15,360",
				"to": "00:07:17,840"
			},
			"offsets": {
				"from": 435360,
				"to": 437840
			},
			"text": " and we support all the compilation framework."
		},
		{
			"timestamps": {
				"from": "00:07:17,840",
				"to": "00:07:21,280"
			},
			"offsets": {
				"from": 437840,
				"to": 441280
			},
			"text": " If you use Foundry, RDOT, BORNY, TrafEL, whatever,"
		},
		{
			"timestamps": {
				"from": "00:07:21,280",
				"to": "00:07:23,600"
			},
			"offsets": {
				"from": 441280,
				"to": 443600
			},
			"text": " we are going to support it because we are using it"
		},
		{
			"timestamps": {
				"from": "00:07:23,600",
				"to": "00:07:27,200"
			},
			"offsets": {
				"from": 443600,
				"to": 447200
			},
			"text": " in every of our audit and every now and then someone comes"
		},
		{
			"timestamps": {
				"from": "00:07:27,200",
				"to": "00:07:28,680"
			},
			"offsets": {
				"from": 447200,
				"to": 448680
			},
			"text": " with a new compilation framework."
		},
		{
			"timestamps": {
				"from": "00:07:28,680",
				"to": "00:07:33,080"
			},
			"offsets": {
				"from": 448680,
				"to": 453080
			},
			"text": " Okay, I was talking about invariant."
		},
		{
			"timestamps": {
				"from": "00:07:33,080",
				"to": "00:07:34,680"
			},
			"offsets": {
				"from": 453080,
				"to": 454680
			},
			"text": " So let's say you have a token."
		},
		{
			"timestamps": {
				"from": "00:07:34,680",
				"to": "00:07:37,600"
			},
			"offsets": {
				"from": 454680,
				"to": 457600
			},
			"text": " You have an ERC20 token, it has a balance,"
		},
		{
			"timestamps": {
				"from": "00:07:37,600",
				"to": "00:07:41,320"
			},
			"offsets": {
				"from": 457600,
				"to": 461320
			},
			"text": " you can transfer a token, what would be an invariant?"
		},
		{
			"timestamps": {
				"from": "00:07:41,320",
				"to": "00:07:43,920"
			},
			"offsets": {
				"from": 461320,
				"to": 463920
			},
			"text": " An invariant could be that if you have a total supply,"
		},
		{
			"timestamps": {
				"from": "00:07:43,920",
				"to": "00:07:47,680"
			},
			"offsets": {
				"from": 463920,
				"to": 467680
			},
			"text": " no user in the system should have more token"
		},
		{
			"timestamps": {
				"from": "00:07:47,680",
				"to": "00:07:48,960"
			},
			"offsets": {
				"from": 467680,
				"to": 468960
			},
			"text": " than the total supply, right?"
		},
		{
			"timestamps": {
				"from": "00:07:48,960",
				"to": "00:07:51,360"
			},
			"offsets": {
				"from": 468960,
				"to": 471360
			},
			"text": " If you have 10 million of token,"
		},
		{
			"timestamps": {
				"from": "00:07:51,360",
				"to": "00:07:54,720"
			},
			"offsets": {
				"from": 471360,
				"to": 474720
			},
			"text": " if a user of 20 million, something is wrong."
		},
		{
			"timestamps": {
				"from": "00:07:54,720",
				"to": "00:08:00,880"
			},
			"offsets": {
				"from": 474720,
				"to": 480880
			},
			"text": " The way it works is that you're going to take the contract"
		},
		{
			"timestamps": {
				"from": "00:08:00,880",
				"to": "00:08:03,480"
			},
			"offsets": {
				"from": 480880,
				"to": 483480
			},
			"text": " in solidity, you're going to define invariant,"
		},
		{
			"timestamps": {
				"from": "00:08:03,480",
				"to": "00:08:06,560"
			},
			"offsets": {
				"from": 483480,
				"to": 486560
			},
			"text": " which are going to describe what you are trying to check."
		},
		{
			"timestamps": {
				"from": "00:08:06,560",
				"to": "00:08:08,720"
			},
			"offsets": {
				"from": 486560,
				"to": 488720
			},
			"text": " One way to do that is to create functions"
		},
		{
			"timestamps": {
				"from": "00:08:08,720",
				"to": "00:08:11,720"
			},
			"offsets": {
				"from": 488720,
				"to": 491720
			},
			"text": " that are called echin.undersc. some name."
		},
		{
			"timestamps": {
				"from": "00:08:11,720",
				"to": "00:08:13,680"
			},
			"offsets": {
				"from": 491720,
				"to": 493680
			},
			"text": " These functions should go to an ebullian."
		},
		{
			"timestamps": {
				"from": "00:08:13,680",
				"to": "00:08:15,760"
			},
			"offsets": {
				"from": 493680,
				"to": 495760
			},
			"text": " If the ebullian is true, the property old,"
		},
		{
			"timestamps": {
				"from": "00:08:15,760",
				"to": "00:08:18,480"
			},
			"offsets": {
				"from": 495760,
				"to": 498480
			},
			"text": " if the ebullian is false, the property is broken."
		},
		{
			"timestamps": {
				"from": "00:08:18,480",
				"to": "00:08:21,360"
			},
			"offsets": {
				"from": 498480,
				"to": 501360
			},
			"text": " You give both to echin now, echin is going to explore"
		},
		{
			"timestamps": {
				"from": "00:08:21,360",
				"to": "00:08:23,240"
			},
			"offsets": {
				"from": 501360,
				"to": 503240
			},
			"text": " one domain of the program and it's going to try"
		},
		{
			"timestamps": {
				"from": "00:08:23,240",
				"to": "00:08:24,400"
			},
			"offsets": {
				"from": 503240,
				"to": 504400
			},
			"text": " to see if it old."
		},
		{
			"timestamps": {
				"from": "00:08:24,400",
				"to": "00:08:30,120"
			},
			"offsets": {
				"from": 504400,
				"to": 510120
			},
			"text": " Okay, and now it's a part for you."
		},
		{
			"timestamps": {
				"from": "00:08:30,120",
				"to": "00:08:33,040"
			},
			"offsets": {
				"from": 510120,
				"to": 513040
			},
			"text": " So we're going to have a couple of theory of exercise"
		},
		{
			"timestamps": {
				"from": "00:08:33,040",
				"to": "00:08:34,760"
			},
			"offsets": {
				"from": 513040,
				"to": 514760
			},
			"text": " where you're going to try to apply echin now"
		},
		{
			"timestamps": {
				"from": "00:08:34,760",
				"to": "00:08:37,400"
			},
			"offsets": {
				"from": 514760,
				"to": 517400
			},
			"text": " and to define some invariant on the system."
		},
		{
			"timestamps": {
				"from": "00:08:37,400",
				"to": "00:08:40,120"
			},
			"offsets": {
				"from": 517400,
				"to": 520120
			},
			"text": " You can go on this repo or you can scan the clear code"
		},
		{
			"timestamps": {
				"from": "00:08:40,120",
				"to": "00:08:43,560"
			},
			"offsets": {
				"from": 520120,
				"to": 523560
			},
			"text": " for the clear repo, check out the devcon branch"
		},
		{
			"timestamps": {
				"from": "00:08:43,560",
				"to": "00:08:45,080"
			},
			"offsets": {
				"from": 523560,
				"to": 525080
			},
			"text": " and open the first exercise."
		},
		{
			"timestamps": {
				"from": "00:08:45,080",
				"to": "00:08:48,640"
			},
			"offsets": {
				"from": 525080,
				"to": 528640
			},
			"text": " If you have any problem to install echin now,"
		},
		{
			"timestamps": {
				"from": "00:08:48,640",
				"to": "00:08:50,560"
			},
			"offsets": {
				"from": 528640,
				"to": 530560
			},
			"text": " if you have any question, let us know."
		},
		{
			"timestamps": {
				"from": "00:08:57,080",
				"to": "00:09:01,440"
			},
			"offsets": {
				"from": 537080,
				"to": 541440
			},
			"text": " We also welcome everyone who is not into the exercises"
		},
		{
			"timestamps": {
				"from": "00:09:01,440",
				"to": "00:09:02,920"
			},
			"offsets": {
				"from": 541440,
				"to": 542920
			},
			"text": " just to see."
		},
		{
			"timestamps": {
				"from": "00:09:02,920",
				"to": "00:09:07,600"
			},
			"offsets": {
				"from": 542920,
				"to": 547600
			},
			"text": " Even if you already know how to do testing"
		},
		{
			"timestamps": {
				"from": "00:09:07,600",
				"to": "00:09:10,840"
			},
			"offsets": {
				"from": 547600,
				"to": 550840
			},
			"text": " or even if you use fasting every day,"
		},
		{
			"timestamps": {
				"from": "00:09:10,840",
				"to": "00:09:13,200"
			},
			"offsets": {
				"from": 550840,
				"to": 553200
			},
			"text": " it's totally fine."
		},
		{
			"timestamps": {
				"from": "00:09:13,200",
				"to": "00:09:15,680"
			},
			"offsets": {
				"from": 553200,
				"to": 555680
			},
			"text": " We will happy to take any questions,"
		},
		{
			"timestamps": {
				"from": "00:09:15,680",
				"to": "00:09:18,880"
			},
			"offsets": {
				"from": 555680,
				"to": 558880
			},
			"text": " simple or more advanced about how working works."
		},
		{
			"timestamps": {
				"from": "00:09:18,880",
				"to": "00:09:21,720"
			},
			"offsets": {
				"from": 558880,
				"to": 561720
			},
			"text": " So please feel free to do it."
		},
		{
			"timestamps": {
				"from": "00:09:23,280",
				"to": "00:09:27,560"
			},
			"offsets": {
				"from": 563280,
				"to": 567560
			},
			"text": " And we will take 15 minutes for this for the first one."
		},
		{
			"timestamps": {
				"from": "00:09:27,560",
				"to": "00:09:45,320"
			},
			"offsets": {
				"from": 567560,
				"to": 585320
			},
			"text": " - The quinam auger is using."
		},
		{
			"timestamps": {
				"from": "00:09:45,320",
				"to": "00:09:48,200"
			},
			"offsets": {
				"from": 585320,
				"to": 588200
			},
			"text": " - Okay, so the question was, what are the benefits"
		},
		{
			"timestamps": {
				"from": "00:09:48,200",
				"to": "00:09:50,000"
			},
			"offsets": {
				"from": 588200,
				"to": 590000
			},
			"text": " of using a quinam of a funder?"
		},
		{
			"timestamps": {
				"from": "00:09:51,560",
				"to": "00:09:54,320"
			},
			"offsets": {
				"from": 591560,
				"to": 594320
			},
			"text": " So first, I think a quinam as more features"
		},
		{
			"timestamps": {
				"from": "00:09:54,320",
				"to": "00:09:55,800"
			},
			"offsets": {
				"from": 594320,
				"to": 595800
			},
			"text": " on the front wheel at the moment."
		},
		{
			"timestamps": {
				"from": "00:09:55,800",
				"to": "00:09:58,360"
			},
			"offsets": {
				"from": 595800,
				"to": 598360
			},
			"text": " They were developing funder for like six months."
		},
		{
			"timestamps": {
				"from": "00:09:58,360",
				"to": "00:10:00,840"
			},
			"offsets": {
				"from": 598360,
				"to": 600840
			},
			"text": " We have been using a quinam in like four years."
		},
		{
			"timestamps": {
				"from": "00:10:00,840",
				"to": "00:10:03,600"
			},
			"offsets": {
				"from": 600840,
				"to": 603600
			},
			"text": " We support any compilation framework."
		},
		{
			"timestamps": {
				"from": "00:10:03,600",
				"to": "00:10:04,920"
			},
			"offsets": {
				"from": 603600,
				"to": 604920
			},
			"text": " So let's say you are using RDAW"
		},
		{
			"timestamps": {
				"from": "00:10:04,920",
				"to": "00:10:07,360"
			},
			"offsets": {
				"from": 604920,
				"to": 607360
			},
			"text": " because you want to do integration tests"
		},
		{
			"timestamps": {
				"from": "00:10:07,360",
				"to": "00:10:10,920"
			},
			"offsets": {
				"from": 607360,
				"to": 610920
			},
			"text": " and you need some complex setup using like TypeScript"
		},
		{
			"timestamps": {
				"from": "00:10:10,920",
				"to": "00:10:12,280"
			},
			"offsets": {
				"from": 610920,
				"to": 612280
			},
			"text": " or whatever."
		},
		{
			"timestamps": {
				"from": "00:10:12,280",
				"to": "00:10:14,480"
			},
			"offsets": {
				"from": 612280,
				"to": 614480
			},
			"text": " If you move to funder, you're going to have an issue"
		},
		{
			"timestamps": {
				"from": "00:10:14,480",
				"to": "00:10:17,840"
			},
			"offsets": {
				"from": 614480,
				"to": 617840
			},
			"text": " because it's more difficult to create this type of test."
		},
		{
			"timestamps": {
				"from": "00:10:17,840",
				"to": "00:10:20,000"
			},
			"offsets": {
				"from": 617840,
				"to": 620000
			},
			"text": " So you end up in a situation where you need to have a setup"
		},
		{
			"timestamps": {
				"from": "00:10:20,000",
				"to": "00:10:22,040"
			},
			"offsets": {
				"from": 620000,
				"to": 622040
			},
			"text": " with two different compilation framework."
		},
		{
			"timestamps": {
				"from": "00:10:22,040",
				"to": "00:10:23,440"
			},
			"offsets": {
				"from": 622040,
				"to": 623440
			},
			"text": " If you use some advanced options"
		},
		{
			"timestamps": {
				"from": "00:10:23,440",
				"to": "00:10:26,160"
			},
			"offsets": {
				"from": 623440,
				"to": 626160
			},
			"text": " then you need to have like both advanced options"
		},
		{
			"timestamps": {
				"from": "00:10:26,160",
				"to": "00:10:28,760"
			},
			"offsets": {
				"from": 626160,
				"to": 628760
			},
			"text": " in both compilation framework if they support it."
		},
		{
			"timestamps": {
				"from": "00:10:28,760",
				"to": "00:10:31,240"
			},
			"offsets": {
				"from": 628760,
				"to": 631240
			},
			"text": " And it's a lot of maintenance."
		},
		{
			"timestamps": {
				"from": "00:10:31,240",
				"to": "00:10:33,720"
			},
			"offsets": {
				"from": 631240,
				"to": 633720
			},
			"text": " Here we are like agnostic to the compilation framework"
		},
		{
			"timestamps": {
				"from": "00:10:33,720",
				"to": "00:10:34,920"
			},
			"offsets": {
				"from": 633720,
				"to": 634920
			},
			"text": " in that sense."
		},
		{
			"timestamps": {
				"from": "00:10:34,920",
				"to": "00:10:36,960"
			},
			"offsets": {
				"from": 634920,
				"to": 636960
			},
			"text": " We are going to talk about that later."
		},
		{
			"timestamps": {
				"from": "00:10:36,960",
				"to": "00:10:38,760"
			},
			"offsets": {
				"from": 636960,
				"to": 638760
			},
			"text": " We also have like a couple of advanced features"
		},
		{
			"timestamps": {
				"from": "00:10:38,760",
				"to": "00:10:40,840"
			},
			"offsets": {
				"from": 638760,
				"to": 640840
			},
			"text": " that the other folks don't have."
		},
		{
			"timestamps": {
				"from": "00:10:40,840",
				"to": "00:10:42,960"
			},
			"offsets": {
				"from": 640840,
				"to": 642960
			},
			"text": " For example, something that you can do with a quinam"
		},
		{
			"timestamps": {
				"from": "00:10:42,960",
				"to": "00:10:46,960"
			},
			"offsets": {
				"from": 642960,
				"to": 646960
			},
			"text": " is that instead of trying to find in vents that are broken,"
		},
		{
			"timestamps": {
				"from": "00:10:46,960",
				"to": "00:10:51,000"
			},
			"offsets": {
				"from": 646960,
				"to": 651000
			},
			"text": " you can look for functions that consume most of the gas."
		},
		{
			"timestamps": {
				"from": "00:10:51,000",
				"to": "00:10:53,080"
			},
			"offsets": {
				"from": 651000,
				"to": 653080
			},
			"text": " So you can list the further one"
		},
		{
			"timestamps": {
				"from": "00:10:53,080",
				"to": "00:10:54,720"
			},
			"offsets": {
				"from": 653080,
				"to": 654720
			},
			"text": " and give you a summary of, okay,"
		},
		{
			"timestamps": {
				"from": "00:10:54,720",
				"to": "00:10:57,800"
			},
			"offsets": {
				"from": 654720,
				"to": 657800
			},
			"text": " I can run this function with this parameter"
		},
		{
			"timestamps": {
				"from": "00:10:57,800",
				"to": "00:11:00,040"
			},
			"offsets": {
				"from": 657800,
				"to": 660040
			},
			"text": " and it's going to output this amount of gas."
		},
		{
			"timestamps": {
				"from": "00:11:00,040",
				"to": "00:11:02,640"
			},
			"offsets": {
				"from": 660040,
				"to": 662640
			},
			"text": " And if you are looking for this type of things,"
		},
		{
			"timestamps": {
				"from": "00:11:02,640",
				"to": "00:11:03,560"
			},
			"offsets": {
				"from": 662640,
				"to": 663560
			},
			"text": " it's very nice."
		},
		{
			"timestamps": {
				"from": "00:11:03,560",
				"to": "00:11:13,840"
			},
			"offsets": {
				"from": 663560,
				"to": 673840
			},
			"text": " - Hey there, Brock from Vander here."
		},
		{
			"timestamps": {
				"from": "00:11:13,840",
				"to": "00:11:18,840"
			},
			"offsets": {
				"from": 673840,
				"to": 678840
			},
			"text": " I'm curious how do you go about benchmarking a fuzzer?"
		},
		{
			"timestamps": {
				"from": "00:11:18,840",
				"to": "00:11:23,720"
			},
			"offsets": {
				"from": 678840,
				"to": 683720
			},
			"text": " So how do you, 'cause it's something like,"
		},
		{
			"timestamps": {
				"from": "00:11:23,720",
				"to": "00:11:25,160"
			},
			"offsets": {
				"from": 683720,
				"to": 685160
			},
			"text": " for us it's just a black box."
		},
		{
			"timestamps": {
				"from": "00:11:25,160",
				"to": "00:11:26,000"
			},
			"offsets": {
				"from": 685160,
				"to": 686000
			},
			"text": " - Yeah."
		},
		{
			"timestamps": {
				"from": "00:11:26,000",
				"to": "00:11:26,840"
			},
			"offsets": {
				"from": 686000,
				"to": 686840
			},
			"text": " - And yeah."
		},
		{
			"timestamps": {
				"from": "00:11:26,840",
				"to": "00:11:28,320"
			},
			"offsets": {
				"from": 686840,
				"to": 688320
			},
			"text": " Okay, that's a really good question."
		},
		{
			"timestamps": {
				"from": "00:11:28,320",
				"to": "00:11:31,000"
			},
			"offsets": {
				"from": 688320,
				"to": 691000
			},
			"text": " And even in like traditional fuzzing,"
		},
		{
			"timestamps": {
				"from": "00:11:31,000",
				"to": "00:11:32,800"
			},
			"offsets": {
				"from": 691000,
				"to": 692800
			},
			"text": " you know, like if you go like in the literature"
		},
		{
			"timestamps": {
				"from": "00:11:32,800",
				"to": "00:11:35,160"
			},
			"offsets": {
				"from": 692800,
				"to": 695160
			},
			"text": " of how further our benchmark,"
		},
		{
			"timestamps": {
				"from": "00:11:35,160",
				"to": "00:11:38,560"
			},
			"offsets": {
				"from": 695160,
				"to": 698560
			},
			"text": " I would say that most of the benchmark are poor overall."
		},
		{
			"timestamps": {
				"from": "00:11:38,560",
				"to": "00:11:40,840"
			},
			"offsets": {
				"from": 698560,
				"to": 700840
			},
			"text": " One of the issues that when someone does a benchmark"
		},
		{
			"timestamps": {
				"from": "00:11:40,840",
				"to": "00:11:44,880"
			},
			"offsets": {
				"from": 700840,
				"to": 704880
			},
			"text": " to benchmark their own tool is a bias, right?"
		},
		{
			"timestamps": {
				"from": "00:11:44,880",
				"to": "00:11:47,400"
			},
			"offsets": {
				"from": 704880,
				"to": 707400
			},
			"text": " So we have benchmark, we have our own benchmark"
		},
		{
			"timestamps": {
				"from": "00:11:47,400",
				"to": "00:11:49,120"
			},
			"offsets": {
				"from": 707400,
				"to": 709120
			},
			"text": " to try to see, you know, like in our past study it"
		},
		{
			"timestamps": {
				"from": "00:11:49,120",
				"to": "00:11:50,800"
			},
			"offsets": {
				"from": 709120,
				"to": 710800
			},
			"text": " and everything how it works and everything."
		},
		{
			"timestamps": {
				"from": "00:11:50,800",
				"to": "00:11:52,600"
			},
			"offsets": {
				"from": 710800,
				"to": 712600
			},
			"text": " But obviously we have a bias."
		},
		{
			"timestamps": {
				"from": "00:11:52,600",
				"to": "00:11:53,800"
			},
			"offsets": {
				"from": 712600,
				"to": 713800
			},
			"text": " Like it works well for us"
		},
		{
			"timestamps": {
				"from": "00:11:53,800",
				"to": "00:11:56,440"
			},
			"offsets": {
				"from": 713800,
				"to": 716440
			},
			"text": " because we are building the tool on our example."
		},
		{
			"timestamps": {
				"from": "00:11:56,440",
				"to": "00:11:59,360"
			},
			"offsets": {
				"from": 716440,
				"to": 719360
			},
			"text": " So I would say like the best place"
		},
		{
			"timestamps": {
				"from": "00:11:59,360",
				"to": "00:12:01,800"
			},
			"offsets": {
				"from": 719360,
				"to": 721800
			},
			"text": " to have like a good benchmark for fuzzing"
		},
		{
			"timestamps": {
				"from": "00:12:01,800",
				"to": "00:12:04,480"
			},
			"offsets": {
				"from": 721800,
				"to": 724480
			},
			"text": " should not come from two level level."
		},
		{
			"timestamps": {
				"from": "00:12:04,480",
				"to": "00:12:06,280"
			},
			"offsets": {
				"from": 724480,
				"to": 726280
			},
			"text": " That's my advice."
		},
		{
			"timestamps": {
				"from": "00:12:06,280",
				"to": "00:12:07,120"
			},
			"offsets": {
				"from": 726280,
				"to": 727120
			},
			"text": " - Yeah, yeah."
		},
		{
			"timestamps": {
				"from": "00:12:07,120",
				"to": "00:12:08,280"
			},
			"offsets": {
				"from": 727120,
				"to": 728280
			},
			"text": " It's also an open question."
		},
		{
			"timestamps": {
				"from": "00:12:08,280",
				"to": "00:12:10,400"
			},
			"offsets": {
				"from": 728280,
				"to": 730400
			},
			"text": " What is your benchmarking like?"
		},
		{
			"timestamps": {
				"from": "00:12:10,400",
				"to": "00:12:14,440"
			},
			"offsets": {
				"from": 730400,
				"to": 734440
			},
			"text": " If you're saying, well, this is faster than this sort of thing,"
		},
		{
			"timestamps": {
				"from": "00:12:14,440",
				"to": "00:12:17,400"
			},
			"offsets": {
				"from": 734440,
				"to": 737400
			},
			"text": " but it could be executing just always the same thing."
		},
		{
			"timestamps": {
				"from": "00:12:17,400",
				"to": "00:12:19,840"
			},
			"offsets": {
				"from": 737400,
				"to": 739840
			},
			"text": " Like, you know, calling a constant function over and over again"
		},
		{
			"timestamps": {
				"from": "00:12:19,840",
				"to": "00:12:24,760"
			},
			"offsets": {
				"from": 739840,
				"to": 744760
			},
			"text": " is going to be faster than calling some deep part in the call."
		},
		{
			"timestamps": {
				"from": "00:12:24,760",
				"to": "00:12:26,720"
			},
			"offsets": {
				"from": 744760,
				"to": 746720
			},
			"text": " On top of that, you have like bugs."
		},
		{
			"timestamps": {
				"from": "00:12:26,720",
				"to": "00:12:28,680"
			},
			"offsets": {
				"from": 746720,
				"to": 748680
			},
			"text": " What about like finding bugs?"
		},
		{
			"timestamps": {
				"from": "00:12:28,680",
				"to": "00:12:30,520"
			},
			"offsets": {
				"from": 748680,
				"to": 750520
			},
			"text": " How much bugs do you find?"
		},
		{
			"timestamps": {
				"from": "00:12:30,520",
				"to": "00:12:33,760"
			},
			"offsets": {
				"from": 750520,
				"to": 753760
			},
			"text": " And there is, there are a couple of academic papers saying"
		},
		{
			"timestamps": {
				"from": "00:12:33,760",
				"to": "00:12:37,880"
			},
			"offsets": {
				"from": 753760,
				"to": 757880
			},
			"text": " that some people like to compare this,"
		},
		{
			"timestamps": {
				"from": "00:12:37,880",
				"to": "00:12:42,240"
			},
			"offsets": {
				"from": 757880,
				"to": 762240
			},
			"text": " but you have like a plot saying how many bugs you found."
		},
		{
			"timestamps": {
				"from": "00:12:42,240",
				"to": "00:12:44,960"
			},
			"offsets": {
				"from": 762240,
				"to": 764960
			},
			"text": " And let's say that one faster is better than the other,"
		},
		{
			"timestamps": {
				"from": "00:12:44,960",
				"to": "00:12:47,280"
			},
			"offsets": {
				"from": 764960,
				"to": 767280
			},
			"text": " but you don't know if the next hour"
		},
		{
			"timestamps": {
				"from": "00:12:47,280",
				"to": "00:12:50,040"
			},
			"offsets": {
				"from": 767280,
				"to": 770040
			},
			"text": " you will have a peak saying,"
		},
		{
			"timestamps": {
				"from": "00:12:50,040",
				"to": "00:12:52,160"
			},
			"offsets": {
				"from": 770040,
				"to": 772160
			},
			"text": " well, these found a lot of things."
		},
		{
			"timestamps": {
				"from": "00:12:52,160",
				"to": "00:12:54,000"
			},
			"offsets": {
				"from": 772160,
				"to": 774000
			},
			"text": " So there are other things that you can do."
		},
		{
			"timestamps": {
				"from": "00:12:54,000",
				"to": "00:12:55,320"
			},
			"offsets": {
				"from": 774000,
				"to": 775320
			},
			"text": " You can use coverage,"
		},
		{
			"timestamps": {
				"from": "00:12:55,320",
				"to": "00:12:58,400"
			},
			"offsets": {
				"from": 775320,
				"to": 778400
			},
			"text": " but also coverage is not going to give you like,"
		},
		{
			"timestamps": {
				"from": "00:12:58,400",
				"to": "00:13:02,120"
			},
			"offsets": {
				"from": 778400,
				"to": 782120
			},
			"text": " it's not going to be the ultimate answer."
		},
		{
			"timestamps": {
				"from": "00:13:02,120",
				"to": "00:13:04,760"
			},
			"offsets": {
				"from": 782120,
				"to": 784760
			},
			"text": " So it's still a debate"
		},
		{
			"timestamps": {
				"from": "00:13:04,760",
				"to": "00:13:08,080"
			},
			"offsets": {
				"from": 784760,
				"to": 788080
			},
			"text": " how long you should run a faster for a benchmark"
		},
		{
			"timestamps": {
				"from": "00:13:08,080",
				"to": "00:13:11,040"
			},
			"offsets": {
				"from": 788080,
				"to": 791040
			},
			"text": " or even for testing something."
		},
		{
			"timestamps": {
				"from": "00:13:11,040",
				"to": "00:13:17,120"
			},
			"offsets": {
				"from": 791040,
				"to": 797120
			},
			"text": " It's also a debate what we should use for benchmarking."
		},
		{
			"timestamps": {
				"from": "00:13:17,120",
				"to": "00:13:21,160"
			},
			"offsets": {
				"from": 797120,
				"to": 801160
			},
			"text": " Should we use like complex DeFi applications?"
		},
		{
			"timestamps": {
				"from": "00:13:21,160",
				"to": "00:13:23,040"
			},
			"offsets": {
				"from": 801160,
				"to": 803040
			},
			"text": " Like, but how many of them we have?"
		},
		{
			"timestamps": {
				"from": "00:13:23,040",
				"to": "00:13:24,760"
			},
			"offsets": {
				"from": 803040,
				"to": 804760
			},
			"text": " Like 10 or 20?"
		},
		{
			"timestamps": {
				"from": "00:13:24,760",
				"to": "00:13:27,440"
			},
			"offsets": {
				"from": 804760,
				"to": 807440
			},
			"text": " We don't have thousands of different DeFi."
		},
		{
			"timestamps": {
				"from": "00:13:27,440",
				"to": "00:13:30,800"
			},
			"offsets": {
				"from": 807440,
				"to": 810800
			},
			"text": " So it's, we definitely are interested"
		},
		{
			"timestamps": {
				"from": "00:13:30,800",
				"to": "00:13:35,240"
			},
			"offsets": {
				"from": 810800,
				"to": 815240
			},
			"text": " in a deeper discussion on how to have a good benchmark set"
		},
		{
			"timestamps": {
				"from": "00:13:35,240",
				"to": "00:13:36,360"
			},
			"offsets": {
				"from": 815240,
				"to": 816360
			},
			"text": " for, for today."
		},
		{
			"timestamps": {
				"from": "00:13:36,360",
				"to": "00:13:38,440"
			},
			"offsets": {
				"from": 816360,
				"to": 818440
			},
			"text": " - And we have the same problem, for example, with Hita,"
		},
		{
			"timestamps": {
				"from": "00:13:38,440",
				"to": "00:13:41,240"
			},
			"offsets": {
				"from": 818440,
				"to": 821240
			},
			"text": " where how do we benchmark or static analyzer"
		},
		{
			"timestamps": {
				"from": "00:13:41,240",
				"to": "00:13:42,880"
			},
			"offsets": {
				"from": 821240,
				"to": 822880
			},
			"text": " provide good results?"
		},
		{
			"timestamps": {
				"from": "00:13:42,880",
				"to": "00:13:43,840"
			},
			"offsets": {
				"from": 822880,
				"to": 823840
			},
			"text": " And it's tough."
		},
		{
			"timestamps": {
				"from": "00:13:43,840",
				"to": "00:13:47,560"
			},
			"offsets": {
				"from": 823840,
				"to": 827560
			},
			"text": " We usually tend to have a practical approach."
		},
		{
			"timestamps": {
				"from": "00:13:47,560",
				"to": "00:13:50,760"
			},
			"offsets": {
				"from": 827560,
				"to": 830760
			},
			"text": " In the sense that if the tool provide value during our audit,"
		},
		{
			"timestamps": {
				"from": "00:13:50,760",
				"to": "00:13:54,840"
			},
			"offsets": {
				"from": 830760,
				"to": 834840
			},
			"text": " if it helps us to find bugs and make us faster,"
		},
		{
			"timestamps": {
				"from": "00:13:54,840",
				"to": "00:13:58,280"
			},
			"offsets": {
				"from": 834840,
				"to": 838280
			},
			"text": " that's good enough for us."
		},
		{
			"timestamps": {
				"from": "00:13:58,280",
				"to": "00:13:59,120"
			},
			"offsets": {
				"from": 838280,
				"to": 839120
			},
			"text": " - Yeah."
		},
		{
			"timestamps": {
				"from": "00:13:59,120",
				"to": "00:14:01,440"
			},
			"offsets": {
				"from": 839120,
				"to": 841440
			},
			"text": " - At the end of the day also depends on the invariance."
		},
		{
			"timestamps": {
				"from": "00:14:01,440",
				"to": "00:14:03,960"
			},
			"offsets": {
				"from": 841440,
				"to": 843960
			},
			"text": " If the, if the developers don't know"
		},
		{
			"timestamps": {
				"from": "00:14:03,960",
				"to": "00:14:05,480"
			},
			"offsets": {
				"from": 843960,
				"to": 845480
			},
			"text": " how to write good invariance,"
		},
		{
			"timestamps": {
				"from": "00:14:05,480",
				"to": "00:14:09,480"
			},
			"offsets": {
				"from": 845480,
				"to": 849480
			},
			"text": " then no tool is going to provide some magic value."
		},
		{
			"timestamps": {
				"from": "00:14:09,480",
				"to": "00:14:11,200"
			},
			"offsets": {
				"from": 849480,
				"to": 851200
			},
			"text": " So it's, it's tough."
		},
		{
			"timestamps": {
				"from": "00:14:11,200",
				"to": "00:14:14,920"
			},
			"offsets": {
				"from": 851200,
				"to": 854920
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:14:14,920",
				"to": "00:14:15,760"
			},
			"offsets": {
				"from": 854920,
				"to": 855760
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:14:15,760",
				"to": "00:14:17,520"
			},
			"offsets": {
				"from": 855760,
				"to": 857520
			},
			"text": " I'm happy to discuss with, with the Foundry team"
		},
		{
			"timestamps": {
				"from": "00:14:17,520",
				"to": "00:14:19,400"
			},
			"offsets": {
				"from": 857520,
				"to": 859400
			},
			"text": " or any other team doing, doing fasting."
		},
		{
			"timestamps": {
				"from": "00:14:19,400",
				"to": "00:14:21,480"
			},
			"offsets": {
				"from": 859400,
				"to": 861480
			},
			"text": " We will, we'll be here today."
		},
		{
			"timestamps": {
				"from": "00:14:21,480",
				"to": "00:14:23,640"
			},
			"offsets": {
				"from": 861480,
				"to": 863640
			},
			"text": " So please let us know."
		},
		{
			"timestamps": {
				"from": "00:14:23,640",
				"to": "00:14:24,480"
			},
			"offsets": {
				"from": 863640,
				"to": 864480
			},
			"text": " - Okay."
		},
		{
			"timestamps": {
				"from": "00:14:24,480",
				"to": "00:14:27,720"
			},
			"offsets": {
				"from": 864480,
				"to": 867720
			},
			"text": " My other question is regarding like the tool"
		},
		{
			"timestamps": {
				"from": "00:14:27,720",
				"to": "00:14:29,560"
			},
			"offsets": {
				"from": 867720,
				"to": 869560
			},
			"text": " is only for pausing or it's support"
		},
		{
			"timestamps": {
				"from": "00:14:29,560",
				"to": "00:14:32,640"
			},
			"offsets": {
				"from": 869560,
				"to": 872640
			},
			"text": " like symbolic execution or something like that."
		},
		{
			"timestamps": {
				"from": "00:14:32,640",
				"to": "00:14:34,760"
			},
			"offsets": {
				"from": 872640,
				"to": 874760
			},
			"text": " - So yeah, you want to."
		},
		{
			"timestamps": {
				"from": "00:14:34,760",
				"to": "00:14:36,080"
			},
			"offsets": {
				"from": 874760,
				"to": 876080
			},
			"text": " - Yeah, it's only for pausing."
		},
		{
			"timestamps": {
				"from": "00:14:36,080",
				"to": "00:14:38,400"
			},
			"offsets": {
				"from": 876080,
				"to": 878400
			},
			"text": " We have another tool for symbolic execution,"
		},
		{
			"timestamps": {
				"from": "00:14:38,400",
				"to": "00:14:40,360"
			},
			"offsets": {
				"from": 878400,
				"to": 880360
			},
			"text": " which is called Manthika."
		},
		{
			"timestamps": {
				"from": "00:14:40,360",
				"to": "00:14:42,120"
			},
			"offsets": {
				"from": 880360,
				"to": 882120
			},
			"text": " However, and something actually"
		},
		{
			"timestamps": {
				"from": "00:14:42,120",
				"to": "00:14:44,360"
			},
			"offsets": {
				"from": 882120,
				"to": 884360
			},
			"text": " we're going to discuss later."
		},
		{
			"timestamps": {
				"from": "00:14:44,360",
				"to": "00:14:49,360"
			},
			"offsets": {
				"from": 884360,
				"to": 889360
			},
			"text": " I think in practice, any formal base method approach"
		},
		{
			"timestamps": {
				"from": "00:14:49,360",
				"to": "00:14:53,920"
			},
			"offsets": {
				"from": 889360,
				"to": 893920
			},
			"text": " is going to have a lower return on investment at further."
		},
		{
			"timestamps": {
				"from": "00:14:53,920",
				"to": "00:14:56,440"
			},
			"offsets": {
				"from": 893920,
				"to": 896440
			},
			"text": " If you have two weeks, three weeks to work on a project,"
		},
		{
			"timestamps": {
				"from": "00:14:56,440",
				"to": "00:14:58,480"
			},
			"offsets": {
				"from": 896440,
				"to": 898480
			},
			"text": " you know, and you want to invest some worth source"
		},
		{
			"timestamps": {
				"from": "00:14:58,480",
				"to": "00:15:01,160"
			},
			"offsets": {
				"from": 898480,
				"to": 901160
			},
			"text": " to increase your confidence in the project,"
		},
		{
			"timestamps": {
				"from": "00:15:01,160",
				"to": "00:15:02,680"
			},
			"offsets": {
				"from": 901160,
				"to": 902680
			},
			"text": " pausing is the best solution."
		},
		{
			"timestamps": {
				"from": "00:15:02,680",
				"to": "00:15:03,520"
			},
			"offsets": {
				"from": 902680,
				"to": 903520
			},
			"text": " - Yes."
		},
		{
			"timestamps": {
				"from": "00:15:03,520",
				"to": "00:15:07,800"
			},
			"offsets": {
				"from": 903520,
				"to": 907800
			},
			"text": " And also we found that, so a kid needs a tool that works"
		},
		{
			"timestamps": {
				"from": "00:15:07,800",
				"to": "00:15:11,320"
			},
			"offsets": {
				"from": 907800,
				"to": 911320
			},
			"text": " with our static analysis leader that gets value."
		},
		{
			"timestamps": {
				"from": "00:15:11,320",
				"to": "00:15:13,520"
			},
			"offsets": {
				"from": 911320,
				"to": 913520
			},
			"text": " So you have in some cases, like,"
		},
		{
			"timestamps": {
				"from": "00:15:13,520",
				"to": "00:15:15,160"
			},
			"offsets": {
				"from": 913520,
				"to": 915160
			},
			"text": " let's say that you have a test that says,"
		},
		{
			"timestamps": {
				"from": "00:15:15,160",
				"to": "00:15:18,280"
			},
			"offsets": {
				"from": 915160,
				"to": 918280
			},
			"text": " if X equal to some value,"
		},
		{
			"timestamps": {
				"from": "00:15:18,280",
				"to": "00:15:22,840"
			},
			"offsets": {
				"from": 918280,
				"to": 922840
			},
			"text": " some traditional, faster techniques have hard time"
		},
		{
			"timestamps": {
				"from": "00:15:22,840",
				"to": "00:15:24,080"
			},
			"offsets": {
				"from": 922840,
				"to": 924080
			},
			"text": " to deal with this."
		},
		{
			"timestamps": {
				"from": "00:15:24,080",
				"to": "00:15:26,560"
			},
			"offsets": {
				"from": 924080,
				"to": 926560
			},
			"text": " But what we do is concept mining,"
		},
		{
			"timestamps": {
				"from": "00:15:26,560",
				"to": "00:15:28,640"
			},
			"offsets": {
				"from": 926560,
				"to": 928640
			},
			"text": " so we scan all your code,"
		},
		{
			"timestamps": {
				"from": "00:15:28,640",
				"to": "00:15:30,400"
			},
			"offsets": {
				"from": 928640,
				"to": 930400
			},
			"text": " look for these magic values,"
		},
		{
			"timestamps": {
				"from": "00:15:30,400",
				"to": "00:15:32,000"
			},
			"offsets": {
				"from": 930400,
				"to": 932000
			},
			"text": " and we will play these magic values"
		},
		{
			"timestamps": {
				"from": "00:15:32,000",
				"to": "00:15:34,920"
			},
			"offsets": {
				"from": 932000,
				"to": 934920
			},
			"text": " and some mutation of that from time to time."
		},
		{
			"timestamps": {
				"from": "00:15:34,920",
				"to": "00:15:38,760"
			},
			"offsets": {
				"from": 934920,
				"to": 938760
			},
			"text": " So, or faster, should be able to get inside this."
		},
		{
			"timestamps": {
				"from": "00:15:38,760",
				"to": "00:15:43,760"
			},
			"offsets": {
				"from": 938760,
				"to": 943760
			},
			"text": " If you have a test case that is not working,"
		},
		{
			"timestamps": {
				"from": "00:15:43,760",
				"to": "00:15:47,040"
			},
			"offsets": {
				"from": 943760,
				"to": 947040
			},
			"text": " please let us know and we can try to see it."
		},
		{
			"timestamps": {
				"from": "00:15:47,040",
				"to": "00:15:52,040"
			},
			"offsets": {
				"from": 947040,
				"to": 952040
			},
			"text": " But in practice, it seems like some of the typical use cases"
		},
		{
			"timestamps": {
				"from": "00:15:52,200",
				"to": "00:15:57,200"
			},
			"offsets": {
				"from": 952200,
				"to": 957200
			},
			"text": " for symbolic execution in which you have constant magic values"
		},
		{
			"timestamps": {
				"from": "00:15:57,200",
				"to": "00:16:02,200"
			},
			"offsets": {
				"from": 957200,
				"to": 962200
			},
			"text": " to look for, they can be replaced by constant mining extraction."
		},
		{
			"timestamps": {
				"from": "00:16:02,200",
				"to": "00:16:16,000"
			},
			"offsets": {
				"from": 962200,
				"to": 976000
			},
			"text": " - How many of you have issued when static key now"
		},
		{
			"timestamps": {
				"from": "00:16:16,000",
				"to": "00:16:17,600"
			},
			"offsets": {
				"from": 976000,
				"to": 977600
			},
			"text": " to one like the exercise?"
		},
		{
			"timestamps": {
				"from": "00:16:17,600",
				"to": "00:16:19,840"
			},
			"offsets": {
				"from": 977600,
				"to": 979840
			},
			"text": " (mumbles)"
		},
		{
			"timestamps": {
				"from": "00:16:19,840",
				"to": "00:16:27,320"
			},
			"offsets": {
				"from": 979840,
				"to": 987320
			},
			"text": " How many of you have issued like in static key now"
		},
		{
			"timestamps": {
				"from": "00:16:27,320",
				"to": "00:16:29,520"
			},
			"offsets": {
				"from": 987320,
				"to": 989520
			},
			"text": " or opening like the different exercise?"
		},
		{
			"timestamps": {
				"from": "00:16:29,520",
				"to": "00:16:33,000"
			},
			"offsets": {
				"from": 989520,
				"to": 993000
			},
			"text": " - Okay."
		},
		{
			"timestamps": {
				"from": "00:16:33,000",
				"to": "00:16:40,760"
			},
			"offsets": {
				"from": 993000,
				"to": 1000760
			},
			"text": " - No, you have to open your terminal"
		},
		{
			"timestamps": {
				"from": "00:16:40,760",
				"to": "00:16:44,760"
			},
			"offsets": {
				"from": 1000760,
				"to": 1004760
			},
			"text": " and a kid now will deploy the,"
		},
		{
			"timestamps": {
				"from": "00:16:44,760",
				"to": "00:16:47,360"
			},
			"offsets": {
				"from": 1004760,
				"to": 1007360
			},
			"text": " so you need to install the tool"
		},
		{
			"timestamps": {
				"from": "00:16:47,360",
				"to": "00:16:49,720"
			},
			"offsets": {
				"from": 1007360,
				"to": 1009720
			},
			"text": " and when you put like a kid now,"
		},
		{
			"timestamps": {
				"from": "00:16:49,720",
				"to": "00:16:52,000"
			},
			"offsets": {
				"from": 1009720,
				"to": 1012000
			},
			"text": " you can not test some contract,"
		},
		{
			"timestamps": {
				"from": "00:16:52,000",
				"to": "00:16:56,280"
			},
			"offsets": {
				"from": 1012000,
				"to": 1016280
			},
			"text": " you will compile it running inside the simulated blockchain"
		},
		{
			"timestamps": {
				"from": "00:16:56,280",
				"to": "00:16:57,120"
			},
			"offsets": {
				"from": 1016280,
				"to": 1017120
			},
			"text": " and give you the answer."
		},
		{
			"timestamps": {
				"from": "00:16:57,120",
				"to": "00:16:59,280"
			},
			"offsets": {
				"from": 1017120,
				"to": 1019280
			},
			"text": " So you don't need to connect into something."
		},
		{
			"timestamps": {
				"from": "00:16:59,280",
				"to": "00:17:08,800"
			},
			"offsets": {
				"from": 1019280,
				"to": 1028800
			},
			"text": " So yeah, going into the repository and it says like,"
		},
		{
			"timestamps": {
				"from": "00:17:08,800",
				"to": "00:17:12,760"
			},
			"offsets": {
				"from": 1028800,
				"to": 1032760
			},
			"text": " so this is like the original one,"
		},
		{
			"timestamps": {
				"from": "00:17:12,760",
				"to": "00:17:16,800"
			},
			"offsets": {
				"from": 1032760,
				"to": 1036800
			},
			"text": " but if you go into the depth con branch,"
		},
		{
			"timestamps": {
				"from": "00:17:16,800",
				"to": "00:17:19,200"
			},
			"offsets": {
				"from": 1036800,
				"to": 1039200
			},
			"text": " that is one, sorry."
		},
		{
			"timestamps": {
				"from": "00:17:19,200",
				"to": "00:17:22,720"
			},
			"offsets": {
				"from": 1039200,
				"to": 1042720
			},
			"text": " So it has more specific, yeah."
		},
		{
			"timestamps": {
				"from": "00:17:22,720",
				"to": "00:17:25,040"
			},
			"offsets": {
				"from": 1042720,
				"to": 1045040
			},
			"text": " So over there you said like if you are using magic,"
		},
		{
			"timestamps": {
				"from": "00:17:25,040",
				"to": "00:17:27,200"
			},
			"offsets": {
				"from": 1045040,
				"to": 1047200
			},
			"text": " you can do that or you can download."
		},
		{
			"timestamps": {
				"from": "00:17:27,200",
				"to": "00:17:29,760"
			},
			"offsets": {
				"from": 1047200,
				"to": 1049760
			},
			"text": " Okay, yeah."
		},
		{
			"timestamps": {
				"from": "00:17:29,760",
				"to": "00:17:33,480"
			},
			"offsets": {
				"from": 1049760,
				"to": 1053480
			},
			"text": " Okay, yeah, so wanted to highlight one feature"
		},
		{
			"timestamps": {
				"from": "00:17:33,480",
				"to": "00:17:37,680"
			},
			"offsets": {
				"from": 1053480,
				"to": 1057680
			},
			"text": " that we are testing on a kid now that is also using FASIN,"
		},
		{
			"timestamps": {
				"from": "00:17:37,680",
				"to": "00:17:40,720"
			},
			"offsets": {
				"from": 1057680,
				"to": 1060720
			},
			"text": " but instead of testing a property,"
		},
		{
			"timestamps": {
				"from": "00:17:40,720",
				"to": "00:17:45,000"
			},
			"offsets": {
				"from": 1060720,
				"to": 1065000
			},
			"text": " we're doing minimization or maximization of some value."
		},
		{
			"timestamps": {
				"from": "00:17:45,000",
				"to": "00:17:49,160"
			},
			"offsets": {
				"from": 1065000,
				"to": 1069160
			},
			"text": " So this is a new thing that we are testing."
		},
		{
			"timestamps": {
				"from": "00:17:49,160",
				"to": "00:17:51,800"
			},
			"offsets": {
				"from": 1069160,
				"to": 1071800
			},
			"text": " It is not properly based testing,"
		},
		{
			"timestamps": {
				"from": "00:17:51,800",
				"to": "00:17:55,400"
			},
			"offsets": {
				"from": 1071800,
				"to": 1075400
			},
			"text": " but it's something that we are trying to push."
		},
		{
			"timestamps": {
				"from": "00:17:55,400",
				"to": "00:17:59,720"
			},
			"offsets": {
				"from": 1075400,
				"to": 1079720
			},
			"text": " So if you want to know if a user is capable"
		},
		{
			"timestamps": {
				"from": "00:17:59,720",
				"to": "00:18:03,760"
			},
			"offsets": {
				"from": 1079720,
				"to": 1083760
			},
			"text": " of extracting tokens from your system"
		},
		{
			"timestamps": {
				"from": "00:18:03,760",
				"to": "00:18:06,560"
			},
			"offsets": {
				"from": 1083760,
				"to": 1086560
			},
			"text": " without you to realize, you can use that feature."
		},
		{
			"timestamps": {
				"from": "00:18:06,560",
				"to": "00:18:08,480"
			},
			"offsets": {
				"from": 1086560,
				"to": 1088480
			},
			"text": " Just saying, hey, kid now,"
		},
		{
			"timestamps": {
				"from": "00:18:08,480",
				"to": "00:18:10,800"
			},
			"offsets": {
				"from": 1088480,
				"to": 1090800
			},
			"text": " can you maximize this balance of this account?"
		},
		{
			"timestamps": {
				"from": "00:18:10,800",
				"to": "00:18:15,080"
			},
			"offsets": {
				"from": 1090800,
				"to": 1095080
			},
			"text": " So it will try to generate you the maximum sequence."
		},
		{
			"timestamps": {
				"from": "00:18:15,080",
				"to": "00:18:17,280"
			},
			"offsets": {
				"from": 1095080,
				"to": 1097280
			},
			"text": " So it's all bit outside this,"
		},
		{
			"timestamps": {
				"from": "00:18:17,280",
				"to": "00:18:20,360"
			},
			"offsets": {
				"from": 1097280,
				"to": 1100360
			},
			"text": " but it's something that we wanted to mention."
		},
		{
			"timestamps": {
				"from": "00:18:20,360",
				"to": "00:18:28,120"
			},
			"offsets": {
				"from": 1100360,
				"to": 1108120
			},
			"text": " Okay, so our target here is a token."
		},
		{
			"timestamps": {
				"from": "00:18:28,120",
				"to": "00:18:31,760"
			},
			"offsets": {
				"from": 1108120,
				"to": 1111760
			},
			"text": " It has a transfer function,"
		},
		{
			"timestamps": {
				"from": "00:18:31,760",
				"to": "00:18:33,760"
			},
			"offsets": {
				"from": 1111760,
				"to": 1113760
			},
			"text": " like a classic transfer function,"
		},
		{
			"timestamps": {
				"from": "00:18:33,760",
				"to": "00:18:36,360"
			},
			"offsets": {
				"from": 1113760,
				"to": 1116360
			},
			"text": " in any way from a possible contract,"
		},
		{
			"timestamps": {
				"from": "00:18:36,360",
				"to": "00:18:38,960"
			},
			"offsets": {
				"from": 1116360,
				"to": 1118960
			},
			"text": " which is like a basic possible system."
		},
		{
			"timestamps": {
				"from": "00:18:38,960",
				"to": "00:18:43,280"
			},
			"offsets": {
				"from": 1118960,
				"to": 1123280
			},
			"text": " And what we want to try to do here"
		},
		{
			"timestamps": {
				"from": "00:18:43,280",
				"to": "00:18:44,960"
			},
			"offsets": {
				"from": 1123280,
				"to": 1124960
			},
			"text": " is to create the invariance,"
		},
		{
			"timestamps": {
				"from": "00:18:44,960",
				"to": "00:18:47,920"
			},
			"offsets": {
				"from": 1124960,
				"to": 1127920
			},
			"text": " such as no user should have a balance"
		},
		{
			"timestamps": {
				"from": "00:18:47,920",
				"to": "00:18:50,200"
			},
			"offsets": {
				"from": 1127920,
				"to": 1130200
			},
			"text": " above the total supply."
		},
		{
			"timestamps": {
				"from": "00:18:50,200",
				"to": "00:18:52,560"
			},
			"offsets": {
				"from": 1130200,
				"to": 1132560
			},
			"text": " To test the tokens, the way we are going to do it"
		},
		{
			"timestamps": {
				"from": "00:18:52,560",
				"to": "00:18:56,080"
			},
			"offsets": {
				"from": 1132560,
				"to": 1136080
			},
			"text": " is actually we are going to inherit the token or target."
		},
		{
			"timestamps": {
				"from": "00:18:56,080",
				"to": "00:18:58,800"
			},
			"offsets": {
				"from": 1136080,
				"to": 1138800
			},
			"text": " We are going to create the contract test token."
		},
		{
			"timestamps": {
				"from": "00:18:58,800",
				"to": "00:19:01,880"
			},
			"offsets": {
				"from": 1138800,
				"to": 1141880
			},
			"text": " We are going to initialize the balance of the color,"
		},
		{
			"timestamps": {
				"from": "00:19:01,880",
				"to": "00:19:06,040"
			},
			"offsets": {
				"from": 1141880,
				"to": 1146040
			},
			"text": " so of the first user to 10,000."
		},
		{
			"timestamps": {
				"from": "00:19:06,040",
				"to": "00:19:07,640"
			},
			"offsets": {
				"from": 1146040,
				"to": 1147640
			},
			"text": " And this is initialization."
		},
		{
			"timestamps": {
				"from": "00:19:07,640",
				"to": "00:19:09,200"
			},
			"offsets": {
				"from": 1147640,
				"to": 1149200
			},
			"text": " So you are creating a token,"
		},
		{
			"timestamps": {
				"from": "00:19:09,200",
				"to": "00:19:12,080"
			},
			"offsets": {
				"from": 1149200,
				"to": 1152080
			},
			"text": " there is 10,000 in one address."
		},
		{
			"timestamps": {
				"from": "00:19:12,080",
				"to": "00:19:17,080"
			},
			"offsets": {
				"from": 1152080,
				"to": 1157080
			},
			"text": " And now the invariant is simply that no user,"
		},
		{
			"timestamps": {
				"from": "00:19:17,080",
				"to": "00:19:20,280"
			},
			"offsets": {
				"from": 1157080,
				"to": 1160280
			},
			"text": " so the user, a kid, a color should not have"
		},
		{
			"timestamps": {
				"from": "00:19:20,280",
				"to": "00:19:21,960"
			},
			"offsets": {
				"from": 1160280,
				"to": 1161960
			},
			"text": " more than 10,000 token."
		},
		{
			"timestamps": {
				"from": "00:19:21,960",
				"to": "00:19:26,240"
			},
			"offsets": {
				"from": 1161960,
				"to": 1166240
			},
			"text": " Again, you deploy a token, 10,000 token to one user,"
		},
		{
			"timestamps": {
				"from": "00:19:26,240",
				"to": "00:19:29,640"
			},
			"offsets": {
				"from": 1166240,
				"to": 1169640
			},
			"text": " this user should never have like 20,000 token."
		},
		{
			"timestamps": {
				"from": "00:19:30,400",
				"to": "00:19:34,280"
			},
			"offsets": {
				"from": 1170400,
				"to": 1174280
			},
			"text": " And if you want this with a keynote,"
		},
		{
			"timestamps": {
				"from": "00:19:34,280",
				"to": "00:19:36,000"
			},
			"offsets": {
				"from": 1174280,
				"to": 1176000
			},
			"text": " a keynote is going to tell you"
		},
		{
			"timestamps": {
				"from": "00:19:36,000",
				"to": "00:19:38,520"
			},
			"offsets": {
				"from": 1176000,
				"to": 1178520
			},
			"text": " that this invariant, this property,"
		},
		{
			"timestamps": {
				"from": "00:19:38,520",
				"to": "00:19:41,800"
			},
			"offsets": {
				"from": 1178520,
				"to": 1181800
			},
			"text": " on total supply was broken, it failed."
		},
		{
			"timestamps": {
				"from": "00:19:41,800",
				"to": "00:19:43,480"
			},
			"offsets": {
				"from": 1181800,
				"to": 1183480
			},
			"text": " And it's going to tell you how."
		},
		{
			"timestamps": {
				"from": "00:19:43,480",
				"to": "00:19:47,040"
			},
			"offsets": {
				"from": 1183480,
				"to": 1187040
			},
			"text": " And the answer is that it just called"
		},
		{
			"timestamps": {
				"from": "00:19:47,040",
				"to": "00:19:50,840"
			},
			"offsets": {
				"from": 1187040,
				"to": 1190840
			},
			"text": " the function transfer with a destination address zero"
		},
		{
			"timestamps": {
				"from": "00:19:50,840",
				"to": "00:19:54,480"
			},
			"offsets": {
				"from": 1190840,
				"to": 1194480
			},
			"text": " and 10,093 token."
		},
		{
			"timestamps": {
				"from": "00:19:54,480",
				"to": "00:19:55,720"
			},
			"offsets": {
				"from": 1194480,
				"to": 1195720
			},
			"text": " So what happened here?"
		},
		{
			"timestamps": {
				"from": "00:19:57,480",
				"to": "00:19:59,800"
			},
			"offsets": {
				"from": 1197480,
				"to": 1199800
			},
			"text": " This was compiled with solidity zero.7,"
		},
		{
			"timestamps": {
				"from": "00:19:59,800",
				"to": "00:20:02,960"
			},
			"offsets": {
				"from": 1199800,
				"to": 1202960
			},
			"text": " so there is no overflow and underflow protection."
		},
		{
			"timestamps": {
				"from": "00:20:02,960",
				"to": "00:20:04,600"
			},
			"offsets": {
				"from": 1202960,
				"to": 1204600
			},
			"text": " So there is an underflow problem here"
		},
		{
			"timestamps": {
				"from": "00:20:04,600",
				"to": "00:20:07,760"
			},
			"offsets": {
				"from": 1204600,
				"to": 1207760
			},
			"text": " where if you try to send more tokens"
		},
		{
			"timestamps": {
				"from": "00:20:07,760",
				"to": "00:20:09,360"
			},
			"offsets": {
				"from": 1207760,
				"to": 1209360
			},
			"text": " that you have a new balance,"
		},
		{
			"timestamps": {
				"from": "00:20:09,360",
				"to": "00:20:10,760"
			},
			"offsets": {
				"from": 1209360,
				"to": 1210760
			},
			"text": " the balance is going to underflow"
		},
		{
			"timestamps": {
				"from": "00:20:10,760",
				"to": "00:20:14,640"
			},
			"offsets": {
				"from": 1210760,
				"to": 1214640
			},
			"text": " and you have a real large balance."
		},
		{
			"timestamps": {
				"from": "00:20:14,640",
				"to": "00:20:16,640"
			},
			"offsets": {
				"from": 1214640,
				"to": 1216640
			},
			"text": " Something which is interesting here"
		},
		{
			"timestamps": {
				"from": "00:20:16,640",
				"to": "00:20:20,200"
			},
			"offsets": {
				"from": 1216640,
				"to": 1220200
			},
			"text": " is that we define the invariants, you know,"
		},
		{
			"timestamps": {
				"from": "00:20:20,200",
				"to": "00:20:22,480"
			},
			"offsets": {
				"from": 1220200,
				"to": 1222480
			},
			"text": " without looking at the code,"
		},
		{
			"timestamps": {
				"from": "00:20:22,480",
				"to": "00:20:23,680"
			},
			"offsets": {
				"from": 1222480,
				"to": 1223680
			},
			"text": " without looking at the function,"
		},
		{
			"timestamps": {
				"from": "00:20:23,680",
				"to": "00:20:25,560"
			},
			"offsets": {
				"from": 1223680,
				"to": 1225560
			},
			"text": " we are not looking either any issue"
		},
		{
			"timestamps": {
				"from": "00:20:25,560",
				"to": "00:20:26,560"
			},
			"offsets": {
				"from": 1225560,
				"to": 1226560
			},
			"text": " in the transfer function,"
		},
		{
			"timestamps": {
				"from": "00:20:26,560",
				"to": "00:20:28,360"
			},
			"offsets": {
				"from": 1226560,
				"to": 1228360
			},
			"text": " we just define an invariant."
		},
		{
			"timestamps": {
				"from": "00:20:28,360",
				"to": "00:20:30,000"
			},
			"offsets": {
				"from": 1228360,
				"to": 1230000
			},
			"text": " And by doing so, we can realize"
		},
		{
			"timestamps": {
				"from": "00:20:30,000",
				"to": "00:20:32,080"
			},
			"offsets": {
				"from": 1230000,
				"to": 1232080
			},
			"text": " that there is a bug in the transfer function."
		},
		{
			"timestamps": {
				"from": "00:20:32,080",
				"to": "00:20:37,680"
			},
			"offsets": {
				"from": 1232080,
				"to": 1237680
			},
			"text": " So this is kind of a nice way of trying to find bugs"
		},
		{
			"timestamps": {
				"from": "00:20:37,680",
				"to": "00:20:40,560"
			},
			"offsets": {
				"from": 1237680,
				"to": 1240560
			},
			"text": " because you don't look at the individual function necessarily,"
		},
		{
			"timestamps": {
				"from": "00:20:40,560",
				"to": "00:20:41,880"
			},
			"offsets": {
				"from": 1240560,
				"to": 1241880
			},
			"text": " you can just define invariant"
		},
		{
			"timestamps": {
				"from": "00:20:41,880",
				"to": "00:20:45,000"
			},
			"offsets": {
				"from": 1241880,
				"to": 1245000
			},
			"text": " and further is going to try to break the invariant for you."
		},
		{
			"timestamps": {
				"from": "00:20:45,000",
				"to": "00:20:49,000"
			},
			"offsets": {
				"from": 1245000,
				"to": 1249000
			},
			"text": " Does that make sense?"
		},
		{
			"timestamps": {
				"from": "00:20:49,000",
				"to": "00:20:49,840"
			},
			"offsets": {
				"from": 1249000,
				"to": 1249840
			},
			"text": " Any questions?"
		},
		{
			"timestamps": {
				"from": "00:20:49,840",
				"to": "00:20:50,680"
			},
			"offsets": {
				"from": 1249840,
				"to": 1250680
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:20:50,680",
				"to": "00:20:53,120"
			},
			"offsets": {
				"from": 1250680,
				"to": 1253120
			},
			"text": " (mumbles)"
		},
		{
			"timestamps": {
				"from": "00:20:53,120",
				"to": "00:20:54,280"
			},
			"offsets": {
				"from": 1253120,
				"to": 1254280
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:20:54,280",
				"to": "00:20:58,480"
			},
			"offsets": {
				"from": 1254280,
				"to": 1258480
			},
			"text": " So, okay, so the question is,"
		},
		{
			"timestamps": {
				"from": "00:20:58,480",
				"to": "00:21:00,720"
			},
			"offsets": {
				"from": 1258480,
				"to": 1260720
			},
			"text": " does it execute a specific function"
		},
		{
			"timestamps": {
				"from": "00:21:00,720",
				"to": "00:21:03,400"
			},
			"offsets": {
				"from": 1260720,
				"to": 1263400
			},
			"text": " or how does it know which function to call it?"
		},
		{
			"timestamps": {
				"from": "00:21:03,400",
				"to": "00:21:05,680"
			},
			"offsets": {
				"from": 1263400,
				"to": 1265680
			},
			"text": " The answer is that is going to call everything."
		},
		{
			"timestamps": {
				"from": "00:21:05,680",
				"to": "00:21:08,600"
			},
			"offsets": {
				"from": 1265680,
				"to": 1268600
			},
			"text": " So in this token, if you look at like the word source code,"
		},
		{
			"timestamps": {
				"from": "00:21:08,600",
				"to": "00:21:09,840"
			},
			"offsets": {
				"from": 1268600,
				"to": 1269840
			},
			"text": " you have a transfer function,"
		},
		{
			"timestamps": {
				"from": "00:21:09,840",
				"to": "00:21:12,880"
			},
			"offsets": {
				"from": 1269840,
				"to": 1272880
			},
			"text": " passable function and like some additional function."
		},
		{
			"timestamps": {
				"from": "00:21:12,880",
				"to": "00:21:16,160"
			},
			"offsets": {
				"from": 1272880,
				"to": 1276160
			},
			"text": " So the further is just going to call everything"
		},
		{
			"timestamps": {
				"from": "00:21:16,160",
				"to": "00:21:19,040"
			},
			"offsets": {
				"from": 1276160,
				"to": 1279040
			},
			"text": " and everything external or public."
		},
		{
			"timestamps": {
				"from": "00:21:19,040",
				"to": "00:21:21,240"
			},
			"offsets": {
				"from": 1279040,
				"to": 1281240
			},
			"text": " Like everything that a user can call."
		},
		{
			"timestamps": {
				"from": "00:21:21,240",
				"to": "00:21:24,240"
			},
			"offsets": {
				"from": 1281240,
				"to": 1284240
			},
			"text": " So if it was an area of view, it would be something."
		},
		{
			"timestamps": {
				"from": "00:21:24,240",
				"to": "00:21:29,280"
			},
			"offsets": {
				"from": 1284240,
				"to": 1289280
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:21:29,280",
				"to": "00:21:30,120"
			},
			"offsets": {
				"from": 1289280,
				"to": 1290120
			},
			"text": " The question is,"
		},
		{
			"timestamps": {
				"from": "00:21:30,120",
				"to": "00:21:33,000"
			},
			"offsets": {
				"from": 1290120,
				"to": 1293000
			},
			"text": " if you have a very large token or very large contract,"
		},
		{
			"timestamps": {
				"from": "00:21:33,000",
				"to": "00:21:35,160"
			},
			"offsets": {
				"from": 1293000,
				"to": 1295160
			},
			"text": " you have a lot of function."
		},
		{
			"timestamps": {
				"from": "00:21:35,160",
				"to": "00:21:36,760"
			},
			"offsets": {
				"from": 1295160,
				"to": 1296760
			},
			"text": " So here you can take different approach."
		},
		{
			"timestamps": {
				"from": "00:21:36,760",
				"to": "00:21:39,840"
			},
			"offsets": {
				"from": 1296760,
				"to": 1299840
			},
			"text": " Either you want a keynote to call everything"
		},
		{
			"timestamps": {
				"from": "00:21:39,840",
				"to": "00:21:42,600"
			},
			"offsets": {
				"from": 1299840,
				"to": 1302600
			},
			"text": " and you just do nothing and you let a keynote,"
		},
		{
			"timestamps": {
				"from": "00:21:42,600",
				"to": "00:21:44,880"
			},
			"offsets": {
				"from": 1302600,
				"to": 1304880
			},
			"text": " which might work, no, it depends on what it is."
		},
		{
			"timestamps": {
				"from": "00:21:44,880",
				"to": "00:21:48,240"
			},
			"offsets": {
				"from": 1304880,
				"to": 1308240
			},
			"text": " If you know that some function are more important"
		},
		{
			"timestamps": {
				"from": "00:21:48,240",
				"to": "00:21:49,400"
			},
			"offsets": {
				"from": 1308240,
				"to": 1309400
			},
			"text": " and you want to target,"
		},
		{
			"timestamps": {
				"from": "00:21:49,400",
				"to": "00:21:53,600"
			},
			"offsets": {
				"from": 1309400,
				"to": 1313600
			},
			"text": " you can change the configuration file of a keynote"
		},
		{
			"timestamps": {
				"from": "00:21:53,600",
				"to": "00:21:54,440"
			},
			"offsets": {
				"from": 1313600,
				"to": 1314440
			},
			"text": " and tell him,"
		},
		{
			"timestamps": {
				"from": "00:21:54,440",
				"to": "00:21:57,720"
			},
			"offsets": {
				"from": 1314440,
				"to": 1317720
			},
			"text": " call only this function or don't call this function."
		},
		{
			"timestamps": {
				"from": "00:21:57,720",
				"to": "00:21:59,400"
			},
			"offsets": {
				"from": 1317720,
				"to": 1319400
			},
			"text": " So it depends what you're trying to look."
		},
		{
			"timestamps": {
				"from": "00:21:59,400",
				"to": "00:22:01,280"
			},
			"offsets": {
				"from": 1319400,
				"to": 1321280
			},
			"text": " If you want to increase your confidence,"
		},
		{
			"timestamps": {
				"from": "00:22:01,280",
				"to": "00:22:03,000"
			},
			"offsets": {
				"from": 1321280,
				"to": 1323000
			},
			"text": " you should call everything."
		},
		{
			"timestamps": {
				"from": "00:22:03,000",
				"to": "00:22:04,920"
			},
			"offsets": {
				"from": 1323000,
				"to": 1324920
			},
			"text": " If you think there might have an issue"
		},
		{
			"timestamps": {
				"from": "00:22:04,920",
				"to": "00:22:07,680"
			},
			"offsets": {
				"from": 1324920,
				"to": 1327680
			},
			"text": " in the specific function and you want to focus on that,"
		},
		{
			"timestamps": {
				"from": "00:22:07,680",
				"to": "00:22:09,520"
			},
			"offsets": {
				"from": 1327680,
				"to": 1329520
			},
			"text": " you can you can black list or white list."
		},
		{
			"timestamps": {
				"from": "00:22:16,840",
				"to": "00:22:18,360"
			},
			"offsets": {
				"from": 1336840,
				"to": 1338360
			},
			"text": " Okay, so the question is,"
		},
		{
			"timestamps": {
				"from": "00:22:18,360",
				"to": "00:22:20,520"
			},
			"offsets": {
				"from": 1338360,
				"to": 1340520
			},
			"text": " can you define the order of call?"
		},
		{
			"timestamps": {
				"from": "00:22:20,520",
				"to": "00:22:24,560"
			},
			"offsets": {
				"from": 1340520,
				"to": 1344560
			},
			"text": " You can define the order of initialization,"
		},
		{
			"timestamps": {
				"from": "00:22:24,560",
				"to": "00:22:25,680"
			},
			"offsets": {
				"from": 1344560,
				"to": 1345680
			},
			"text": " but not after that."
		},
		{
			"timestamps": {
				"from": "00:22:25,680",
				"to": "00:22:30,800"
			},
			"offsets": {
				"from": 1345680,
				"to": 1350800
			},
			"text": " Think there was another question?"
		},
		{
			"timestamps": {
				"from": "00:22:30,800",
				"to": "00:22:31,640"
			},
			"offsets": {
				"from": 1350800,
				"to": 1351640
			},
			"text": " No, okay."
		},
		{
			"timestamps": {
				"from": "00:22:31,640",
				"to": "00:22:32,480"
			},
			"offsets": {
				"from": 1351640,
				"to": 1352480
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:22:32,480",
				"to": "00:22:36,800"
			},
			"offsets": {
				"from": 1352480,
				"to": 1356800
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:22:36,800",
				"to": "00:22:42,720"
			},
			"offsets": {
				"from": 1356800,
				"to": 1362720
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:22:42,720",
				"to": "00:22:44,600"
			},
			"offsets": {
				"from": 1362720,
				"to": 1364600
			},
			"text": " So the question is,"
		},
		{
			"timestamps": {
				"from": "00:22:44,600",
				"to": "00:22:47,640"
			},
			"offsets": {
				"from": 1364600,
				"to": 1367640
			},
			"text": " can you have a better log because obviously,"
		},
		{
			"timestamps": {
				"from": "00:22:47,640",
				"to": "00:22:49,600"
			},
			"offsets": {
				"from": 1367640,
				"to": 1369600
			},
			"text": " this is a simple example."
		},
		{
			"timestamps": {
				"from": "00:22:49,600",
				"to": "00:22:51,640"
			},
			"offsets": {
				"from": 1369600,
				"to": 1371640
			},
			"text": " And when you do one declaration,"
		},
		{
			"timestamps": {
				"from": "00:22:51,640",
				"to": "00:22:53,040"
			},
			"offsets": {
				"from": 1371640,
				"to": 1373040
			},
			"text": " you might call a lot of functions"
		},
		{
			"timestamps": {
				"from": "00:22:53,040",
				"to": "00:22:56,560"
			},
			"offsets": {
				"from": 1373040,
				"to": 1376560
			},
			"text": " that are not necessary for what you are trying to call."
		},
		{
			"timestamps": {
				"from": "00:22:56,560",
				"to": "00:22:58,360"
			},
			"offsets": {
				"from": 1376560,
				"to": 1378360
			},
			"text": " And the answer is yes."
		},
		{
			"timestamps": {
				"from": "00:22:58,360",
				"to": "00:23:01,320"
			},
			"offsets": {
				"from": 1378360,
				"to": 1381320
			},
			"text": " So a keynote does what we call shrinking"
		},
		{
			"timestamps": {
				"from": "00:23:01,320",
				"to": "00:23:04,920"
			},
			"offsets": {
				"from": 1381320,
				"to": 1384920
			},
			"text": " where once it found a way to break the invariant,"
		},
		{
			"timestamps": {
				"from": "00:23:04,920",
				"to": "00:23:07,400"
			},
			"offsets": {
				"from": 1384920,
				"to": 1387400
			},
			"text": " it's going to try to reduce the trace."
		},
		{
			"timestamps": {
				"from": "00:23:07,400",
				"to": "00:23:09,520"
			},
			"offsets": {
				"from": 1387400,
				"to": 1389520
			},
			"text": " So it's going to continue to further more or less"
		},
		{
			"timestamps": {
				"from": "00:23:09,520",
				"to": "00:23:13,120"
			},
			"offsets": {
				"from": 1389520,
				"to": 1393120
			},
			"text": " on the same iteration and trying to reduce"
		},
		{
			"timestamps": {
				"from": "00:23:13,120",
				"to": "00:23:14,840"
			},
			"offsets": {
				"from": 1393120,
				"to": 1394840
			},
			"text": " the size of the trace."
		},
		{
			"timestamps": {
				"from": "00:23:14,840",
				"to": "00:23:23,200"
			},
			"offsets": {
				"from": 1394840,
				"to": 1403200
			},
			"text": " Okay, then we have the second exercise,"
		},
		{
			"timestamps": {
				"from": "00:23:23,200",
				"to": "00:23:25,720"
			},
			"offsets": {
				"from": 1403200,
				"to": 1405720
			},
			"text": " same instruction."
		},
		{
			"timestamps": {
				"from": "00:23:25,720",
				"to": "00:23:28,520"
			},
			"offsets": {
				"from": 1405720,
				"to": 1408520
			},
			"text": " So on the same repo, just call exercise two."
		},
		{
			"timestamps": {
				"from": "00:23:28,520",
				"to": "00:23:29,640"
			},
			"offsets": {
				"from": 1408520,
				"to": 1409640
			},
			"text": " It's on the same target,"
		},
		{
			"timestamps": {
				"from": "00:23:29,640",
				"to": "00:23:31,760"
			},
			"offsets": {
				"from": 1409640,
				"to": 1411760
			},
			"text": " so you're going to try to have an invariant"
		},
		{
			"timestamps": {
				"from": "00:23:31,760",
				"to": "00:23:34,920"
			},
			"offsets": {
				"from": 1411760,
				"to": 1414920
			},
			"text": " on the same token."
		},
		{
			"timestamps": {
				"from": "00:23:34,920",
				"to": "00:23:38,480"
			},
			"offsets": {
				"from": 1414920,
				"to": 1418480
			},
			"text": " The first invariant was that no user should have"
		},
		{
			"timestamps": {
				"from": "00:23:38,480",
				"to": "00:23:40,240"
			},
			"offsets": {
				"from": 1418480,
				"to": 1420240
			},
			"text": " a balance above the target supply."
		},
		{
			"timestamps": {
				"from": "00:23:40,240",
				"to": "00:23:42,600"
			},
			"offsets": {
				"from": 1420240,
				"to": 1422600
			},
			"text": " Here, as we kind of hinted before,"
		},
		{
			"timestamps": {
				"from": "00:23:42,600",
				"to": "00:23:43,800"
			},
			"offsets": {
				"from": 1422600,
				"to": 1423800
			},
			"text": " this is a possible system."
		},
		{
			"timestamps": {
				"from": "00:23:43,800",
				"to": "00:23:46,040"
			},
			"offsets": {
				"from": 1423800,
				"to": 1426040
			},
			"text": " So it's a system where the owner can pose"
		},
		{
			"timestamps": {
				"from": "00:23:46,040",
				"to": "00:23:47,600"
			},
			"offsets": {
				"from": 1426040,
				"to": 1427600
			},
			"text": " or unpose the system."
		},
		{
			"timestamps": {
				"from": "00:23:47,600",
				"to": "00:23:49,880"
			},
			"offsets": {
				"from": 1427600,
				"to": 1429880
			},
			"text": " And what we want to verify is invariant"
		},
		{
			"timestamps": {
				"from": "00:23:49,880",
				"to": "00:23:53,840"
			},
			"offsets": {
				"from": 1429880,
				"to": 1433840
			},
			"text": " we want to have is that if there is no owner"
		},
		{
			"timestamps": {
				"from": "00:23:53,840",
				"to": "00:23:55,560"
			},
			"offsets": {
				"from": 1433840,
				"to": 1435560
			},
			"text": " and the system is posed,"
		},
		{
			"timestamps": {
				"from": "00:23:55,560",
				"to": "00:23:57,960"
			},
			"offsets": {
				"from": 1435560,
				"to": 1437960
			},
			"text": " can someone unpose the system?"
		},
		{
			"timestamps": {
				"from": "00:23:57,960",
				"to": "00:23:59,600"
			},
			"offsets": {
				"from": 1437960,
				"to": 1439600
			},
			"text": " And this is what we're going to try."
		},
		{
			"timestamps": {
				"from": "00:24:09,200",
				"to": "00:24:12,080"
			},
			"offsets": {
				"from": 1449200,
				"to": 1452080
			},
			"text": " And yeah, let's take 10 minutes for this one."
		},
		{
			"timestamps": {
				"from": "00:24:12,080",
				"to": "00:24:16,680"
			},
			"offsets": {
				"from": 1452080,
				"to": 1456680
			},
			"text": " I'm going to show the solution for the second one."
		},
		{
			"timestamps": {
				"from": "00:24:16,680",
				"to": "00:24:22,760"
			},
			"offsets": {
				"from": 1456680,
				"to": 1462760
			},
			"text": " So it's the same target that for the first exercise,"
		},
		{
			"timestamps": {
				"from": "00:24:22,760",
				"to": "00:24:25,680"
			},
			"offsets": {
				"from": 1462760,
				"to": 1465680
			},
			"text": " but here we are going to focus on the contract"
		},
		{
			"timestamps": {
				"from": "00:24:25,680",
				"to": "00:24:28,240"
			},
			"offsets": {
				"from": 1465680,
				"to": 1468240
			},
			"text": " that were inherited by the token."
		},
		{
			"timestamps": {
				"from": "00:24:28,240",
				"to": "00:24:30,320"
			},
			"offsets": {
				"from": 1468240,
				"to": 1470320
			},
			"text": " You have two contracts, right?"
		},
		{
			"timestamps": {
				"from": "00:24:30,320",
				"to": "00:24:31,920"
			},
			"offsets": {
				"from": 1470320,
				"to": 1471920
			},
			"text": " Ownership and possible."
		},
		{
			"timestamps": {
				"from": "00:24:31,920",
				"to": "00:24:35,080"
			},
			"offsets": {
				"from": 1471920,
				"to": 1475080
			},
			"text": " And here you have a system where you have an owner"
		},
		{
			"timestamps": {
				"from": "00:24:35,080",
				"to": "00:24:38,360"
			},
			"offsets": {
				"from": 1475080,
				"to": 1478360
			},
			"text": " and you can pose or resume the contract."
		},
		{
			"timestamps": {
				"from": "00:24:39,360",
				"to": "00:24:44,360"
			},
			"offsets": {
				"from": 1479360,
				"to": 1484360
			},
			"text": " And what we want to check is that if we drop the ownership"
		},
		{
			"timestamps": {
				"from": "00:24:44,360",
				"to": "00:24:49,360"
			},
			"offsets": {
				"from": 1484360,
				"to": 1489360
			},
			"text": " and we pose the system, is it possible to unpose it?"
		},
		{
			"timestamps": {
				"from": "00:24:49,360",
				"to": "00:24:52,360"
			},
			"offsets": {
				"from": 1489360,
				"to": 1492360
			},
			"text": " So here we have a bit of initialization to do right"
		},
		{
			"timestamps": {
				"from": "00:24:52,360",
				"to": "00:24:54,360"
			},
			"offsets": {
				"from": 1492360,
				"to": 1494360
			},
			"text": " because we want to drop the ownership"
		},
		{
			"timestamps": {
				"from": "00:24:54,360",
				"to": "00:24:56,360"
			},
			"offsets": {
				"from": 1494360,
				"to": 1496360
			},
			"text": " and we want to pose the system."
		},
		{
			"timestamps": {
				"from": "00:24:56,360",
				"to": "00:24:58,360"
			},
			"offsets": {
				"from": 1496360,
				"to": 1498360
			},
			"text": " We are doing this in the constructor."
		},
		{
			"timestamps": {
				"from": "00:24:58,360",
				"to": "00:25:00,360"
			},
			"offsets": {
				"from": 1498360,
				"to": 1500360
			},
			"text": " So we are calling pose and owner."
		},
		{
			"timestamps": {
				"from": "00:25:00,360",
				"to": "00:25:03,360"
			},
			"offsets": {
				"from": 1500360,
				"to": 1503360
			},
			"text": " From no one, the system, as the contract is deployed,"
		},
		{
			"timestamps": {
				"from": "00:25:03,360",
				"to": "00:25:05,360"
			},
			"offsets": {
				"from": 1503360,
				"to": 1505360
			},
			"text": " it's posed, there is no owner."
		},
		{
			"timestamps": {
				"from": "00:25:07,360",
				"to": "00:25:10,360"
			},
			"offsets": {
				"from": 1507360,
				"to": 1510360
			},
			"text": " The invariant is then just if the variable"
		},
		{
			"timestamps": {
				"from": "00:25:10,360",
				"to": "00:25:14,360"
			},
			"offsets": {
				"from": 1510360,
				"to": 1514360
			},
			"text": " that's not tracked, the possible state of the system is true."
		},
		{
			"timestamps": {
				"from": "00:25:14,360",
				"to": "00:25:16,360"
			},
			"offsets": {
				"from": 1514360,
				"to": 1516360
			},
			"text": " And this should hold, right?"
		},
		{
			"timestamps": {
				"from": "00:25:16,360",
				"to": "00:25:20,360"
			},
			"offsets": {
				"from": 1516360,
				"to": 1520360
			},
			"text": " You pose, no ownership, it should be always posed."
		},
		{
			"timestamps": {
				"from": "00:25:20,360",
				"to": "00:25:26,360"
			},
			"offsets": {
				"from": 1520360,
				"to": 1526360
			},
			"text": " And I cannot tell that it actually failed."
		},
		{
			"timestamps": {
				"from": "00:25:26,360",
				"to": "00:25:31,360"
			},
			"offsets": {
				"from": 1526360,
				"to": 1531360
			},
			"text": " And the reason for that, so this is kind of like an old bug"
		},
		{
			"timestamps": {
				"from": "00:25:31,360",
				"to": "00:25:34,360"
			},
			"offsets": {
				"from": 1531360,
				"to": 1534360
			},
			"text": " that were really frequent and common in all version of Solidity."
		},
		{
			"timestamps": {
				"from": "00:25:34,360",
				"to": "00:25:37,360"
			},
			"offsets": {
				"from": 1534360,
				"to": 1537360
			},
			"text": " There was no constructor key words"
		},
		{
			"timestamps": {
				"from": "00:25:37,360",
				"to": "00:25:39,360"
			},
			"offsets": {
				"from": 1537360,
				"to": 1539360
			},
			"text": " and the where you were doing the constructor"
		},
		{
			"timestamps": {
				"from": "00:25:39,360",
				"to": "00:25:41,360"
			},
			"offsets": {
				"from": 1539360,
				"to": 1541360
			},
			"text": " that you needed to have the function name,"
		},
		{
			"timestamps": {
				"from": "00:25:41,360",
				"to": "00:25:43,360"
			},
			"offsets": {
				"from": 1541360,
				"to": 1543360
			},
			"text": " which was a match with the contract name."
		},
		{
			"timestamps": {
				"from": "00:25:43,360",
				"to": "00:25:46,360"
			},
			"offsets": {
				"from": 1543360,
				"to": 1546360
			},
			"text": " And here you have the contract ownership and a function owner."
		},
		{
			"timestamps": {
				"from": "00:25:46,360",
				"to": "00:25:50,360"
			},
			"offsets": {
				"from": 1546360,
				"to": 1550360
			},
			"text": " And because of that, the function owner is a public function"
		},
		{
			"timestamps": {
				"from": "00:25:50,360",
				"to": "00:25:52,360"
			},
			"offsets": {
				"from": 1550360,
				"to": 1552360
			},
			"text": " and anyone can call it and become the owner."
		},
		{
			"timestamps": {
				"from": "00:25:52,360",
				"to": "00:25:56,360"
			},
			"offsets": {
				"from": 1552360,
				"to": 1556360
			},
			"text": " This does not work anymore with more modern version of Solidity,"
		},
		{
			"timestamps": {
				"from": "00:25:56,360",
				"to": "00:26:00,360"
			},
			"offsets": {
				"from": 1556360,
				"to": 1560360
			},
			"text": " but it's the type of bug that we are finding a bit more,"
		},
		{
			"timestamps": {
				"from": "00:26:00,360",
				"to": "00:26:03,360"
			},
			"offsets": {
				"from": 1560360,
				"to": 1563360
			},
			"text": " a bit too much in the past."
		},
		{
			"timestamps": {
				"from": "00:26:03,360",
				"to": "00:26:06,360"
			},
			"offsets": {
				"from": 1563360,
				"to": 1566360
			},
			"text": " Something which is interesting again is that, you know,"
		},
		{
			"timestamps": {
				"from": "00:26:06,360",
				"to": "00:26:08,360"
			},
			"offsets": {
				"from": 1566360,
				"to": 1568360
			},
			"text": " we did not look at the ownership contract."
		},
		{
			"timestamps": {
				"from": "00:26:08,360",
				"to": "00:26:11,360"
			},
			"offsets": {
				"from": 1568360,
				"to": 1571360
			},
			"text": " We did not look like at the implementation itself."
		},
		{
			"timestamps": {
				"from": "00:26:11,360",
				"to": "00:26:15,360"
			},
			"offsets": {
				"from": 1571360,
				"to": 1575360
			},
			"text": " We just defined an invariant and we did the one of the other ones"
		},
		{
			"timestamps": {
				"from": "00:26:15,360",
				"to": "00:26:18,360"
			},
			"offsets": {
				"from": 1575360,
				"to": 1578360
			},
			"text": " and it found the invariant for us."
		},
		{
			"timestamps": {
				"from": "00:26:18,360",
				"to": "00:26:22,360"
			},
			"offsets": {
				"from": 1578360,
				"to": 1582360
			},
			"text": " So now bring the question on how to define invariant."
		},
		{
			"timestamps": {
				"from": "00:26:22,360",
				"to": "00:26:23,360"
			},
			"offsets": {
				"from": 1582360,
				"to": 1583360
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:26:28,360",
				"to": "00:26:34,360"
			},
			"offsets": {
				"from": 1588360,
				"to": 1594360
			},
			"text": " The question is defining invariant part of the auditor in a work."
		},
		{
			"timestamps": {
				"from": "00:26:34,360",
				"to": "00:26:37,360"
			},
			"offsets": {
				"from": 1594360,
				"to": 1597360
			},
			"text": " Yes, like we are using a canine audit and during our audit,"
		},
		{
			"timestamps": {
				"from": "00:26:37,360",
				"to": "00:26:39,360"
			},
			"offsets": {
				"from": 1597360,
				"to": 1599360
			},
			"text": " we are going to define invariant."
		},
		{
			"timestamps": {
				"from": "00:26:39,360",
				"to": "00:26:42,360"
			},
			"offsets": {
				"from": 1599360,
				"to": 1602360
			},
			"text": " And something we are going to do is that we are going to discuss"
		},
		{
			"timestamps": {
				"from": "00:26:42,360",
				"to": "00:26:46,360"
			},
			"offsets": {
				"from": 1602360,
				"to": 1606360
			},
			"text": " with the developer because the developer knows better than us"
		},
		{
			"timestamps": {
				"from": "00:26:46,360",
				"to": "00:26:47,360"
			},
			"offsets": {
				"from": 1606360,
				"to": 1607360
			},
			"text": " what the system is supposed to do."
		},
		{
			"timestamps": {
				"from": "00:26:47,360",
				"to": "00:26:50,360"
			},
			"offsets": {
				"from": 1607360,
				"to": 1610360
			},
			"text": " So we are going to have this collaboration with them"
		},
		{
			"timestamps": {
				"from": "00:26:50,360",
				"to": "00:26:52,360"
			},
			"offsets": {
				"from": 1610360,
				"to": 1612360
			},
			"text": " to understand what the system is supposed to do"
		},
		{
			"timestamps": {
				"from": "00:26:52,360",
				"to": "00:26:54,360"
			},
			"offsets": {
				"from": 1612360,
				"to": 1614360
			},
			"text": " and to define the invariant."
		},
		{
			"timestamps": {
				"from": "00:26:56,360",
				"to": "00:26:59,360"
			},
			"offsets": {
				"from": 1616360,
				"to": 1619360
			},
			"text": " Note the question how to define invariants."
		},
		{
			"timestamps": {
				"from": "00:26:59,360",
				"to": "00:27:03,360"
			},
			"offsets": {
				"from": 1619360,
				"to": 1623360
			},
			"text": " Because, you know, like, if you have bad invariants,"
		},
		{
			"timestamps": {
				"from": "00:27:03,360",
				"to": "00:27:05,360"
			},
			"offsets": {
				"from": 1623360,
				"to": 1625360
			},
			"text": " it doesn't matter what you are doing, you know,"
		},
		{
			"timestamps": {
				"from": "00:27:05,360",
				"to": "00:27:08,360"
			},
			"offsets": {
				"from": 1625360,
				"to": 1628360
			},
			"text": " if you are using further or if you are using like formal method,"
		},
		{
			"timestamps": {
				"from": "00:27:08,360",
				"to": "00:27:10,360"
			},
			"offsets": {
				"from": 1628360,
				"to": 1630360
			},
			"text": " if your invariant are not good, you are just going to check"
		},
		{
			"timestamps": {
				"from": "00:27:10,360",
				"to": "00:27:13,360"
			},
			"offsets": {
				"from": 1630360,
				"to": 1633360
			},
			"text": " for something that, you know, doesn't matter."
		},
		{
			"timestamps": {
				"from": "00:27:13,360",
				"to": "00:27:19,360"
			},
			"offsets": {
				"from": 1633360,
				"to": 1639360
			},
			"text": " The best approach to write invariants is not to start with a tool,"
		},
		{
			"timestamps": {
				"from": "00:27:19,360",
				"to": "00:27:22,360"
			},
			"offsets": {
				"from": 1639360,
				"to": 1642360
			},
			"text": " it's not to start with, you know, writing down solidity invariant,"
		},
		{
			"timestamps": {
				"from": "00:27:22,360",
				"to": "00:27:24,360"
			},
			"offsets": {
				"from": 1642360,
				"to": 1644360
			},
			"text": " is to start with English."
		},
		{
			"timestamps": {
				"from": "00:27:24,360",
				"to": "00:27:28,360"
			},
			"offsets": {
				"from": 1644360,
				"to": 1648360
			},
			"text": " Open a file, a marked on file, or whatever, you know, format you like,"
		},
		{
			"timestamps": {
				"from": "00:27:28,360",
				"to": "00:27:31,360"
			},
			"offsets": {
				"from": 1648360,
				"to": 1651360
			},
			"text": " and write in English what the system is supposed to do."
		},
		{
			"timestamps": {
				"from": "00:27:31,360",
				"to": "00:27:32,360"
			},
			"offsets": {
				"from": 1651360,
				"to": 1652360
			},
			"text": " Start simple."
		},
		{
			"timestamps": {
				"from": "00:27:32,360",
				"to": "00:27:34,360"
			},
			"offsets": {
				"from": 1652360,
				"to": 1654360
			},
			"text": " Start with invariant that you know, you know,"
		},
		{
			"timestamps": {
				"from": "00:27:34,360",
				"to": "00:27:37,360"
			},
			"offsets": {
				"from": 1654360,
				"to": 1657360
			},
			"text": " are to start with things that are not broken."
		},
		{
			"timestamps": {
				"from": "00:27:37,360",
				"to": "00:27:41,360"
			},
			"offsets": {
				"from": 1657360,
				"to": 1661360
			},
			"text": " Once you have five or ten simple invariant,"
		},
		{
			"timestamps": {
				"from": "00:27:41,360",
				"to": "00:27:45,360"
			},
			"offsets": {
				"from": 1661360,
				"to": 1665360
			},
			"text": " write them into the entity and once the further on top of them,"
		},
		{
			"timestamps": {
				"from": "00:27:45,360",
				"to": "00:27:49,360"
			},
			"offsets": {
				"from": 1665360,
				"to": 1669360
			},
			"text": " if the invariant are all holding, then you can go back to thinking"
		},
		{
			"timestamps": {
				"from": "00:27:49,360",
				"to": "00:27:53,360"
			},
			"offsets": {
				"from": 1669360,
				"to": 1673360
			},
			"text": " about the invariant of the system and, you know, go deeper"
		},
		{
			"timestamps": {
				"from": "00:27:53,360",
				"to": "00:27:55,360"
			},
			"offsets": {
				"from": 1673360,
				"to": 1675360
			},
			"text": " into the invariant themselves."
		},
		{
			"timestamps": {
				"from": "00:27:55,360",
				"to": "00:27:59,360"
			},
			"offsets": {
				"from": 1675360,
				"to": 1679360
			},
			"text": " If something is broken, then look if the invariant is incorrect"
		},
		{
			"timestamps": {
				"from": "00:27:59,360",
				"to": "00:28:01,360"
			},
			"offsets": {
				"from": 1679360,
				"to": 1681360
			},
			"text": " or if there is an actual bug."
		},
		{
			"timestamps": {
				"from": "00:28:01,360",
				"to": "00:28:03,360"
			},
			"offsets": {
				"from": 1681360,
				"to": 1683360
			},
			"text": " And iterate, go over."
		},
		{
			"timestamps": {
				"from": "00:28:03,360",
				"to": "00:28:08,360"
			},
			"offsets": {
				"from": 1683360,
				"to": 1688360
			},
			"text": " Yeah, in our experience when we work with clients,"
		},
		{
			"timestamps": {
				"from": "00:28:08,360",
				"to": "00:28:13,360"
			},
			"offsets": {
				"from": 1688360,
				"to": 1693360
			},
			"text": " when we ask them to do step one and define the invariants,"
		},
		{
			"timestamps": {
				"from": "00:28:13,360",
				"to": "00:28:17,360"
			},
			"offsets": {
				"from": 1693360,
				"to": 1697360
			},
			"text": " they are actually, they realize about bugs."
		},
		{
			"timestamps": {
				"from": "00:28:17,360",
				"to": "00:28:20,360"
			},
			"offsets": {
				"from": 1697360,
				"to": 1700360
			},
			"text": " So it is already a good, a very good thing,"
		},
		{
			"timestamps": {
				"from": "00:28:20,360",
				"to": "00:28:23,360"
			},
			"offsets": {
				"from": 1700360,
				"to": 1703360
			},
			"text": " to start thinking into that."
		},
		{
			"timestamps": {
				"from": "00:28:23,360",
				"to": "00:28:26,360"
			},
			"offsets": {
				"from": 1703360,
				"to": 1706360
			},
			"text": " Even if you don't, if you're not testing."
		},
		{
			"timestamps": {
				"from": "00:28:26,360",
				"to": "00:28:28,360"
			},
			"offsets": {
				"from": 1706360,
				"to": 1708360
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:28:28,360",
				"to": "00:28:30,360"
			},
			"offsets": {
				"from": 1708360,
				"to": 1710360
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:28:30,360",
				"to": "00:28:33,360"
			},
			"offsets": {
				"from": 1710360,
				"to": 1713360
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:28:33,360",
				"to": "00:28:36,360"
			},
			"offsets": {
				"from": 1713360,
				"to": 1716360
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:28:36,360",
				"to": "00:28:40,360"
			},
			"offsets": {
				"from": 1716360,
				"to": 1720360
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:28:40,360",
				"to": "00:28:45,360"
			},
			"offsets": {
				"from": 1720360,
				"to": 1725360
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:28:45,360",
				"to": "00:28:47,360"
			},
			"offsets": {
				"from": 1725360,
				"to": 1727360
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:28:47,360",
				"to": "00:28:48,360"
			},
			"offsets": {
				"from": 1727360,
				"to": 1728360
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:28:48,360",
				"to": "00:28:52,360"
			},
			"offsets": {
				"from": 1728360,
				"to": 1732360
			},
			"text": " If I understand correctly, the question is, can we connect this to mainnet?"
		},
		{
			"timestamps": {
				"from": "00:28:52,360",
				"to": "00:28:56,360"
			},
			"offsets": {
				"from": 1732360,
				"to": 1736360
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:28:56,360",
				"to": "00:28:59,360"
			},
			"offsets": {
				"from": 1736360,
				"to": 1739360
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:28:59,360",
				"to": "00:29:00,360"
			},
			"offsets": {
				"from": 1739360,
				"to": 1740360
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:29:00,360",
				"to": "00:29:02,360"
			},
			"offsets": {
				"from": 1740360,
				"to": 1742360
			},
			"text": " How to use it with other contract?"
		},
		{
			"timestamps": {
				"from": "00:29:02,360",
				"to": "00:29:05,360"
			},
			"offsets": {
				"from": 1742360,
				"to": 1745360
			},
			"text": " So you can just, in the constructor, deploy the contract."
		},
		{
			"timestamps": {
				"from": "00:29:05,360",
				"to": "00:29:08,360"
			},
			"offsets": {
				"from": 1745360,
				"to": 1748360
			},
			"text": " Something that we are not going to cover here, but we have a tool"
		},
		{
			"timestamps": {
				"from": "00:29:08,360",
				"to": "00:29:13,360"
			},
			"offsets": {
				"from": 1748360,
				"to": 1753360
			},
			"text": " which is called itino, which is basically going to take your unit test,"
		},
		{
			"timestamps": {
				"from": "00:29:13,360",
				"to": "00:29:16,360"
			},
			"offsets": {
				"from": 1753360,
				"to": 1756360
			},
			"text": " take your speed, and replay them in a kinder."
		},
		{
			"timestamps": {
				"from": "00:29:16,360",
				"to": "00:29:19,360"
			},
			"offsets": {
				"from": 1756360,
				"to": 1759360
			},
			"text": " So for example, if you have like a complex integration with like,"
		},
		{
			"timestamps": {
				"from": "00:29:19,360",
				"to": "00:29:22,360"
			},
			"offsets": {
				"from": 1759360,
				"to": 1762360
			},
			"text": " you know, you are deploying your unit test, ten different contract,"
		},
		{
			"timestamps": {
				"from": "00:29:22,360",
				"to": "00:29:25,360"
			},
			"offsets": {
				"from": 1762360,
				"to": 1765360
			},
			"text": " you are deploying like a mock-off unit swap or whatever you need,"
		},
		{
			"timestamps": {
				"from": "00:29:25,360",
				"to": "00:29:29,360"
			},
			"offsets": {
				"from": 1765360,
				"to": 1769360
			},
			"text": " you can replay this in a kinder, so that everything is going to be set up."
		},
		{
			"timestamps": {
				"from": "00:29:29,360",
				"to": "00:29:30,360"
			},
			"offsets": {
				"from": 1769360,
				"to": 1770360
			},
			"text": " Yes."
		},
		{
			"timestamps": {
				"from": "00:29:30,360",
				"to": "00:29:31,360"
			},
			"offsets": {
				"from": 1770360,
				"to": 1771360
			},
			"text": " Yes."
		},
		{
			"timestamps": {
				"from": "00:29:31,360",
				"to": "00:29:36,360"
			},
			"offsets": {
				"from": 1771360,
				"to": 1776360
			},
			"text": " I think there is some, a little bit something else there that you want to,"
		},
		{
			"timestamps": {
				"from": "00:29:36,360",
				"to": "00:29:40,360"
			},
			"offsets": {
				"from": 1776360,
				"to": 1780360
			},
			"text": " what if you want to define an invariant on a unit swap contract, right?"
		},
		{
			"timestamps": {
				"from": "00:29:40,360",
				"to": "00:29:44,360"
			},
			"offsets": {
				"from": 1780360,
				"to": 1784360
			},
			"text": " That you, that you are using, that your contract is, is, is using."
		},
		{
			"timestamps": {
				"from": "00:29:44,360",
				"to": "00:29:50,360"
			},
			"offsets": {
				"from": 1784360,
				"to": 1790360
			},
			"text": " So you will need to know how unit swap works in order to put it in your invariant."
		},
		{
			"timestamps": {
				"from": "00:29:50,360",
				"to": "00:29:55,360"
			},
			"offsets": {
				"from": 1790360,
				"to": 1795360
			},
			"text": " Like if I'm swapping something, then I'm getting something else, right?"
		},
		{
			"timestamps": {
				"from": "00:29:55,360",
				"to": "00:29:59,360"
			},
			"offsets": {
				"from": 1795360,
				"to": 1799360
			},
			"text": " And in that case, you need to realize that it's difficult to write invariants"
		},
		{
			"timestamps": {
				"from": "00:29:59,360",
				"to": "00:30:02,360"
			},
			"offsets": {
				"from": 1799360,
				"to": 1802360
			},
			"text": " with other people called, right?"
		},
		{
			"timestamps": {
				"from": "00:30:02,360",
				"to": "00:30:06,360"
			},
			"offsets": {
				"from": 1802360,
				"to": 1806360
			},
			"text": " Despite, despite this is working and everyone is using it,"
		},
		{
			"timestamps": {
				"from": "00:30:06,360",
				"to": "00:30:09,360"
			},
			"offsets": {
				"from": 1806360,
				"to": 1809360
			},
			"text": " but every time that you use a third-party contract,"
		},
		{
			"timestamps": {
				"from": "00:30:09,360",
				"to": "00:30:15,360"
			},
			"offsets": {
				"from": 1809360,
				"to": 1815360
			},
			"text": " then you have, you are importing some risk and you need to completely understand"
		},
		{
			"timestamps": {
				"from": "00:30:15,360",
				"to": "00:30:20,360"
			},
			"offsets": {
				"from": 1815360,
				"to": 1820360
			},
			"text": " the other contract in order to know what is going to the effect in your own contract."
		},
		{
			"timestamps": {
				"from": "00:30:20,360",
				"to": "00:30:23,360"
			},
			"offsets": {
				"from": 1820360,
				"to": 1823360
			},
			"text": " I like just an explanation, so what was the real case?"
		},
		{
			"timestamps": {
				"from": "00:30:23,360",
				"to": "00:30:26,360"
			},
			"offsets": {
				"from": 1823360,
				"to": 1826360
			},
			"text": " Have a special time."
		},
		{
			"timestamps": {
				"from": "00:30:26,360",
				"to": "00:30:32,360"
			},
			"offsets": {
				"from": 1826360,
				"to": 1832360
			},
			"text": " So the risk case was we have a special, I'm from Garibox Protocol"
		},
		{
			"timestamps": {
				"from": "00:30:32,360",
				"to": "00:30:38,360"
			},
			"offsets": {
				"from": 1832360,
				"to": 1838360
			},
			"text": " and we've worked on composable leverage and we have adapters because we just provide leverage"
		},
		{
			"timestamps": {
				"from": "00:30:38,360",
				"to": "00:30:40,360"
			},
			"offsets": {
				"from": 1838360,
				"to": 1840360
			},
			"text": " for some other contracts."
		},
		{
			"timestamps": {
				"from": "00:30:40,360",
				"to": "00:30:45,360"
			},
			"offsets": {
				"from": 1840360,
				"to": 1845360
			},
			"text": " So when you combine Garibox with unit swap, you get immediately"
		},
		{
			"timestamps": {
				"from": "00:30:45,360",
				"to": "00:30:47,360"
			},
			"offsets": {
				"from": 1845360,
				"to": 1847360
			},
			"text": " margin trading."
		},
		{
			"timestamps": {
				"from": "00:30:47,360",
				"to": "00:30:52,360"
			},
			"offsets": {
				"from": 1847360,
				"to": 1852360
			},
			"text": " And in this case, we have adapters and these adapters incorrectly parse paths"
		},
		{
			"timestamps": {
				"from": "00:30:52,360",
				"to": "00:30:55,360"
			},
			"offsets": {
				"from": 1852360,
				"to": 1855360
			},
			"text": " to make check after unit swap."
		},
		{
			"timestamps": {
				"from": "00:30:55,360",
				"to": "00:31:01,360"
			},
			"offsets": {
				"from": 1855360,
				"to": 1861360
			},
			"text": " However, they integrated and make code to existing unit swap and the guy who were"
		},
		{
			"timestamps": {
				"from": "00:31:01,360",
				"to": "00:31:07,360"
			},
			"offsets": {
				"from": 1861360,
				"to": 1867360
			},
			"text": " on a modify problem, he write a small test and this test shows us that if you really"
		},
		{
			"timestamps": {
				"from": "00:31:07,360",
				"to": "00:31:13,360"
			},
			"offsets": {
				"from": 1867360,
				"to": 1873360
			},
			"text": " have some additional part of code data, it could be interpreted incorrectly."
		},
		{
			"timestamps": {
				"from": "00:31:13,360",
				"to": "00:31:15,360"
			},
			"offsets": {
				"from": 1873360,
				"to": 1875360
			},
			"text": " So we have two different ones."
		},
		{
			"timestamps": {
				"from": "00:31:15,360",
				"to": "00:31:21,360"
			},
			"offsets": {
				"from": 1875360,
				"to": 1881360
			},
			"text": " Our system could be fooled, check not that balance we should be checked."
		},
		{
			"timestamps": {
				"from": "00:31:21,360",
				"to": "00:31:25,360"
			},
			"offsets": {
				"from": 1881360,
				"to": 1885360
			},
			"text": " And in this case, it was a fault of the system and the funds could be drained."
		},
		{
			"timestamps": {
				"from": "00:31:25,360",
				"to": "00:31:30,360"
			},
			"offsets": {
				"from": 1885360,
				"to": 1890360
			},
			"text": " And in this case, I think we could find some fuzzing testing to really provide"
		},
		{
			"timestamps": {
				"from": "00:31:30,360",
				"to": "00:31:36,360"
			},
			"offsets": {
				"from": 1890360,
				"to": 1896360
			},
			"text": " any information, but this test should work with unit swap because we behave in a different way."
		},
		{
			"timestamps": {
				"from": "00:31:36,360",
				"to": "00:31:39,360"
			},
			"offsets": {
				"from": 1896360,
				"to": 1899360
			},
			"text": " And we shouldn't cover that because we ran with MOX."
		},
		{
			"timestamps": {
				"from": "00:31:39,360",
				"to": "00:31:42,360"
			},
			"offsets": {
				"from": 1899360,
				"to": 1902360
			},
			"text": " And MOX, of course, was created with the same bug."
		},
		{
			"timestamps": {
				"from": "00:31:42,360",
				"to": "00:31:45,360"
			},
			"offsets": {
				"from": 1902360,
				"to": 1905360
			},
			"text": " So MOX was okay, but real implementation, totally different."
		},
		{
			"timestamps": {
				"from": "00:31:45,360",
				"to": "00:31:49,360"
			},
			"offsets": {
				"from": 1905360,
				"to": 1909360
			},
			"text": " And I definitely believe that fuzzing should found these mistakes."
		},
		{
			"timestamps": {
				"from": "00:31:49,360",
				"to": "00:31:51,360"
			},
			"offsets": {
				"from": 1909360,
				"to": 1911360
			},
			"text": " Yeah, yeah, definitely."
		},
		{
			"timestamps": {
				"from": "00:31:51,360",
				"to": "00:31:55,360"
			},
			"offsets": {
				"from": 1911360,
				"to": 1915360
			},
			"text": " Definitely when you are creating a MOX, you are assuming or everything works."
		},
		{
			"timestamps": {
				"from": "00:31:55,360",
				"to": "00:32:01,360"
			},
			"offsets": {
				"from": 1915360,
				"to": 1921360
			},
			"text": " And if your assumption is not precise enough, you won't be able to detect something."
		},
		{
			"timestamps": {
				"from": "00:32:01,360",
				"to": "00:32:09,360"
			},
			"offsets": {
				"from": 1921360,
				"to": 1929360
			},
			"text": " And we as an auditor, it's common that we have two audit contracts that go into the other contract."
		},
		{
			"timestamps": {
				"from": "00:32:09,360",
				"to": "00:32:10,360"
			},
			"offsets": {
				"from": 1929360,
				"to": 1930360
			},
			"text": " Let's say compound."
		},
		{
			"timestamps": {
				"from": "00:32:10,360",
				"to": "00:32:16,360"
			},
			"offsets": {
				"from": 1930360,
				"to": 1936360
			},
			"text": " So when we go into compound, we have all the documentation and says, well, compound work like this or like that."
		},
		{
			"timestamps": {
				"from": "00:32:16,360",
				"to": "00:32:23,360"
			},
			"offsets": {
				"from": 1936360,
				"to": 1943360
			},
			"text": " But when we look at the code and see some things that are not documented and we go back into the developers and look,"
		},
		{
			"timestamps": {
				"from": "00:32:23,360",
				"to": "00:32:29,360"
			},
			"offsets": {
				"from": 1943360,
				"to": 1949360
			},
			"text": " if your contract is doing this or that, it will revert and you're not testing for that."
		},
		{
			"timestamps": {
				"from": "00:32:29,360",
				"to": "00:32:35,360"
			},
			"offsets": {
				"from": 1949360,
				"to": 1955360
			},
			"text": " So it's when you are using a third party contract, you are importing the risk."
		},
		{
			"timestamps": {
				"from": "00:32:35,360",
				"to": "00:32:43,360"
			},
			"offsets": {
				"from": 1955360,
				"to": 1963360
			},
			"text": " So either you have really good tests or you even make sure that you understand everything."
		},
		{
			"timestamps": {
				"from": "00:32:43,360",
				"to": "00:32:47,360"
			},
			"offsets": {
				"from": 1963360,
				"to": 1967360
			},
			"text": " Otherwise, it will be difficult to catch the bug."
		},
		{
			"timestamps": {
				"from": "00:32:47,360",
				"to": "00:32:49,360"
			},
			"offsets": {
				"from": 1967360,
				"to": 1969360
			},
			"text": " But yeah, I think this type of bug can be found with fuzzing."
		},
		{
			"timestamps": {
				"from": "00:32:49,360",
				"to": "00:32:56,360"
			},
			"offsets": {
				"from": 1969360,
				"to": 1976360
			},
			"text": " Like the most, like the difficulty is going to find any initializations that make sense and then you can make sense."
		},
		{
			"timestamps": {
				"from": "00:32:56,360",
				"to": "00:33:04,360"
			},
			"offsets": {
				"from": 1976360,
				"to": 1984360
			},
			"text": " That's why we are putting the infinities on to defining invariant because this is like the key component of this technique."
		},
		{
			"timestamps": {
				"from": "00:33:04,360",
				"to": "00:33:05,360"
			},
			"offsets": {
				"from": 1984360,
				"to": 1985360
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:33:05,360",
				"to": "00:33:12,360"
			},
			"offsets": {
				"from": 1985360,
				"to": 1992360
			},
			"text": " In terms of speed, is it okay to put all deployment script into constructor?"
		},
		{
			"timestamps": {
				"from": "00:33:12,360",
				"to": "00:33:21,360"
			},
			"offsets": {
				"from": 1992360,
				"to": 2001360
			},
			"text": " Because of course, if you deploy such a huge system and you deploy some contracts from external repositories like Uniswap and Sony."
		},
		{
			"timestamps": {
				"from": "00:33:21,360",
				"to": "00:33:26,360"
			},
			"offsets": {
				"from": 2001360,
				"to": 2006360
			},
			"text": " And of course, when you want to test million operation, if you redeploy each time,"
		},
		{
			"timestamps": {
				"from": "00:33:26,360",
				"to": "00:33:29,360"
			},
			"offsets": {
				"from": 2006360,
				"to": 2009360
			},
			"text": " hold the system, it could require hours or days."
		},
		{
			"timestamps": {
				"from": "00:33:29,360",
				"to": "00:33:34,360"
			},
			"offsets": {
				"from": 2009360,
				"to": 2014360
			},
			"text": " Yeah. So, so when you use a kid now, you deploys only once."
		},
		{
			"timestamps": {
				"from": "00:33:34,360",
				"to": "00:33:39,360"
			},
			"offsets": {
				"from": 2014360,
				"to": 2019360
			},
			"text": " And then the when your test finish, it will go back to the state after the contract is deployed."
		},
		{
			"timestamps": {
				"from": "00:33:39,360",
				"to": "00:33:41,360"
			},
			"offsets": {
				"from": 2019360,
				"to": 2021360
			},
			"text": " There's no need to redeploy."
		},
		{
			"timestamps": {
				"from": "00:33:41,360",
				"to": "00:33:50,360"
			},
			"offsets": {
				"from": 2021360,
				"to": 2030360
			},
			"text": " And that is why we have, we ask the developer to have fixed amount of parameters in the deployment."
		},
		{
			"timestamps": {
				"from": "00:33:50,360",
				"to": "00:33:52,360"
			},
			"offsets": {
				"from": 2030360,
				"to": 2032360
			},
			"text": " Right on the on the on the constructor."
		},
		{
			"timestamps": {
				"from": "00:33:52,360",
				"to": "00:33:55,360"
			},
			"offsets": {
				"from": 2032360,
				"to": 2035360
			},
			"text": " Otherwise, we will know what what we should deploy."
		},
		{
			"timestamps": {
				"from": "00:33:55,360",
				"to": "00:33:57,360"
			},
			"offsets": {
				"from": 2035360,
				"to": 2037360
			},
			"text": " Yeah, I think there is a question over there."
		},
		{
			"timestamps": {
				"from": "00:33:57,360",
				"to": "00:34:05,360"
			},
			"offsets": {
				"from": 2037360,
				"to": 2045360
			},
			"text": " I'm just wondering as you once you've kind of defined your invariance."
		},
		{
			"timestamps": {
				"from": "00:34:05,360",
				"to": "00:34:11,360"
			},
			"offsets": {
				"from": 2045360,
				"to": 2051360
			},
			"text": " And I imagine you guys in your audit, so you run through these and."
		},
		{
			"timestamps": {
				"from": "00:34:11,360",
				"to": "00:34:17,360"
			},
			"offsets": {
				"from": 2051360,
				"to": 2057360
			},
			"text": " Basically, I'm trying to understand when you guys have confidence that."
		},
		{
			"timestamps": {
				"from": "00:34:17,360",
				"to": "00:34:25,360"
			},
			"offsets": {
				"from": 2057360,
				"to": 2065360
			},
			"text": " Yes, the this is a good invariance from and if there are any metrics that you guys use internally,"
		},
		{
			"timestamps": {
				"from": "00:34:25,360",
				"to": "00:34:30,360"
			},
			"offsets": {
				"from": 2065360,
				"to": 2070360
			},
			"text": " like I see it's outputting unique instructions and unique code hashes."
		},
		{
			"timestamps": {
				"from": "00:34:30,360",
				"to": "00:34:35,360"
			},
			"offsets": {
				"from": 2070360,
				"to": 2075360
			},
			"text": " Those sorts of things that give you confidence in what you've done."
		},
		{
			"timestamps": {
				"from": "00:34:35,360",
				"to": "00:34:41,360"
			},
			"offsets": {
				"from": 2075360,
				"to": 2081360
			},
			"text": " So in practice, you know, you can do calculator, but usually coverage is not a good indicator."
		},
		{
			"timestamps": {
				"from": "00:34:41,360",
				"to": "00:34:46,360"
			},
			"offsets": {
				"from": 2081360,
				"to": 2086360
			},
			"text": " And in fairness, like, you know, when we do this in a time box manner."
		},
		{
			"timestamps": {
				"from": "00:34:46,360",
				"to": "00:34:51,360"
			},
			"offsets": {
				"from": 2086360,
				"to": 2091360
			},
			"text": " So we have two or three weeks to do it and we're going to do our best in two or three weeks."
		},
		{
			"timestamps": {
				"from": "00:34:51,360",
				"to": "00:34:53,360"
			},
			"offsets": {
				"from": 2091360,
				"to": 2093360
			},
			"text": " That's the best that we can do."
		},
		{
			"timestamps": {
				"from": "00:34:53,360",
				"to": "00:34:55,360"
			},
			"offsets": {
				"from": 2093360,
				"to": 2095360
			},
			"text": " Yeah, it's it's it's it's tough."
		},
		{
			"timestamps": {
				"from": "00:34:55,360",
				"to": "00:35:02,360"
			},
			"offsets": {
				"from": 2095360,
				"to": 2102360
			},
			"text": " We there is no there is no like silver bullet for this."
		},
		{
			"timestamps": {
				"from": "00:35:02,360",
				"to": "00:35:08,360"
			},
			"offsets": {
				"from": 2102360,
				"to": 2108360
			},
			"text": " We when we do a report, we list the imbalance that we test."
		},
		{
			"timestamps": {
				"from": "00:35:08,360",
				"to": "00:35:15,360"
			},
			"offsets": {
				"from": 2108360,
				"to": 2115360
			},
			"text": " So it's it's clear what what we tested and what everything else was was not tested with tools."
		},
		{
			"timestamps": {
				"from": "00:35:15,360",
				"to": "00:35:22,360"
			},
			"offsets": {
				"from": 2115360,
				"to": 2122360
			},
			"text": " So we will perhaps did manual review or use all the techniques like slither to check some some other things."
		},
		{
			"timestamps": {
				"from": "00:35:22,360",
				"to": "00:35:28,360"
			},
			"offsets": {
				"from": 2122360,
				"to": 2128360
			},
			"text": " But yeah, unfortunately, there is no good way to to define this."
		},
		{
			"timestamps": {
				"from": "00:35:28,360",
				"to": "00:35:34,360"
			},
			"offsets": {
				"from": 2128360,
				"to": 2134360
			},
			"text": " But perhaps I I personally think that talking with the developer early on the invariance."
		},
		{
			"timestamps": {
				"from": "00:35:34,360",
				"to": "00:35:36,360"
			},
			"offsets": {
				"from": 2134360,
				"to": 2136360
			},
			"text": " It's a really good thing."
		},
		{
			"timestamps": {
				"from": "00:35:36,360",
				"to": "00:35:43,360"
			},
			"offsets": {
				"from": 2136360,
				"to": 2143360
			},
			"text": " It's usually the case that we think in an environment, let's say that some some value cannot be zero."
		},
		{
			"timestamps": {
				"from": "00:35:43,360",
				"to": "00:35:48,360"
			},
			"offsets": {
				"from": 2143360,
				"to": 2148360
			},
			"text": " And we go into the into the client and says, is this an invariant?"
		},
		{
			"timestamps": {
				"from": "00:35:48,360",
				"to": "00:35:52,360"
			},
			"offsets": {
				"from": 2148360,
				"to": 2152360
			},
			"text": " We don't know because we have not designed the system and they don't know."
		},
		{
			"timestamps": {
				"from": "00:35:52,360",
				"to": "00:35:55,360"
			},
			"offsets": {
				"from": 2152360,
				"to": 2155360
			},
			"text": " And if they don't know that that's an issue, right?"
		},
		{
			"timestamps": {
				"from": "00:35:55,360",
				"to": "00:36:07,360"
			},
			"offsets": {
				"from": 2155360,
				"to": 2167360
			},
			"text": " We should we should absolutely know what is the behavior of the system and if we don't know if an environment should should if something should be an environment or not, then we should go back and read, we discuss that."
		},
		{
			"timestamps": {
				"from": "00:36:07,360",
				"to": "00:36:14,360"
			},
			"offsets": {
				"from": 2167360,
				"to": 2174360
			},
			"text": " The security in general is not binary. It's not, you know, yes or no. It's really a matter of how much waste was you onto putting to it."
		},
		{
			"timestamps": {
				"from": "00:36:14,360",
				"to": "00:36:23,360"
			},
			"offsets": {
				"from": 2174360,
				"to": 2183360
			},
			"text": " And more resource output, more confidence."
		},
		{
			"timestamps": {
				"from": "00:36:23,360",
				"to": "00:36:34,360"
			},
			"offsets": {
				"from": 2183360,
				"to": 2194360
			},
			"text": " Thanks. I have a question actually more related to the earlier question, which is a big class of bugs that's been occurring recently and for a while now are re-entrancy bugs."
		},
		{
			"timestamps": {
				"from": "00:36:34,360",
				"to": "00:36:44,360"
			},
			"offsets": {
				"from": 2194360,
				"to": 2204360
			},
			"text": " Right. How do you deal with finding violations of invariants that correspond to external contracts in that way?"
		},
		{
			"timestamps": {
				"from": "00:36:44,360",
				"to": "00:36:51,360"
			},
			"offsets": {
				"from": 2204360,
				"to": 2211360
			},
			"text": " Okay. So this is a really good question. And in my opinion, the best tool to find re-entrancy is static analysis."
		},
		{
			"timestamps": {
				"from": "00:36:51,360",
				"to": "00:36:58,360"
			},
			"offsets": {
				"from": 2211360,
				"to": 2218360
			},
			"text": " So the question is more to find which technique you should apply for which problem."
		},
		{
			"timestamps": {
				"from": "00:36:58,360",
				"to": "00:37:03,360"
			},
			"offsets": {
				"from": 2218360,
				"to": 2223360
			},
			"text": " And for things like re-entrancy, data on static analysis is just going to be better."
		},
		{
			"timestamps": {
				"from": "00:37:03,360",
				"to": "00:37:07,360"
			},
			"offsets": {
				"from": 2223360,
				"to": 2227360
			},
			"text": " You can use further. You can create like re-entran callback and things like that."
		},
		{
			"timestamps": {
				"from": "00:37:07,360",
				"to": "00:37:12,360"
			},
			"offsets": {
				"from": 2227360,
				"to": 2232360
			},
			"text": " But in practice, static analysis is just going to outperform any further at this work."
		},
		{
			"timestamps": {
				"from": "00:37:12,360",
				"to": "00:37:27,360"
			},
			"offsets": {
				"from": 2232360,
				"to": 2247360
			},
			"text": " That's why, like for any class of vulnerability, which is kind of a pattern based, you can use static analysis and it's going to be better in my opinion."
		},
		{
			"timestamps": {
				"from": "00:37:27,360",
				"to": "00:37:36,360"
			},
			"offsets": {
				"from": 2247360,
				"to": 2256360
			},
			"text": " And one more question. What's your addition, for example, we have a complex system and we want to make a classical fuzzing with a kidney."
		},
		{
			"timestamps": {
				"from": "00:37:36,360",
				"to": "00:37:42,360"
			},
			"offsets": {
				"from": 2256360,
				"to": 2262360
			},
			"text": " And it seems that to really cover many cases requires a lot of computational power."
		},
		{
			"timestamps": {
				"from": "00:37:42,360",
				"to": "00:37:55,360"
			},
			"offsets": {
				"from": 2262360,
				"to": 2275360
			},
			"text": " So maybe can you advise some cloud provider how to do to run it maybe for a week with very powerful computer to get something achievable because of course, this pretty simple contracts could be found on my MacBook."
		},
		{
			"timestamps": {
				"from": "00:37:55,360",
				"to": "00:38:03,360"
			},
			"offsets": {
				"from": 2275360,
				"to": 2283360
			},
			"text": " But if you go a little bit further, many contracts, many stops, maybe it requires more computational power."
		},
		{
			"timestamps": {
				"from": "00:38:03,360",
				"to": "00:38:11,360"
			},
			"offsets": {
				"from": 2283360,
				"to": 2291360
			},
			"text": " So, so do you want to talk about a kidney pad?"
		},
		{
			"timestamps": {
				"from": "00:38:11,360",
				"to": "00:38:18,360"
			},
			"offsets": {
				"from": 2291360,
				"to": 2298360
			},
			"text": " The question was, if you want to run a kidney on the cloud or a large system, how can you do it?"
		},
		{
			"timestamps": {
				"from": "00:38:18,360",
				"to": "00:38:29,360"
			},
			"offsets": {
				"from": 2298360,
				"to": 2309360
			},
			"text": " Yeah, so the first thing that you should know is that if you have a very large contract, it can take some amount of memory."
		},
		{
			"timestamps": {
				"from": "00:38:29,360",
				"to": "00:38:37,360"
			},
			"offsets": {
				"from": 2309360,
				"to": 2317360
			},
			"text": " So first thing, get a good server with a good amount of memory and CPUs."
		},
		{
			"timestamps": {
				"from": "00:38:37,360",
				"to": "00:38:54,360"
			},
			"offsets": {
				"from": 2317360,
				"to": 2334360
			},
			"text": " So the second thing is every, we have a Python companion tool called Knapper 8 that will run a kidney in any number of any number of concurrent instances."
		},
		{
			"timestamps": {
				"from": "00:38:54,360",
				"to": "00:38:57,360"
			},
			"offsets": {
				"from": 2334360,
				"to": 2337360
			},
			"text": " So you can run 10 at a time."
		},
		{
			"timestamps": {
				"from": "00:38:57,360",
				"to": "00:39:13,360"
			},
			"offsets": {
				"from": 2337360,
				"to": 2353360
			},
			"text": " But we are not only going to run it 10 at the time, but we are going to randomly shuffle parameters, because in some cases there are some, there are some issues that can be easily found with, let's say, three or 10 transactions."
		},
		{
			"timestamps": {
				"from": "00:39:13,360",
				"to": "00:39:21,360"
			},
			"offsets": {
				"from": 2353360,
				"to": 2361360
			},
			"text": " And some other issues are going to be mostly found with 200 transactions in a row."
		},
		{
			"timestamps": {
				"from": "00:39:21,360",
				"to": "00:39:29,360"
			},
			"offsets": {
				"from": 2361360,
				"to": 2369360
			},
			"text": " Right, so what we do is we run the tool in different, with different random parameters and in different, let's say, generations."
		},
		{
			"timestamps": {
				"from": "00:39:29,360",
				"to": "00:39:40,360"
			},
			"offsets": {
				"from": 2369360,
				"to": 2380360
			},
			"text": " So we run, we run a kidney for an hour, 10 times, then we save the corpus and you can get, you can see all the, all the, all the code that was covered."
		},
		{
			"timestamps": {
				"from": "00:39:40,360",
				"to": "00:39:46,360"
			},
			"offsets": {
				"from": 2380360,
				"to": 2386360
			},
			"text": " And then we start again, but taking the, the, the output of the previous generation."
		},
		{
			"timestamps": {
				"from": "00:39:46,360",
				"to": "00:39:51,360"
			},
			"offsets": {
				"from": 2386360,
				"to": 2391360
			},
			"text": " So you turn it over and over again so you can see how your code is explored."
		},
		{
			"timestamps": {
				"from": "00:39:51,360",
				"to": "00:40:02,360"
			},
			"offsets": {
				"from": 2391360,
				"to": 2402360
			},
			"text": " Right, or if there's some part of the code that is not explored with 10 different instances, you can go back and say, no, I need, I need to change this because it doesn't depend on the, on the actual execution."
		},
		{
			"timestamps": {
				"from": "00:40:02,360",
				"to": "00:40:06,360"
			},
			"offsets": {
				"from": 2402360,
				"to": 2406360
			},
			"text": " So we can, we can give you the link for that."
		},
		{
			"timestamps": {
				"from": "00:40:06,360",
				"to": "00:40:07,360"
			},
			"offsets": {
				"from": 2406360,
				"to": 2407360
			},
			"text": " It's just a Python tool."
		},
		{
			"timestamps": {
				"from": "00:40:07,360",
				"to": "00:40:09,360"
			},
			"offsets": {
				"from": 2407360,
				"to": 2409360
			},
			"text": " So it's, it's, it's easy to use."
		},
		{
			"timestamps": {
				"from": "00:40:09,360",
				"to": "00:40:10,360"
			},
			"offsets": {
				"from": 2409360,
				"to": 2410360
			},
			"text": " And yeah, it's also open source."
		},
		{
			"timestamps": {
				"from": "00:40:10,360",
				"to": "00:40:12,360"
			},
			"offsets": {
				"from": 2410360,
				"to": 2412360
			},
			"text": " Like everything we are doing is open source."
		},
		{
			"timestamps": {
				"from": "00:40:12,360",
				"to": "00:40:20,360"
			},
			"offsets": {
				"from": 2412360,
				"to": 2420360
			},
			"text": " Okay, so yeah, like, it's really about spending time and thinking about our invariant."
		},
		{
			"timestamps": {
				"from": "00:40:20,360",
				"to": "00:40:29,360"
			},
			"offsets": {
				"from": 2420360,
				"to": 2429360
			},
			"text": " And start simple, like if the first invariant that you are writing leads to a bugs, there is something wrong about your approach."
		},
		{
			"timestamps": {
				"from": "00:40:29,360",
				"to": "00:40:33,360"
			},
			"offsets": {
				"from": 2429360,
				"to": 2433360
			},
			"text": " You should not have like simple invariant that, you know, are going to work the system."
		},
		{
			"timestamps": {
				"from": "00:40:33,360",
				"to": "00:40:35,360"
			},
			"offsets": {
				"from": 2433360,
				"to": 2435360
			},
			"text": " So we'll start simple and it'll write over them."
		},
		{
			"timestamps": {
				"from": "00:40:35,360",
				"to": "00:40:41,360"
			},
			"offsets": {
				"from": 2435360,
				"to": 2441360
			},
			"text": " Okay, to give you some example, let's say you have an now with magic libraries."
		},
		{
			"timestamps": {
				"from": "00:40:41,360",
				"to": "00:40:43,360"
			},
			"offsets": {
				"from": 2441360,
				"to": 2443360
			},
			"text": " What invariant can you have?"
		},
		{
			"timestamps": {
				"from": "00:40:43,360",
				"to": "00:40:47,360"
			},
			"offsets": {
				"from": 2443360,
				"to": 2447360
			},
			"text": " You can have commutative properties A plus B is equal to B plus A."
		},
		{
			"timestamps": {
				"from": "00:40:47,360",
				"to": "00:40:53,360"
			},
			"offsets": {
				"from": 2447360,
				"to": 2453360
			},
			"text": " You can have identity A, one multiplied by two should be two."
		},
		{
			"timestamps": {
				"from": "00:40:53,360",
				"to": "00:40:56,360"
			},
			"offsets": {
				"from": 2453360,
				"to": 2456360
			},
			"text": " Our inverse, if you add something by its opposite, it should be zero."
		},
		{
			"timestamps": {
				"from": "00:40:56,360",
				"to": "00:40:58,360"
			},
			"offsets": {
				"from": 2456360,
				"to": 2458360
			},
			"text": " This is not always true, right?"
		},
		{
			"timestamps": {
				"from": "00:40:58,360",
				"to": "00:41:02,360"
			},
			"offsets": {
				"from": 2458360,
				"to": 2462360
			},
			"text": " But depending on what you are building, this might be like the type of property you are looking for."
		},
		{
			"timestamps": {
				"from": "00:41:02,360",
				"to": "00:41:06,360"
			},
			"offsets": {
				"from": 2462360,
				"to": 2466360
			},
			"text": " For token, we already talked about the first one."
		},
		{
			"timestamps": {
				"from": "00:41:06,360",
				"to": "00:41:10,360"
			},
			"offsets": {
				"from": 2466360,
				"to": 2470360
			},
			"text": " No user should have a balance above the total supplier."
		},
		{
			"timestamps": {
				"from": "00:41:10,360",
				"to": "00:41:12,360"
			},
			"offsets": {
				"from": 2470360,
				"to": 2472360
			},
			"text": " Let's say you want to look at the transfer function."
		},
		{
			"timestamps": {
				"from": "00:41:12,360",
				"to": "00:41:15,360"
			},
			"offsets": {
				"from": 2472360,
				"to": 2475360
			},
			"text": " And let's think, transfer function, what does it do?"
		},
		{
			"timestamps": {
				"from": "00:41:15,360",
				"to": "00:41:17,360"
			},
			"offsets": {
				"from": 2475360,
				"to": 2477360
			},
			"text": " I'm transferring token to someone."
		},
		{
			"timestamps": {
				"from": "00:41:17,360",
				"to": "00:41:21,360"
			},
			"offsets": {
				"from": 2477360,
				"to": 2481360
			},
			"text": " So at the end, my balance should have decreased by the amount."
		},
		{
			"timestamps": {
				"from": "00:41:21,360",
				"to": "00:41:26,360"
			},
			"offsets": {
				"from": 2481360,
				"to": 2486360
			},
			"text": " And the OVC version should have, see, its balance increased by the amount."
		},
		{
			"timestamps": {
				"from": "00:41:26,360",
				"to": "00:41:29,360"
			},
			"offsets": {
				"from": 2486360,
				"to": 2489360
			},
			"text": " And let's say you try to write something like that."
		},
		{
			"timestamps": {
				"from": "00:41:29,360",
				"to": "00:41:35,360"
			},
			"offsets": {
				"from": 2489360,
				"to": 2495360
			},
			"text": " What you might quickly realize is that what happens is the destination is myself."
		},
		{
			"timestamps": {
				"from": "00:41:35,360",
				"to": "00:41:41,360"
			},
			"offsets": {
				"from": 2495360,
				"to": 2501360
			},
			"text": " So if I transfer token to myself, my balance is not going to increase or decrease, quite"
		},
		{
			"timestamps": {
				"from": "00:41:41,360",
				"to": "00:41:42,360"
			},
			"offsets": {
				"from": 2501360,
				"to": 2502360
			},
			"text": " hopefully."
		},
		{
			"timestamps": {
				"from": "00:41:42,360",
				"to": "00:41:46,360"
			},
			"offsets": {
				"from": 2502360,
				"to": 2506360
			},
			"text": " So this is an example where you might try to define an invariant on transfer, my theme"
		},
		{
			"timestamps": {
				"from": "00:41:46,360",
				"to": "00:41:47,360"
			},
			"offsets": {
				"from": 2506360,
				"to": 2507360
			},
			"text": " simple."
		},
		{
			"timestamps": {
				"from": "00:41:47,360",
				"to": "00:41:49,360"
			},
			"offsets": {
				"from": 2507360,
				"to": 2509360
			},
			"text": " You might write the thing in Solidity."
		},
		{
			"timestamps": {
				"from": "00:41:49,360",
				"to": "00:41:53,360"
			},
			"offsets": {
				"from": 2509360,
				"to": 2513360
			},
			"text": " And if you do that, I cannot tell you that there is an edge case where if you transfer to"
		},
		{
			"timestamps": {
				"from": "00:41:53,360",
				"to": "00:41:57,360"
			},
			"offsets": {
				"from": 2513360,
				"to": 2517360
			},
			"text": " yourself, like the invariant is going to be broken."
		},
		{
			"timestamps": {
				"from": "00:41:57,360",
				"to": "00:42:02,360"
			},
			"offsets": {
				"from": 2517360,
				"to": 2522360
			},
			"text": " And in this example, if you go through this, it's not the code, which is bad."
		},
		{
			"timestamps": {
				"from": "00:42:02,360",
				"to": "00:42:04,360"
			},
			"offsets": {
				"from": 2522360,
				"to": 2524360
			},
			"text": " It's an invariant that was bad."
		},
		{
			"timestamps": {
				"from": "00:42:04,360",
				"to": "00:42:08,360"
			},
			"offsets": {
				"from": 2524360,
				"to": 2528360
			},
			"text": " So that's why having this iterative approach is really important because sometimes you're"
		},
		{
			"timestamps": {
				"from": "00:42:08,360",
				"to": "00:42:11,360"
			},
			"offsets": {
				"from": 2528360,
				"to": 2531360
			},
			"text": " going to make a assumption about your system and you might actually be wrong."
		},
		{
			"timestamps": {
				"from": "00:42:11,360",
				"to": "00:42:16,360"
			},
			"offsets": {
				"from": 2531360,
				"to": 2536360
			},
			"text": " And as the system again, and complexity, it's more and more likely that it's going to be"
		},
		{
			"timestamps": {
				"from": "00:42:16,360",
				"to": "00:42:21,360"
			},
			"offsets": {
				"from": 2536360,
				"to": 2541360
			},
			"text": " more difficult to refine the invariants."
		},
		{
			"timestamps": {
				"from": "00:42:21,360",
				"to": "00:42:29,360"
			},
			"offsets": {
				"from": 2541360,
				"to": 2549360
			},
			"text": " So the first thing that I want to do is to make sure that the function is not going to"
		},
		{
			"timestamps": {
				"from": "00:42:29,360",
				"to": "00:42:30,360"
			},
			"offsets": {
				"from": 2549360,
				"to": 2550360
			},
			"text": " be a function."
		},
		{
			"timestamps": {
				"from": "00:42:30,360",
				"to": "00:42:36,360"
			},
			"offsets": {
				"from": 2550360,
				"to": 2556360
			},
			"text": " And the first thing that I want to do is to make sure that the function is not going"
		},
		{
			"timestamps": {
				"from": "00:42:36,360",
				"to": "00:42:37,360"
			},
			"offsets": {
				"from": 2556360,
				"to": 2557360
			},
			"text": " to be a function."
		},
		{
			"timestamps": {
				"from": "00:42:37,360",
				"to": "00:42:42,360"
			},
			"offsets": {
				"from": 2557360,
				"to": 2562360
			},
			"text": " And the first thing that I want to do is to make sure that the function is not going"
		},
		{
			"timestamps": {
				"from": "00:42:42,360",
				"to": "00:42:43,360"
			},
			"offsets": {
				"from": 2562360,
				"to": 2563360
			},
			"text": " to be a function."
		},
		{
			"timestamps": {
				"from": "00:42:43,360",
				"to": "00:42:50,360"
			},
			"offsets": {
				"from": 2563360,
				"to": 2570360
			},
			"text": " And the first thing that I want to do is to make sure that the function is not going"
		},
		{
			"timestamps": {
				"from": "00:42:50,360",
				"to": "00:42:51,360"
			},
			"offsets": {
				"from": 2570360,
				"to": 2571360
			},
			"text": " to be a function."
		},
		{
			"timestamps": {
				"from": "00:42:51,360",
				"to": "00:42:54,360"
			},
			"offsets": {
				"from": 2571360,
				"to": 2574360
			},
			"text": " The invariant are usually stateless."
		},
		{
			"timestamps": {
				"from": "00:42:54,360",
				"to": "00:42:59,360"
			},
			"offsets": {
				"from": 2574360,
				"to": 2579360
			},
			"text": " They are things that you can just look at a specific function and try to see if it holds."
		},
		{
			"timestamps": {
				"from": "00:42:59,360",
				"to": "00:43:03,360"
			},
			"offsets": {
				"from": 2579360,
				"to": 2583360
			},
			"text": " So with metric, invariant I mentioned are stateless and are functional invariants."
		},
		{
			"timestamps": {
				"from": "00:43:03,360",
				"to": "00:43:08,360"
			},
			"offsets": {
				"from": 2583360,
				"to": 2588360
			},
			"text": " Here you can craft simple scenario just by calling the specific function."
		},
		{
			"timestamps": {
				"from": "00:43:08,360",
				"to": "00:43:10,360"
			},
			"offsets": {
				"from": 2588360,
				"to": 2590360
			},
			"text": " Then you have system level invariant."
		},
		{
			"timestamps": {
				"from": "00:43:10,360",
				"to": "00:43:15,360"
			},
			"offsets": {
				"from": 2590360,
				"to": 2595360
			},
			"text": " System level invariant are usually more complex, but they are also more powerful."
		},
		{
			"timestamps": {
				"from": "00:43:15,360",
				"to": "00:43:17,360"
			},
			"offsets": {
				"from": 2595360,
				"to": 2597360
			},
			"text": " And here you are stateful."
		},
		{
			"timestamps": {
				"from": "00:43:17,360",
				"to": "00:43:21,360"
			},
			"offsets": {
				"from": 2597360,
				"to": 2601360
			},
			"text": " You have to change the state of the contract and you are going to try to see the invariant"
		},
		{
			"timestamps": {
				"from": "00:43:21,360",
				"to": "00:43:23,360"
			},
			"offsets": {
				"from": 2601360,
				"to": 2603360
			},
			"text": " or the amount of the state."
		},
		{
			"timestamps": {
				"from": "00:43:23,360",
				"to": "00:43:27,760"
			},
			"offsets": {
				"from": 2603360,
				"to": 2607760
			},
			"text": " And here it's important that a kina is calling all the different functions because it's actually"
		},
		{
			"timestamps": {
				"from": "00:43:27,760",
				"to": "00:43:29,760"
			},
			"offsets": {
				"from": 2607760,
				"to": 2609760
			},
			"text": " what you want to try."
		},
		{
			"timestamps": {
				"from": "00:43:29,760",
				"to": "00:43:37,360"
			},
			"offsets": {
				"from": 2609760,
				"to": 2617360
			},
			"text": " The balance being below or equal to the total supply is an example of a system level invariant."
		},
		{
			"timestamps": {
				"from": "00:43:37,360",
				"to": "00:43:43,480"
			},
			"offsets": {
				"from": 2617360,
				"to": 2623480
			},
			"text": " For functional invariants, one thing that you can use is a different modern kina that"
		},
		{
			"timestamps": {
				"from": "00:43:43,480",
				"to": "00:43:47,480"
			},
			"offsets": {
				"from": 2623480,
				"to": 2627480
			},
			"text": " is calling a kina and a kina with support assertion."
		},
		{
			"timestamps": {
				"from": "00:43:47,480",
				"to": "00:43:54,480"
			},
			"offsets": {
				"from": 2627480,
				"to": 2634480
			},
			"text": " You can create function, put assertion and try to see if it holds."
		},
		{
			"timestamps": {
				"from": "00:43:54,480",
				"to": "00:43:59,280"
			},
			"offsets": {
				"from": 2634480,
				"to": 2639280
			},
			"text": " System level invariant, as we can already discuss, it might be more complex depending"
		},
		{
			"timestamps": {
				"from": "00:43:59,280",
				"to": "00:44:01,480"
			},
			"offsets": {
				"from": 2639280,
				"to": 2641480
			},
			"text": " on the initialisation of your system."
		},
		{
			"timestamps": {
				"from": "00:44:01,480",
				"to": "00:44:05,480"
			},
			"offsets": {
				"from": 2641480,
				"to": 2645480
			},
			"text": " If it's a simple initialisation, you might be able to do everything in the constructor."
		},
		{
			"timestamps": {
				"from": "00:44:05,480",
				"to": "00:44:10,760"
			},
			"offsets": {
				"from": 2645480,
				"to": 2650760
			},
			"text": " If the constructor is too large for the bytecode size or whatever reason, you might have to"
		},
		{
			"timestamps": {
				"from": "00:44:10,760",
				"to": "00:44:17,760"
			},
			"offsets": {
				"from": 2650760,
				"to": 2657760
			},
			"text": " split it and here it's where you can use a kina."
		},
		{
			"timestamps": {
				"from": "00:44:17,760",
				"to": "00:44:20,680"
			},
			"offsets": {
				"from": 2657760,
				"to": 2660680
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "00:44:20,680",
				"to": "00:44:24,520"
			},
			"offsets": {
				"from": 2660680,
				"to": 2664520
			},
			"text": " So let's see this particular piece of code."
		},
		{
			"timestamps": {
				"from": "00:44:24,520",
				"to": "00:44:29,360"
			},
			"offsets": {
				"from": 2664520,
				"to": 2669360
			},
			"text": " Let's take half a minute to read it."
		},
		{
			"timestamps": {
				"from": "00:44:29,360",
				"to": "00:44:36,680"
			},
			"offsets": {
				"from": 2669360,
				"to": 2676680
			},
			"text": " It's basically a byte function that will call an internal function, byte, byte."
		},
		{
			"timestamps": {
				"from": "00:44:36,680",
				"to": "00:44:43,120"
			},
			"offsets": {
				"from": 2676680,
				"to": 2683120
			},
			"text": " So what we are going to do is we're going to think what are the type of invariants that"
		},
		{
			"timestamps": {
				"from": "00:44:43,120",
				"to": "00:44:49,320"
			},
			"offsets": {
				"from": 2683120,
				"to": 2689320
			},
			"text": " we can have here and what will they are going to test and what type of guarantees we're"
		},
		{
			"timestamps": {
				"from": "00:44:49,320",
				"to": "00:44:50,680"
			},
			"offsets": {
				"from": 2689320,
				"to": 2690680
			},
			"text": " going to get from this."
		},
		{
			"timestamps": {
				"from": "00:44:50,680",
				"to": "00:44:55,080"
			},
			"offsets": {
				"from": 2690680,
				"to": 2695080
			},
			"text": " So let's take a few seconds for this."
		},
		{
			"timestamps": {
				"from": "00:44:55,080",
				"to": "00:45:01,800"
			},
			"offsets": {
				"from": 2695080,
				"to": 2701800
			},
			"text": " Yes, so we have a question."
		},
		{
			"timestamps": {
				"from": "00:45:01,800",
				"to": "00:45:12,160"
			},
			"offsets": {
				"from": 2701800,
				"to": 2712160
			},
			"text": " Okay, so the question is testing timestamp dependence or clearly not the case here."
		},
		{
			"timestamps": {
				"from": "00:45:12,160",
				"to": "00:45:20,200"
			},
			"offsets": {
				"from": 2712160,
				"to": 2720200
			},
			"text": " For timestamp depending on code, a kina when it runs, it automatically increases either"
		},
		{
			"timestamps": {
				"from": "00:45:20,200",
				"to": "00:45:25,280"
			},
			"offsets": {
				"from": 2720200,
				"to": 2725280
			},
			"text": " the block number or the block timestamp inside some range."
		},
		{
			"timestamps": {
				"from": "00:45:25,280",
				"to": "00:45:33,680"
			},
			"offsets": {
				"from": 2725280,
				"to": 2733680
			},
			"text": " Because it happens that some code will fail when the timestamp is increased into a really,"
		},
		{
			"timestamps": {
				"from": "00:45:33,680",
				"to": "00:45:35,440"
			},
			"offsets": {
				"from": 2733680,
				"to": 2735440
			},
			"text": " really large number."
		},
		{
			"timestamps": {
				"from": "00:45:35,440",
				"to": "00:45:38,360"
			},
			"offsets": {
				"from": 2735440,
				"to": 2738360
			},
			"text": " But yeah, 100 years or like the end of the universe."
		},
		{
			"timestamps": {
				"from": "00:45:38,360",
				"to": "00:45:43,640"
			},
			"offsets": {
				"from": 2738360,
				"to": 2743640
			},
			"text": " So we don't care if the smart contract has a bug that can only be triggered in the end"
		},
		{
			"timestamps": {
				"from": "00:45:43,640",
				"to": "00:45:47,040"
			},
			"offsets": {
				"from": 2743640,
				"to": 2747040
			},
			"text": " of the universe will be the least of our problems."
		},
		{
			"timestamps": {
				"from": "00:45:47,040",
				"to": "00:45:48,080"
			},
			"offsets": {
				"from": 2747040,
				"to": 2748080
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "00:45:48,080",
				"to": "00:45:53,360"
			},
			"offsets": {
				"from": 2748080,
				"to": 2753360
			},
			"text": " So yeah, any idea what are the type of things that we can test here?"
		},
		{
			"timestamps": {
				"from": "00:45:53,360",
				"to": "00:45:54,360"
			},
			"offsets": {
				"from": 2753360,
				"to": 2754360
			},
			"text": " Yes."
		},
		{
			"timestamps": {
				"from": "00:45:54,360",
				"to": "00:46:04,880"
			},
			"offsets": {
				"from": 2754360,
				"to": 2764880
			},
			"text": " The first one, we can understand that how many tokens we can get as a result follows our"
		},
		{
			"timestamps": {
				"from": "00:46:04,880",
				"to": "00:46:11,520"
			},
			"offsets": {
				"from": 2764880,
				"to": 2771520
			},
			"text": " expectation when we're sending message value because as I can see it's a hard-coded rate"
		},
		{
			"timestamps": {
				"from": "00:46:11,520",
				"to": "00:46:13,280"
			},
			"offsets": {
				"from": 2771520,
				"to": 2773280
			},
			"text": " is around 10."
		},
		{
			"timestamps": {
				"from": "00:46:13,280",
				"to": "00:46:15,680"
			},
			"offsets": {
				"from": 2773280,
				"to": 2775680
			},
			"text": " So basically it's a pretty simple formula."
		},
		{
			"timestamps": {
				"from": "00:46:15,680",
				"to": "00:46:18,120"
			},
			"offsets": {
				"from": 2775680,
				"to": 2778120
			},
			"text": " We can change different value."
		},
		{
			"timestamps": {
				"from": "00:46:18,120",
				"to": "00:46:19,600"
			},
			"offsets": {
				"from": 2778120,
				"to": 2779600
			},
			"text": " We put into the function."
		},
		{
			"timestamps": {
				"from": "00:46:19,600",
				"to": "00:46:23,160"
			},
			"offsets": {
				"from": 2779600,
				"to": 2783160
			},
			"text": " We have totally prediction how much we can get."
		},
		{
			"timestamps": {
				"from": "00:46:23,160",
				"to": "00:46:27,720"
			},
			"offsets": {
				"from": 2783160,
				"to": 2787720
			},
			"text": " And then we can try to verify that it works."
		},
		{
			"timestamps": {
				"from": "00:46:27,720",
				"to": "00:46:29,960"
			},
			"offsets": {
				"from": 2787720,
				"to": 2789960
			},
			"text": " Yes, exactly."
		},
		{
			"timestamps": {
				"from": "00:46:29,960",
				"to": "00:46:38,280"
			},
			"offsets": {
				"from": 2789960,
				"to": 2798280
			},
			"text": " So the property is related with the amount that we can get even the number of way that"
		},
		{
			"timestamps": {
				"from": "00:46:38,280",
				"to": "00:46:40,440"
			},
			"offsets": {
				"from": 2798280,
				"to": 2800440
			},
			"text": " is sent."
		},
		{
			"timestamps": {
				"from": "00:46:40,440",
				"to": "00:46:44,160"
			},
			"offsets": {
				"from": 2800440,
				"to": 2804160
			},
			"text": " So yeah, we can."
		},
		{
			"timestamps": {
				"from": "00:46:44,160",
				"to": "00:46:48,600"
			},
			"offsets": {
				"from": 2804160,
				"to": 2808600
			},
			"text": " So the first thing is this code will depend on the state."
		},
		{
			"timestamps": {
				"from": "00:46:48,600",
				"to": "00:46:49,840"
			},
			"offsets": {
				"from": 2808600,
				"to": 2809840
			},
			"text": " We don't have the main function."
		},
		{
			"timestamps": {
				"from": "00:46:49,840",
				"to": "00:46:51,800"
			},
			"offsets": {
				"from": 2809840,
				"to": 2811800
			},
			"text": " So we don't know what is inside."
		},
		{
			"timestamps": {
				"from": "00:46:51,800",
				"to": "00:46:57,160"
			},
			"offsets": {
				"from": 2811800,
				"to": 2817160
			},
			"text": " So where we have the valid by function that is actually attracting the thing that we want"
		},
		{
			"timestamps": {
				"from": "00:46:57,160",
				"to": "00:46:59,800"
			},
			"offsets": {
				"from": 2817160,
				"to": 2819800
			},
			"text": " to test."
		},
		{
			"timestamps": {
				"from": "00:46:59,800",
				"to": "00:47:06,320"
			},
			"offsets": {
				"from": 2819800,
				"to": 2826320
			},
			"text": " So we will start with valid by, which is pure stateless function."
		},
		{
			"timestamps": {
				"from": "00:47:06,320",
				"to": "00:47:08,280"
			},
			"offsets": {
				"from": 2826320,
				"to": 2828280
			},
			"text": " Yes."
		},
		{
			"timestamps": {
				"from": "00:47:08,280",
				"to": "00:47:16,280"
			},
			"offsets": {
				"from": 2828280,
				"to": 2836280
			},
			"text": " So we were thinking about invariance here related with the amount that we can get."
		},
		{
			"timestamps": {
				"from": "00:47:16,280",
				"to": "00:47:18,040"
			},
			"offsets": {
				"from": 2836280,
				"to": 2838040
			},
			"text": " So this is very simple."
		},
		{
			"timestamps": {
				"from": "00:47:18,040",
				"to": "00:47:22,680"
			},
			"offsets": {
				"from": 2838040,
				"to": 2842680
			},
			"text": " Without going into specific, this is a very simple invariant."
		},
		{
			"timestamps": {
				"from": "00:47:22,680",
				"to": "00:47:30,760"
			},
			"offsets": {
				"from": 2842680,
				"to": 2850760
			},
			"text": " If the amount is a zero, then the user should receive no tokens at all."
		},
		{
			"timestamps": {
				"from": "00:47:30,760",
				"to": "00:47:37,160"
			},
			"offsets": {
				"from": 2850760,
				"to": 2857160
			},
			"text": " So it's even simple on thinking how much user should receive."
		},
		{
			"timestamps": {
				"from": "00:47:37,160",
				"to": "00:47:41,600"
			},
			"offsets": {
				"from": 2857160,
				"to": 2861600
			},
			"text": " But it's a concrete case and it's kind of a corner case."
		},
		{
			"timestamps": {
				"from": "00:47:41,600",
				"to": "00:47:45,480"
			},
			"offsets": {
				"from": 2861600,
				"to": 2865480
			},
			"text": " So it can be important to test."
		},
		{
			"timestamps": {
				"from": "00:47:45,480",
				"to": "00:47:46,600"
			},
			"offsets": {
				"from": 2865480,
				"to": 2866600
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "00:47:46,600",
				"to": "00:47:49,160"
			},
			"offsets": {
				"from": 2866600,
				"to": 2869160
			},
			"text": " So how we can test this?"
		},
		{
			"timestamps": {
				"from": "00:47:49,160",
				"to": "00:47:51,040"
			},
			"offsets": {
				"from": 2869160,
				"to": 2871040
			},
			"text": " So there are a couple of ways to test it."
		},
		{
			"timestamps": {
				"from": "00:47:51,040",
				"to": "00:47:53,720"
			},
			"offsets": {
				"from": 2871040,
				"to": 2873720
			},
			"text": " This is one."
		},
		{
			"timestamps": {
				"from": "00:47:53,720",
				"to": "00:47:59,520"
			},
			"offsets": {
				"from": 2873720,
				"to": 2879520
			},
			"text": " So we can write a function that will take one parameter."
		},
		{
			"timestamps": {
				"from": "00:47:59,520",
				"to": "00:48:02,880"
			},
			"offsets": {
				"from": 2879520,
				"to": 2882880
			},
			"text": " So I can now put any number there."
		},
		{
			"timestamps": {
				"from": "00:48:02,880",
				"to": "00:48:11,640"
			},
			"offsets": {
				"from": 2882880,
				"to": 2891640
			},
			"text": " However, we're going to restrict the input of this function to be non-zero."
		},
		{
			"timestamps": {
				"from": "00:48:11,640",
				"to": "00:48:14,680"
			},
			"offsets": {
				"from": 2891640,
				"to": 2894680
			},
			"text": " Then we're going to execute valid by."
		},
		{
			"timestamps": {
				"from": "00:48:14,680",
				"to": "00:48:24,680"
			},
			"offsets": {
				"from": 2894680,
				"to": 2904680
			},
			"text": " And then we want to know if a kinac can reach the statement after that."
		},
		{
			"timestamps": {
				"from": "00:48:24,680",
				"to": "00:48:34,560"
			},
			"offsets": {
				"from": 2904680,
				"to": 2914560
			},
			"text": " Because valid by will revert if the inputs are not the one expected."
		},
		{
			"timestamps": {
				"from": "00:48:34,560",
				"to": "00:48:43,080"
			},
			"offsets": {
				"from": 2914560,
				"to": 2923080
			},
			"text": " So we want to know if we can get tokens despite sending no value."
		},
		{
			"timestamps": {
				"from": "00:48:43,080",
				"to": "00:48:44,080"
			},
			"offsets": {
				"from": 2923080,
				"to": 2924080
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:48:44,080",
				"to": "00:48:55,600"
			},
			"offsets": {
				"from": 2924080,
				"to": 2935600
			},
			"text": " And so perhaps you're wondering what if this amount is zero, then clearly this code will"
		},
		{
			"timestamps": {
				"from": "00:48:55,600",
				"to": "00:48:57,880"
			},
			"offsets": {
				"from": 2935600,
				"to": 2937880
			},
			"text": " not do anything interesting."
		},
		{
			"timestamps": {
				"from": "00:48:57,880",
				"to": "00:49:00,840"
			},
			"offsets": {
				"from": 2937880,
				"to": 2940840
			},
			"text": " It's going to revert."
		},
		{
			"timestamps": {
				"from": "00:49:00,840",
				"to": "00:49:08,480"
			},
			"offsets": {
				"from": 2940840,
				"to": 2948480
			},
			"text": " When you're writing tests, you need to-- so you can put any amount of requires or pre-conditions"
		},
		{
			"timestamps": {
				"from": "00:49:08,480",
				"to": "00:49:10,880"
			},
			"offsets": {
				"from": 2948480,
				"to": 2950880
			},
			"text": " or people usually call it."
		},
		{
			"timestamps": {
				"from": "00:49:10,880",
				"to": "00:49:19,480"
			},
			"offsets": {
				"from": 2950880,
				"to": 2959480
			},
			"text": " However, if you put-- if the pre-conditions are too restrictive and your function reverts"
		},
		{
			"timestamps": {
				"from": "00:49:19,480",
				"to": "00:49:25,000"
			},
			"offsets": {
				"from": 2959480,
				"to": 2965000
			},
			"text": " most of the time, it means like you're not going to get value from the execution."
		},
		{
			"timestamps": {
				"from": "00:49:25,000",
				"to": "00:49:31,280"
			},
			"offsets": {
				"from": 2965000,
				"to": 2971280
			},
			"text": " So every execution reverted in a test, in an invariant, let's say, that every case that"
		},
		{
			"timestamps": {
				"from": "00:49:31,280",
				"to": "00:49:40,040"
			},
			"offsets": {
				"from": 2971280,
				"to": 2980040
			},
			"text": " you don't use, it's going to be an execution that you waste."
		},
		{
			"timestamps": {
				"from": "00:49:40,040",
				"to": "00:49:46,680"
			},
			"offsets": {
				"from": 2980040,
				"to": 2986680
			},
			"text": " So in this case, you only waste one execution in a range of-- in the full range of U-ins"
		},
		{
			"timestamps": {
				"from": "00:49:46,680",
				"to": "00:49:47,680"
			},
			"offsets": {
				"from": 2986680,
				"to": 2987680
			},
			"text": " 256."
		},
		{
			"timestamps": {
				"from": "00:49:47,680",
				"to": "00:49:49,440"
			},
			"offsets": {
				"from": 2987680,
				"to": 2989440
			},
			"text": " So it's not a big deal."
		},
		{
			"timestamps": {
				"from": "00:49:49,440",
				"to": "00:49:56,520"
			},
			"offsets": {
				"from": 2989440,
				"to": 2996520
			},
			"text": " But if you have-- if you put a lot of requires that only a very small amount of values will"
		},
		{
			"timestamps": {
				"from": "00:49:56,520",
				"to": "00:50:02,640"
			},
			"offsets": {
				"from": 2996520,
				"to": 3002640
			},
			"text": " satisfy it and it will be difficult to get randomly or even with the techniques that"
		},
		{
			"timestamps": {
				"from": "00:50:02,640",
				"to": "00:50:05,800"
			},
			"offsets": {
				"from": 3002640,
				"to": 3005800
			},
			"text": " we use, you will need a slightly different approach."
		},
		{
			"timestamps": {
				"from": "00:50:05,800",
				"to": "00:50:09,440"
			},
			"offsets": {
				"from": 3005800,
				"to": 3009440
			},
			"text": " But yeah, we will then go later into that."
		},
		{
			"timestamps": {
				"from": "00:50:09,440",
				"to": "00:50:11,440"
			},
			"offsets": {
				"from": 3009440,
				"to": 3011440
			},
			"text": " So any questions?"
		},
		{
			"timestamps": {
				"from": "00:50:11,440",
				"to": "00:50:12,440"
			},
			"offsets": {
				"from": 3011440,
				"to": 3012440
			},
			"text": " Yes."
		},
		{
			"timestamps": {
				"from": "00:50:12,440",
				"to": "00:50:23,680"
			},
			"offsets": {
				"from": 3012440,
				"to": 3023680
			},
			"text": " Yeah, so as you mentioned, in this case that we are basically sacrificing only one case,"
		},
		{
			"timestamps": {
				"from": "00:50:23,680",
				"to": "00:50:25,680"
			},
			"offsets": {
				"from": 3023680,
				"to": 3025680
			},
			"text": " which is when it's zero."
		},
		{
			"timestamps": {
				"from": "00:50:25,680",
				"to": "00:50:30,760"
			},
			"offsets": {
				"from": 3025680,
				"to": 3030760
			},
			"text": " But is it going to run over the whole range of U-N256 because that's a really large range"
		},
		{
			"timestamps": {
				"from": "00:50:30,760",
				"to": "00:50:34,160"
			},
			"offsets": {
				"from": 3030760,
				"to": 3034160
			},
			"text": " in and it doesn't make sense to test all of that in some cases?"
		},
		{
			"timestamps": {
				"from": "00:50:34,160",
				"to": "00:50:35,160"
			},
			"offsets": {
				"from": 3034160,
				"to": 3035160
			},
			"text": " Yeah, exactly."
		},
		{
			"timestamps": {
				"from": "00:50:35,160",
				"to": "00:50:42,600"
			},
			"offsets": {
				"from": 3035160,
				"to": 3042600
			},
			"text": " So there is no tool in the world that can run for all the range."
		},
		{
			"timestamps": {
				"from": "00:50:42,600",
				"to": "00:50:46,520"
			},
			"offsets": {
				"from": 3042600,
				"to": 3046520
			},
			"text": " It is always either symbolic."
		},
		{
			"timestamps": {
				"from": "00:50:46,520",
				"to": "00:50:51,200"
			},
			"offsets": {
				"from": 3046520,
				"to": 3051200
			},
			"text": " I mean, you can do it symbolically, but it's not going to test all the values."
		},
		{
			"timestamps": {
				"from": "00:50:51,200",
				"to": "00:50:53,960"
			},
			"offsets": {
				"from": 3051200,
				"to": 3053960
			},
			"text": " It's another thing."
		},
		{
			"timestamps": {
				"from": "00:50:53,960",
				"to": "00:51:03,160"
			},
			"offsets": {
				"from": 3053960,
				"to": 3063160
			},
			"text": " And fastened techniques are going to sample, let's say, randomly from the input or with hubs."
		},
		{
			"timestamps": {
				"from": "00:51:03,160",
				"to": "00:51:09,720"
			},
			"offsets": {
				"from": 3063160,
				"to": 3069720
			},
			"text": " In the case of a kidney, since we are going to compile this code and it will run through"
		},
		{
			"timestamps": {
				"from": "00:51:09,720",
				"to": "00:51:14,560"
			},
			"offsets": {
				"from": 3069720,
				"to": 3074560
			},
			"text": " or study analyzer, we will detect some interesting values."
		},
		{
			"timestamps": {
				"from": "00:51:14,560",
				"to": "00:51:17,840"
			},
			"offsets": {
				"from": 3074560,
				"to": 3077840
			},
			"text": " In this case, 10, for instance."
		},
		{
			"timestamps": {
				"from": "00:51:17,840",
				"to": "00:51:20,360"
			},
			"offsets": {
				"from": 3077840,
				"to": 3080360
			},
			"text": " 10 is an interesting value there."
		},
		{
			"timestamps": {
				"from": "00:51:20,360",
				"to": "00:51:23,520"
			},
			"offsets": {
				"from": 3080360,
				"to": 3083520
			},
			"text": " It's a constant and it's going to be used somewhere."
		},
		{
			"timestamps": {
				"from": "00:51:23,520",
				"to": "00:51:26,920"
			},
			"offsets": {
				"from": 3083520,
				"to": 3086920
			},
			"text": " So definitely we want to test with that constant."
		},
		{
			"timestamps": {
				"from": "00:51:26,920",
				"to": "00:51:31,320"
			},
			"offsets": {
				"from": 3086920,
				"to": 3091320
			},
			"text": " Okay, so let's see what happens if you run."
		},
		{
			"timestamps": {
				"from": "00:51:31,320",
				"to": "00:51:36,280"
			},
			"offsets": {
				"from": 3091320,
				"to": 3096280
			},
			"text": " So again, it will run a number of transactions."
		},
		{
			"timestamps": {
				"from": "00:51:36,280",
				"to": "00:51:41,560"
			},
			"offsets": {
				"from": 3096280,
				"to": 3101560
			},
			"text": " It will eventually detect that a certain free token has an assertion failure."
		},
		{
			"timestamps": {
				"from": "00:51:41,560",
				"to": "00:51:47,040"
			},
			"offsets": {
				"from": 3101560,
				"to": 3107040
			},
			"text": " However, this is going to be in a context of 100 of transactions, random transactions,"
		},
		{
			"timestamps": {
				"from": "00:51:47,040",
				"to": "00:51:51,320"
			},
			"offsets": {
				"from": 3107040,
				"to": 3111320
			},
			"text": " that perhaps will do something that is completely unrelated."
		},
		{
			"timestamps": {
				"from": "00:51:51,320",
				"to": "00:51:53,600"
			},
			"offsets": {
				"from": 3111320,
				"to": 3113600
			},
			"text": " But what we'll do is input-mimization."
		},
		{
			"timestamps": {
				"from": "00:51:53,600",
				"to": "00:52:03,440"
			},
			"offsets": {
				"from": 3113600,
				"to": 3123440
			},
			"text": " The very old technique refers to testing in which you have a list of bytes that affects"
		},
		{
			"timestamps": {
				"from": "00:52:03,440",
				"to": "00:52:05,000"
			},
			"offsets": {
				"from": 3123440,
				"to": 3125000
			},
			"text": " a bug."
		},
		{
			"timestamps": {
				"from": "00:52:05,000",
				"to": "00:52:15,760"
			},
			"offsets": {
				"from": 3125000,
				"to": 3135760
			},
			"text": " You want to remove that bytes one by one or in some random way in order to get a list"
		},
		{
			"timestamps": {
				"from": "00:52:15,760",
				"to": "00:52:22,280"
			},
			"offsets": {
				"from": 3135760,
				"to": 3142280
			},
			"text": " of bytes that will still trigger the bug, but it's going to be minimal or either a local"
		},
		{
			"timestamps": {
				"from": "00:52:22,280",
				"to": "00:52:25,800"
			},
			"offsets": {
				"from": 3142280,
				"to": 3145800
			},
			"text": " or a global minimal depending on the type of tool that you're using."
		},
		{
			"timestamps": {
				"from": "00:52:25,800",
				"to": "00:52:33,480"
			},
			"offsets": {
				"from": 3145800,
				"to": 3153480
			},
			"text": " So in this case, we can, I think that we'll try to minimize any parameter."
		},
		{
			"timestamps": {
				"from": "00:52:33,480",
				"to": "00:52:38,800"
			},
			"offsets": {
				"from": 3153480,
				"to": 3158800
			},
			"text": " Here we have only one parameter and the parameter is actually going to be useful triggering"
		},
		{
			"timestamps": {
				"from": "00:52:38,800",
				"to": "00:52:39,800"
			},
			"offsets": {
				"from": 3158800,
				"to": 3159800
			},
			"text": " the bug."
		},
		{
			"timestamps": {
				"from": "00:52:39,800",
				"to": "00:52:44,040"
			},
			"offsets": {
				"from": 3159800,
				"to": 3164040
			},
			"text": " If we have more parameters, they are going to be minimized towards zero."
		},
		{
			"timestamps": {
				"from": "00:52:44,040",
				"to": "00:52:52,560"
			},
			"offsets": {
				"from": 3164040,
				"to": 3172560
			},
			"text": " So if you have U-ins, then it will be reduced until zero, so zero is the simplest value."
		},
		{
			"timestamps": {
				"from": "00:52:52,560",
				"to": "00:52:55,600"
			},
			"offsets": {
				"from": 3172560,
				"to": 3175600
			},
			"text": " This is arbitrary to find on the code."
		},
		{
			"timestamps": {
				"from": "00:52:55,600",
				"to": "00:52:58,360"
			},
			"offsets": {
				"from": 3175600,
				"to": 3178360
			},
			"text": " You can change it if you want."
		},
		{
			"timestamps": {
				"from": "00:52:58,360",
				"to": "00:53:02,680"
			},
			"offsets": {
				"from": 3178360,
				"to": 3182680
			},
			"text": " But in this case, the parameter cannot be zero, because if it's zero, the test will"
		},
		{
			"timestamps": {
				"from": "00:53:02,680",
				"to": "00:53:03,840"
			},
			"offsets": {
				"from": 3182680,
				"to": 3183840
			},
			"text": " pass."
		},
		{
			"timestamps": {
				"from": "00:53:03,840",
				"to": "00:53:05,360"
			},
			"offsets": {
				"from": 3183840,
				"to": 3185360
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:53:05,360",
				"to": "00:53:07,840"
			},
			"offsets": {
				"from": 3185360,
				"to": 3187840
			},
			"text": " So in this case, the minimal amount is one."
		},
		{
			"timestamps": {
				"from": "00:53:07,840",
				"to": "00:53:15,920"
			},
			"offsets": {
				"from": 3187840,
				"to": 3195920
			},
			"text": " It's not guaranteed that you will always get this smallest set list of transactions to trigger."
		},
		{
			"timestamps": {
				"from": "00:53:15,920",
				"to": "00:53:19,720"
			},
			"offsets": {
				"from": 3195920,
				"to": 3199720
			},
			"text": " This is an MP complete problem."
		},
		{
			"timestamps": {
				"from": "00:53:19,720",
				"to": "00:53:25,200"
			},
			"offsets": {
				"from": 3199720,
				"to": 3205200
			},
			"text": " It cannot be solved on linear times, so it's all going to be always a sample."
		},
		{
			"timestamps": {
				"from": "00:53:25,200",
				"to": "00:53:31,600"
			},
			"offsets": {
				"from": 3205200,
				"to": 3211600
			},
			"text": " But in practice, even randomly sampling, removing transactions or reducing the complexity of"
		},
		{
			"timestamps": {
				"from": "00:53:31,600",
				"to": "00:53:35,360"
			},
			"offsets": {
				"from": 3211600,
				"to": 3215360
			},
			"text": " each value will give you good answers."
		},
		{
			"timestamps": {
				"from": "00:53:35,360",
				"to": "00:53:36,600"
			},
			"offsets": {
				"from": 3215360,
				"to": 3216600
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "00:53:36,600",
				"to": "00:53:39,000"
			},
			"offsets": {
				"from": 3216600,
				"to": 3219000
			},
			"text": " So a little bit about the API."
		},
		{
			"timestamps": {
				"from": "00:53:39,000",
				"to": "00:53:45,120"
			},
			"offsets": {
				"from": 3219000,
				"to": 3225120
			},
			"text": " Maybe we can just explain why it's happening."
		},
		{
			"timestamps": {
				"from": "00:53:45,120",
				"to": "00:53:46,120"
			},
			"offsets": {
				"from": 3225120,
				"to": 3226120
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:53:46,120",
				"to": "00:53:47,120"
			},
			"offsets": {
				"from": 3226120,
				"to": 3227120
			},
			"text": " Sorry."
		},
		{
			"timestamps": {
				"from": "00:53:47,120",
				"to": "00:53:48,120"
			},
			"offsets": {
				"from": 3227120,
				"to": 3228120
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:53:48,120",
				"to": "00:53:55,680"
			},
			"offsets": {
				"from": 3228120,
				"to": 3235680
			},
			"text": " So the issue here is that if you send one desired token, what's going to happen is that"
		},
		{
			"timestamps": {
				"from": "00:53:55,680",
				"to": "00:54:02,480"
			},
			"offsets": {
				"from": 3235680,
				"to": 3242480
			},
			"text": " you do one divided by 10 and one divided by 10 is zero, because you are winding down."
		},
		{
			"timestamps": {
				"from": "00:54:02,480",
				"to": "00:54:06,640"
			},
			"offsets": {
				"from": 3242480,
				"to": 3246640
			},
			"text": " And other results require a amount to be sent is zero."
		},
		{
			"timestamps": {
				"from": "00:54:06,640",
				"to": "00:54:11,960"
			},
			"offsets": {
				"from": 3246640,
				"to": 3251960
			},
			"text": " So if you ask any number of tokens below 10, you are going to get them for free."
		},
		{
			"timestamps": {
				"from": "00:54:11,960",
				"to": "00:54:15,000"
			},
			"offsets": {
				"from": 3251960,
				"to": 3255000
			},
			"text": " And this is, again, an example where we define an invariant."
		},
		{
			"timestamps": {
				"from": "00:54:15,000",
				"to": "00:54:17,200"
			},
			"offsets": {
				"from": 3255000,
				"to": 3257200
			},
			"text": " We don't actually look at the formula."
		},
		{
			"timestamps": {
				"from": "00:54:17,200",
				"to": "00:54:19,840"
			},
			"offsets": {
				"from": 3257200,
				"to": 3259840
			},
			"text": " We are not looking at how this formula works."
		},
		{
			"timestamps": {
				"from": "00:54:19,840",
				"to": "00:54:24,600"
			},
			"offsets": {
				"from": 3259840,
				"to": 3264600
			},
			"text": " We just define an invariant that if you don't send it there, you should receive no token."
		},
		{
			"timestamps": {
				"from": "00:54:24,600",
				"to": "00:54:28,240"
			},
			"offsets": {
				"from": 3264600,
				"to": 3268240
			},
			"text": " And by doing that, a cannot can find a arithmetic issue."
		},
		{
			"timestamps": {
				"from": "00:54:28,240",
				"to": "00:54:34,480"
			},
			"offsets": {
				"from": 3268240,
				"to": 3274480
			},
			"text": " But we are actually evenly using a cannot for winding for a mistake in the formula and"
		},
		{
			"timestamps": {
				"from": "00:54:34,480",
				"to": "00:54:35,480"
			},
			"offsets": {
				"from": 3274480,
				"to": 3275480
			},
			"text": " so on."
		},
		{
			"timestamps": {
				"from": "00:54:35,480",
				"to": "00:54:36,480"
			},
			"offsets": {
				"from": 3275480,
				"to": 3276480
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:54:36,480",
				"to": "00:54:37,480"
			},
			"offsets": {
				"from": 3276480,
				"to": 3277480
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:54:37,480",
				"to": "00:54:38,480"
			},
			"offsets": {
				"from": 3277480,
				"to": 3278480
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:54:38,480",
				"to": "00:54:43,400"
			},
			"offsets": {
				"from": 3278480,
				"to": 3283400
			},
			"text": " I get that this function is for testing purposes, but in a real situation, way sent is not part"
		},
		{
			"timestamps": {
				"from": "00:54:43,400",
				"to": "00:54:45,960"
			},
			"offsets": {
				"from": 3283400,
				"to": 3285960
			},
			"text": " of the thing that wrote the function, right?"
		},
		{
			"timestamps": {
				"from": "00:54:45,960",
				"to": "00:54:47,560"
			},
			"offsets": {
				"from": 3285960,
				"to": 3287560
			},
			"text": " You read that from the message."
		},
		{
			"timestamps": {
				"from": "00:54:47,560",
				"to": "00:54:48,560"
			},
			"offsets": {
				"from": 3287560,
				"to": 3288560
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:54:48,560",
				"to": "00:54:49,560"
			},
			"offsets": {
				"from": 3288560,
				"to": 3289560
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:54:49,560",
				"to": "00:54:51,040"
			},
			"offsets": {
				"from": 3289560,
				"to": 3291040
			},
			"text": " This would be like deeper into the code."
		},
		{
			"timestamps": {
				"from": "00:54:51,040",
				"to": "00:54:52,040"
			},
			"offsets": {
				"from": 3291040,
				"to": 3292040
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:54:52,040",
				"to": "00:54:53,040"
			},
			"offsets": {
				"from": 3292040,
				"to": 3293040
			},
			"text": " So how are you doing that?"
		},
		{
			"timestamps": {
				"from": "00:54:53,040",
				"to": "00:54:54,040"
			},
			"offsets": {
				"from": 3293040,
				"to": 3294040
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:54:54,040",
				"to": "00:54:55,800"
			},
			"offsets": {
				"from": 3294040,
				"to": 3295800
			},
			"text": " You read that into the asserting function."
		},
		{
			"timestamps": {
				"from": "00:54:55,800",
				"to": "00:54:56,800"
			},
			"offsets": {
				"from": 3295800,
				"to": 3296800
			},
			"text": " How did that?"
		},
		{
			"timestamps": {
				"from": "00:54:56,800",
				"to": "00:54:57,800"
			},
			"offsets": {
				"from": 3296800,
				"to": 3297800
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:54:57,800",
				"to": "00:55:04,920"
			},
			"offsets": {
				"from": 3297800,
				"to": 3304920
			},
			"text": " So if I understand it correctly, so this could be an internal part and you can have a lot"
		},
		{
			"timestamps": {
				"from": "00:55:04,920",
				"to": "00:55:10,880"
			},
			"offsets": {
				"from": 3304920,
				"to": 3310880
			},
			"text": " of code that would get the value from the message value and then do something else."
		},
		{
			"timestamps": {
				"from": "00:55:10,880",
				"to": "00:55:12,440"
			},
			"offsets": {
				"from": 3310880,
				"to": 3312440
			},
			"text": " I can do that."
		},
		{
			"timestamps": {
				"from": "00:55:12,440",
				"to": "00:55:13,440"
			},
			"offsets": {
				"from": 3312440,
				"to": 3313440
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:55:13,440",
				"to": "00:55:15,600"
			},
			"offsets": {
				"from": 3313440,
				"to": 3315600
			},
			"text": " I mean, is this depends on your code."
		},
		{
			"timestamps": {
				"from": "00:55:15,600",
				"to": "00:55:18,320"
			},
			"offsets": {
				"from": 3315600,
				"to": 3318320
			},
			"text": " Here, we are testing an internal function."
		},
		{
			"timestamps": {
				"from": "00:55:18,320",
				"to": "00:55:19,320"
			},
			"offsets": {
				"from": 3318320,
				"to": 3319320
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:55:19,320",
				"to": "00:55:22,160"
			},
			"offsets": {
				"from": 3319320,
				"to": 3322160
			},
			"text": " You see some defined."
		},
		{
			"timestamps": {
				"from": "00:55:22,160",
				"to": "00:55:23,160"
			},
			"offsets": {
				"from": 3322160,
				"to": 3323160
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:55:23,160",
				"to": "00:55:24,160"
			},
			"offsets": {
				"from": 3323160,
				"to": 3324160
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:55:24,160",
				"to": "00:55:28,400"
			},
			"offsets": {
				"from": 3324160,
				"to": 3328400
			},
			"text": " And if it was using message that value, I can also say that message."
		},
		{
			"timestamps": {
				"from": "00:55:28,400",
				"to": "00:55:29,400"
			},
			"offsets": {
				"from": 3328400,
				"to": 3329400
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:55:29,400",
				"to": "00:55:30,400"
			},
			"offsets": {
				"from": 3329400,
				"to": 3330400
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:55:30,400",
				"to": "00:55:31,400"
			},
			"offsets": {
				"from": 3330400,
				"to": 3331400
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:55:31,400",
				"to": "00:55:32,400"
			},
			"offsets": {
				"from": 3331400,
				"to": 3332400
			},
			"text": " Exactly."
		},
		{
			"timestamps": {
				"from": "00:55:32,400",
				"to": "00:55:33,400"
			},
			"offsets": {
				"from": 3332400,
				"to": 3333400
			},
			"text": " So yeah."
		},
		{
			"timestamps": {
				"from": "00:55:33,400",
				"to": "00:55:34,960"
			},
			"offsets": {
				"from": 3333400,
				"to": 3334960
			},
			"text": " So properties can also take value."
		},
		{
			"timestamps": {
				"from": "00:55:34,960",
				"to": "00:55:43,960"
			},
			"offsets": {
				"from": 3334960,
				"to": 3343960
			},
			"text": " So and if you have a constant in your code saying message value should be 42, 42, 42, it"
		},
		{
			"timestamps": {
				"from": "00:55:43,960",
				"to": "00:55:46,680"
			},
			"offsets": {
				"from": 3343960,
				"to": 3346680
			},
			"text": " will use that constant eventually."
		},
		{
			"timestamps": {
				"from": "00:55:46,680",
				"to": "00:55:53,240"
			},
			"offsets": {
				"from": 3346680,
				"to": 3353240
			},
			"text": " So you should be able to hit that particular case, giving the fact that this is random something"
		},
		{
			"timestamps": {
				"from": "00:55:53,240",
				"to": "00:55:59,360"
			},
			"offsets": {
				"from": 3353240,
				"to": 3359360
			},
			"text": " of course, but can you moving back to the previous slide is a function?"
		},
		{
			"timestamps": {
				"from": "00:55:59,360",
				"to": "00:56:07,320"
			},
			"offsets": {
				"from": 3359360,
				"to": 3367320
			},
			"text": " What I'm really wondering because we talk about this error, whoever talking last 10 is"
		},
		{
			"timestamps": {
				"from": "00:56:07,320",
				"to": "00:56:10,680"
			},
			"offsets": {
				"from": 3367320,
				"to": 3370680
			},
			"text": " so way less than it's so small amount."
		},
		{
			"timestamps": {
				"from": "00:56:10,680",
				"to": "00:56:14,280"
			},
			"offsets": {
				"from": 3370680,
				"to": 3374280
			},
			"text": " And the same problem which could be here is overflow."
		},
		{
			"timestamps": {
				"from": "00:56:14,280",
				"to": "00:56:20,080"
			},
			"offsets": {
				"from": 3374280,
				"to": 3380080
			},
			"text": " If I provide a huge amount of ease because we have a multiplication to decimals, it could"
		},
		{
			"timestamps": {
				"from": "00:56:20,080",
				"to": "00:56:21,080"
			},
			"offsets": {
				"from": 3380080,
				"to": 3381080
			},
			"text": " be done."
		},
		{
			"timestamps": {
				"from": "00:56:21,080",
				"to": "00:56:28,520"
			},
			"offsets": {
				"from": 3381080,
				"to": 3388520
			},
			"text": " On the other side, we all of us know that the quantity of us is limited."
		},
		{
			"timestamps": {
				"from": "00:56:28,520",
				"to": "00:56:32,840"
			},
			"offsets": {
				"from": 3388520,
				"to": 3392840
			},
			"text": " You can't even take a flash loan and get more ease than it produced."
		},
		{
			"timestamps": {
				"from": "00:56:32,840",
				"to": "00:56:38,840"
			},
			"offsets": {
				"from": 3392840,
				"to": 3398840
			},
			"text": " So what is the best practice follows this formal execution when you write a passing test"
		},
		{
			"timestamps": {
				"from": "00:56:38,840",
				"to": "00:56:46,400"
			},
			"offsets": {
				"from": 3398840,
				"to": 3406400
			},
			"text": " or take some real examples as limitations as there is no match as zero as it exists at"
		},
		{
			"timestamps": {
				"from": "00:56:46,400",
				"to": "00:56:52,520"
			},
			"offsets": {
				"from": 3406400,
				"to": 3412520
			},
			"text": " the moment and we know it's a deflation so we can simply assume that in the future nobody"
		},
		{
			"timestamps": {
				"from": "00:56:52,520",
				"to": "00:56:55,040"
			},
			"offsets": {
				"from": 3412520,
				"to": 3415040
			},
			"text": " could take so much to get overflow here."
		},
		{
			"timestamps": {
				"from": "00:56:55,040",
				"to": "00:56:56,040"
			},
			"offsets": {
				"from": 3415040,
				"to": 3416040
			},
			"text": " Yeah, exactly."
		},
		{
			"timestamps": {
				"from": "00:56:56,040",
				"to": "00:57:02,440"
			},
			"offsets": {
				"from": 3416040,
				"to": 3422440
			},
			"text": " So this is an interesting question and it goes into the fact that what are your assumptions"
		},
		{
			"timestamps": {
				"from": "00:57:02,440",
				"to": "00:57:04,200"
			},
			"offsets": {
				"from": 3422440,
				"to": 3424200
			},
			"text": " on the test?"
		},
		{
			"timestamps": {
				"from": "00:57:04,200",
				"to": "00:57:09,840"
			},
			"offsets": {
				"from": 3424200,
				"to": 3429840
			},
			"text": " If your assumptions are like I have this token with this limited supply that should never"
		},
		{
			"timestamps": {
				"from": "00:57:09,840",
				"to": "00:57:17,480"
			},
			"offsets": {
				"from": 3429840,
				"to": 3437480
			},
			"text": " go over something, then you can just say I require that the value sent cannot be more"
		},
		{
			"timestamps": {
				"from": "00:57:17,480",
				"to": "00:57:20,240"
			},
			"offsets": {
				"from": 3437480,
				"to": 3440240
			},
			"text": " than the total supply of something."
		},
		{
			"timestamps": {
				"from": "00:57:20,240",
				"to": "00:57:28,200"
			},
			"offsets": {
				"from": 3440240,
				"to": 3448200
			},
			"text": " But in the case of Eater is a bit more tricky and in fact in a kidney what we do is we have"
		},
		{
			"timestamps": {
				"from": "00:57:28,200",
				"to": "00:57:30,720"
			},
			"offsets": {
				"from": 3448200,
				"to": 3450720
			},
			"text": " externally on accounts that are simulated."
		},
		{
			"timestamps": {
				"from": "00:57:30,720",
				"to": "00:57:36,080"
			},
			"offsets": {
				"from": 3450720,
				"to": 3456080
			},
			"text": " We load it with Eater at every transaction because you can have a very large amount of"
		},
		{
			"timestamps": {
				"from": "00:57:36,080",
				"to": "00:57:45,520"
			},
			"offsets": {
				"from": 3456080,
				"to": 3465520
			},
			"text": " Eater you can take a flash loan, you probably cannot have enough Eater to overflow you into"
		},
		{
			"timestamps": {
				"from": "00:57:45,520",
				"to": "00:57:56,200"
			},
			"offsets": {
				"from": 3465520,
				"to": 3476200
			},
			"text": " 256 because that will be a real issue for the avian in itself but we can define in the"
		},
		{
			"timestamps": {
				"from": "00:57:56,200",
				"to": "00:58:02,240"
			},
			"offsets": {
				"from": 3476200,
				"to": 3482240
			},
			"text": " kidney config which is the maximum amount of value that we sent per transaction."
		},
		{
			"timestamps": {
				"from": "00:58:02,240",
				"to": "00:58:08,640"
			},
			"offsets": {
				"from": 3482240,
				"to": 3488640
			},
			"text": " So if you put like I don't care if the attacker has more than 10,000 Eater because that will"
		},
		{
			"timestamps": {
				"from": "00:58:08,640",
				"to": "00:58:14,960"
			},
			"offsets": {
				"from": 3488640,
				"to": 3494960
			},
			"text": " mean that they can do other things then a kidney will happily take that limit and will"
		},
		{
			"timestamps": {
				"from": "00:58:14,960",
				"to": "00:58:16,920"
			},
			"offsets": {
				"from": 3494960,
				"to": 3496920
			},
			"text": " never put something more."
		},
		{
			"timestamps": {
				"from": "00:58:16,920",
				"to": "00:58:22,480"
			},
			"offsets": {
				"from": 3496920,
				"to": 3502480
			},
			"text": " However it's still the case that over several number of transactions the accumulate number"
		},
		{
			"timestamps": {
				"from": "00:58:22,480",
				"to": "00:58:26,880"
			},
			"offsets": {
				"from": 3502480,
				"to": 3506880
			},
			"text": " of Eater can go over that value so you should be careful with it."
		},
		{
			"timestamps": {
				"from": "00:58:26,880",
				"to": "00:58:29,480"
			},
			"offsets": {
				"from": 3506880,
				"to": 3509480
			},
			"text": " And there is also an approach that you can take here."
		},
		{
			"timestamps": {
				"from": "00:58:29,480",
				"to": "00:58:35,760"
			},
			"offsets": {
				"from": 3509480,
				"to": 3515760
			},
			"text": " So basically you are building an invariant and the invariant as a switch out like a value."
		},
		{
			"timestamps": {
				"from": "00:58:35,760",
				"to": "00:58:42,400"
			},
			"offsets": {
				"from": 3515760,
				"to": 3522400
			},
			"text": " So as you start where the invariant has really limited three-third like really with train"
		},
		{
			"timestamps": {
				"from": "00:58:42,400",
				"to": "00:58:44,840"
			},
			"offsets": {
				"from": 3522400,
				"to": 3524840
			},
			"text": " one and you try to see if it's odd."
		},
		{
			"timestamps": {
				"from": "00:58:44,840",
				"to": "00:58:48,960"
			},
			"offsets": {
				"from": 3524840,
				"to": 3528960
			},
			"text": " If it's breaking with like you know like with one Eater okay it's already working so you"
		},
		{
			"timestamps": {
				"from": "00:58:48,960",
				"to": "00:58:50,160"
			},
			"offsets": {
				"from": 3528960,
				"to": 3530160
			},
			"text": " can continue like this."
		},
		{
			"timestamps": {
				"from": "00:58:50,160",
				"to": "00:58:53,400"
			},
			"offsets": {
				"from": 3530160,
				"to": 3533400
			},
			"text": " If it's not breaking then you can increase the switch out from time to time."
		},
		{
			"timestamps": {
				"from": "00:58:53,400",
				"to": "00:58:57,840"
			},
			"offsets": {
				"from": 3533400,
				"to": 3537840
			},
			"text": " Or you can take the opposite approach you define an invariant where the three-third is really"
		},
		{
			"timestamps": {
				"from": "00:58:57,840",
				"to": "00:59:02,520"
			},
			"offsets": {
				"from": 3537840,
				"to": 3542520
			},
			"text": " large it's breaking because it's really large and then you decrease the switch with all."
		},
		{
			"timestamps": {
				"from": "00:59:02,520",
				"to": "00:59:07,400"
			},
			"offsets": {
				"from": 3542520,
				"to": 3547400
			},
			"text": " So as you start really limited and you know depending on the result you remove the limitation"
		},
		{
			"timestamps": {
				"from": "00:59:07,400",
				"to": "00:59:13,640"
			},
			"offsets": {
				"from": 3547400,
				"to": 3553640
			},
			"text": " or you start without limitation and you reduce up to the point where you have kind of like"
		},
		{
			"timestamps": {
				"from": "00:59:13,640",
				"to": "00:59:16,560"
			},
			"offsets": {
				"from": 3553640,
				"to": 3556560
			},
			"text": " a value for which you feel comfortable with."
		},
		{
			"timestamps": {
				"from": "00:59:16,560",
				"to": "00:59:21,480"
			},
			"offsets": {
				"from": 3556560,
				"to": 3561480
			},
			"text": " Yeah and that is also related with the fact that do we want to have false positives or"
		},
		{
			"timestamps": {
				"from": "00:59:21,480",
				"to": "00:59:22,480"
			},
			"offsets": {
				"from": 3561480,
				"to": 3562480
			},
			"text": " false negatives?"
		},
		{
			"timestamps": {
				"from": "00:59:22,480",
				"to": "00:59:23,720"
			},
			"offsets": {
				"from": 3562480,
				"to": 3563720
			},
			"text": " What is the risk?"
		},
		{
			"timestamps": {
				"from": "00:59:23,720",
				"to": "00:59:29,240"
			},
			"offsets": {
				"from": 3563720,
				"to": 3569240
			},
			"text": " If we start with very large values we could have false positives but and if we start with"
		},
		{
			"timestamps": {
				"from": "00:59:29,240",
				"to": "00:59:34,080"
			},
			"offsets": {
				"from": 3569240,
				"to": 3574080
			},
			"text": " very small values we could have a false negative but which are the ones that are going to cause"
		},
		{
			"timestamps": {
				"from": "00:59:34,080",
				"to": "00:59:35,480"
			},
			"offsets": {
				"from": 3574080,
				"to": 3575480
			},
			"text": " you more trouble."
		},
		{
			"timestamps": {
				"from": "00:59:35,480",
				"to": "00:59:41,640"
			},
			"offsets": {
				"from": 3575480,
				"to": 3581640
			},
			"text": " That is something to think about it because if you miss one's false positive your protocol"
		},
		{
			"timestamps": {
				"from": "00:59:41,640",
				"to": "00:59:49,000"
			},
			"offsets": {
				"from": 3581640,
				"to": 3589000
			},
			"text": " can be you know destroyed and if you miss one false negative then it's going to be okay."
		},
		{
			"timestamps": {
				"from": "00:59:49,000",
				"to": "00:59:50,000"
			},
			"offsets": {
				"from": 3589000,
				"to": 3590000
			},
			"text": " Alright."
		},
		{
			"timestamps": {
				"from": "00:59:50,000",
				"to": "00:59:57,880"
			},
			"offsets": {
				"from": 3590000,
				"to": 3597880
			},
			"text": " Hey there in terms of fuzzing mutation do you do any clever things like say this function"
		},
		{
			"timestamps": {
				"from": "00:59:57,880",
				"to": "01:00:05,880"
			},
			"offsets": {
				"from": 3597880,
				"to": 3605880
			},
			"text": " has a constant of 10 so would you then see the constants in the function and use that"
		},
		{
			"timestamps": {
				"from": "01:00:05,880",
				"to": "01:00:06,880"
			},
			"offsets": {
				"from": 3605880,
				"to": 3606880
			},
			"text": " as input?"
		},
		{
			"timestamps": {
				"from": "01:00:06,880",
				"to": "01:00:11,080"
			},
			"offsets": {
				"from": 3606880,
				"to": 3611080
			},
			"text": " Yeah we will use a constant from the function and we will first unwound the constant also."
		},
		{
			"timestamps": {
				"from": "01:00:11,080",
				"to": "01:00:16,560"
			},
			"offsets": {
				"from": 3611080,
				"to": 3616560
			},
			"text": " Like if you see 10 we are going to use 10 we are going to use 9, 11 you know like our"
		},
		{
			"timestamps": {
				"from": "01:00:16,560",
				"to": "01:00:17,560"
			},
			"offsets": {
				"from": 3616560,
				"to": 3617560
			},
			"text": " round."
		},
		{
			"timestamps": {
				"from": "01:00:17,560",
				"to": "01:00:27,560"
			},
			"offsets": {
				"from": 3617560,
				"to": 3627560
			},
			"text": " Yes there are some techniques I can show you a little bit after a few lines of the code"
		},
		{
			"timestamps": {
				"from": "01:00:27,560",
				"to": "01:00:32,560"
			},
			"offsets": {
				"from": 3627560,
				"to": 3632560
			},
			"text": " of a candidate that shows all the mutations we have mutation interesting mutations on"
		},
		{
			"timestamps": {
				"from": "01:00:32,560",
				"to": "01:00:41,320"
			},
			"offsets": {
				"from": 3632560,
				"to": 3641320
			},
			"text": " the list of transactions in which we shuffle we do like splice as well so we take a list"
		},
		{
			"timestamps": {
				"from": "01:00:41,320",
				"to": "01:00:46,640"
			},
			"offsets": {
				"from": 3641320,
				"to": 3646640
			},
			"text": " of interest transaction and another one and splice it in a random position so there are"
		},
		{
			"timestamps": {
				"from": "01:00:46,640",
				"to": "01:00:53,920"
			},
			"offsets": {
				"from": 3646640,
				"to": 3653920
			},
			"text": " a couple of fun things to look at but yeah I think we should move on a little bit alright."
		},
		{
			"timestamps": {
				"from": "01:00:53,920",
				"to": "01:01:02,560"
			},
			"offsets": {
				"from": 3653920,
				"to": 3662560
			},
			"text": " So as I was saying we have this failing even if you don't understand what is the failure"
		},
		{
			"timestamps": {
				"from": "01:01:02,560",
				"to": "01:01:13,560"
			},
			"offsets": {
				"from": 3662560,
				"to": 3673560
			},
			"text": " well that is a different beast sometimes you put your invariant and your invariant fails"
		},
		{
			"timestamps": {
				"from": "01:01:13,560",
				"to": "01:01:19,120"
			},
			"offsets": {
				"from": 3673560,
				"to": 3679120
			},
			"text": " and then you start the journey to understand why it fails so that's we are not going to"
		},
		{
			"timestamps": {
				"from": "01:01:19,120",
				"to": "01:01:28,800"
			},
			"offsets": {
				"from": 3679120,
				"to": 3688800
			},
			"text": " talk about that you some people like to re-run the failure into a unit test to make sure"
		},
		{
			"timestamps": {
				"from": "01:01:28,800",
				"to": "01:01:35,240"
			},
			"offsets": {
				"from": 3688800,
				"to": 3695240
			},
			"text": " step by step what is going on but yeah that's a completely different type of beast that"
		},
		{
			"timestamps": {
				"from": "01:01:35,240",
				"to": "01:01:41,560"
			},
			"offsets": {
				"from": 3695240,
				"to": 3701560
			},
			"text": " is related with what happened after and how we can fix how we can fixation."
		},
		{
			"timestamps": {
				"from": "01:01:41,560",
				"to": "01:01:50,920"
			},
			"offsets": {
				"from": 3701560,
				"to": 3710920
			},
			"text": " Alright so a little bit about akin API this is a topic that it's still an open deviant"
		},
		{
			"timestamps": {
				"from": "01:01:50,920",
				"to": "01:01:57,400"
			},
			"offsets": {
				"from": 3710920,
				"to": 3717400
			},
			"text": " in some cases so what are the best ways to test to create properties so akin to support"
		},
		{
			"timestamps": {
				"from": "01:01:57,400",
				"to": "01:02:05,400"
			},
			"offsets": {
				"from": 3717400,
				"to": 3725400
			},
			"text": " a couple of different ones it's about Boolean properties in which a function is executed"
		},
		{
			"timestamps": {
				"from": "01:02:05,400",
				"to": "01:02:12,480"
			},
			"offsets": {
				"from": 3725400,
				"to": 3732480
			},
			"text": " and then it should return a Boolean to a false and if the function reverts for any reason"
		},
		{
			"timestamps": {
				"from": "01:02:12,480",
				"to": "01:02:20,040"
			},
			"offsets": {
				"from": 3732480,
				"to": 3740040
			},
			"text": " that is the same as returning false right so if we go back a little bit we can see whether"
		},
		{
			"timestamps": {
				"from": "01:02:20,040",
				"to": "01:02:26,120"
			},
			"offsets": {
				"from": 3740040,
				"to": 3746120
			},
			"text": " error unrecognized opcode that is going that is related with the assertion failure that"
		},
		{
			"timestamps": {
				"from": "01:02:26,120",
				"to": "01:02:37,160"
			},
			"offsets": {
				"from": 3746120,
				"to": 3757160
			},
			"text": " is how the assertion of slowly used to have these assertion failures but if you use Boolean"
		},
		{
			"timestamps": {
				"from": "01:02:37,160",
				"to": "01:02:43,720"
			},
			"offsets": {
				"from": 3757160,
				"to": 3763720
			},
			"text": " you will just say return false right so you know exactly how the property fail or it could"
		},
		{
			"timestamps": {
				"from": "01:02:43,720",
				"to": "01:02:50,840"
			},
			"offsets": {
				"from": 3763720,
				"to": 3770840
			},
			"text": " be a revert so you say over there you see whether it revert okay so either you do Boolean properties"
		},
		{
			"timestamps": {
				"from": "01:02:50,840",
				"to": "01:02:58,920"
			},
			"offsets": {
				"from": 3770840,
				"to": 3778920
			},
			"text": " which are the classic way to define invariance and this come from some some very old techniques"
		},
		{
			"timestamps": {
				"from": "01:02:58,920",
				"to": "01:03:05,000"
			},
			"offsets": {
				"from": 3778920,
				"to": 3785000
			},
			"text": " in particular quick check which is which is a property based testing tool for Haskell and"
		},
		{
			"timestamps": {
				"from": "01:03:05,000",
				"to": "01:03:12,520"
			},
			"offsets": {
				"from": 3785000,
				"to": 3792520
			},
			"text": " a couple of other languages which was an inspiration for for for this then you have assertion failure"
		},
		{
			"timestamps": {
				"from": "01:03:12,520",
				"to": "01:03:21,720"
			},
			"offsets": {
				"from": 3792520,
				"to": 3801720
			},
			"text": " so every time you see every time the the assertion is called with false that is that will fail"
		},
		{
			"timestamps": {
				"from": "01:03:21,720",
				"to": "01:03:28,120"
			},
			"offsets": {
				"from": 3801720,
				"to": 3808120
			},
			"text": " however if in the context of your function you see a revert that will not make the function"
		},
		{
			"timestamps": {
				"from": "01:03:28,120",
				"to": "01:03:38,840"
			},
			"offsets": {
				"from": 3808120,
				"to": 3818840
			},
			"text": " the wv fail here we can see that if valid by reverts then the this I cannot will not report that"
		},
		{
			"timestamps": {
				"from": "01:03:38,840",
				"to": "01:03:46,360"
			},
			"offsets": {
				"from": 3818840,
				"to": 3826360
			},
			"text": " because we are using assertion mode right so you you should be careful if you are using if you"
		},
		{
			"timestamps": {
				"from": "01:03:46,360",
				"to": "01:03:55,960"
			},
			"offsets": {
				"from": 3826360,
				"to": 3835960
			},
			"text": " if you care about reverts you should have to either use the the type of the Boolean type"
		},
		{
			"timestamps": {
				"from": "01:03:55,960",
				"to": "01:04:01,560"
			},
			"offsets": {
				"from": 3835960,
				"to": 3841560
			},
			"text": " or what you can do is if you care about reverts in ballot by and if it's an external function"
		},
		{
			"timestamps": {
				"from": "01:04:01,560",
				"to": "01:04:05,960"
			},
			"offsets": {
				"from": 3841560,
				"to": 3845960
			},
			"text": " you can do a try and catch and you can check with type of reverts and you can even"
		},
		{
			"timestamps": {
				"from": "01:04:06,600",
				"to": "01:04:11,800"
			},
			"offsets": {
				"from": 3846600,
				"to": 3851800
			},
			"text": " think in some type of reverts and not in order because you want the user to get a good message"
		},
		{
			"timestamps": {
				"from": "01:04:11,800",
				"to": "01:04:19,160"
			},
			"offsets": {
				"from": 3851800,
				"to": 3859160
			},
			"text": " of of revert and perhaps other type of reverse you don't you you want to know so and finally we"
		},
		{
			"timestamps": {
				"from": "01:04:19,160",
				"to": "01:04:28,600"
			},
			"offsets": {
				"from": 3859160,
				"to": 3868600
			},
			"text": " have the app and foundry api in which you will you will have a function that if it reverts"
		},
		{
			"timestamps": {
				"from": "01:04:30,280",
				"to": "01:04:35,560"
			},
			"offsets": {
				"from": 3870280,
				"to": 3875560
			},
			"text": " it's going to it's going to fail and otherwise it's not and I hope the foundry team"
		},
		{
			"timestamps": {
				"from": "01:04:35,560",
				"to": "01:04:43,320"
			},
			"offsets": {
				"from": 3875560,
				"to": 3883320
			},
			"text": " agree with us and it's it's currently implemented all right so there is testing modes"
		},
		{
			"timestamps": {
				"from": "01:04:43,320",
				"to": "01:04:52,920"
			},
			"offsets": {
				"from": 3883320,
				"to": 3892920
			},
			"text": " in the in the inner repository so we can you can go there and it's explain a little bit more"
		},
		{
			"timestamps": {
				"from": "01:04:53,480",
				"to": "01:05:01,240"
			},
			"offsets": {
				"from": 3893480,
				"to": 3901240
			},
			"text": " this is very high level overview so yeah yeah yeah so so yeah it kind of something"
		},
		{
			"timestamps": {
				"from": "01:05:01,240",
				"to": "01:05:09,320"
			},
			"offsets": {
				"from": 3901240,
				"to": 3909320
			},
			"text": " return bull boolean it's easy to define no side effects that's that that that is so interesting"
		},
		{
			"timestamps": {
				"from": "01:05:09,320",
				"to": "01:05:15,160"
			},
			"offsets": {
				"from": 3909320,
				"to": 3915160
			},
			"text": " when you use boolean properties all the side effects will be reverted before the execution"
		},
		{
			"timestamps": {
				"from": "01:05:15,160",
				"to": "01:05:22,120"
			},
			"offsets": {
				"from": 3915160,
				"to": 3922120
			},
			"text": " of the actual invariant right but if you're using assert the side effects so everything you"
		},
		{
			"timestamps": {
				"from": "01:05:22,120",
				"to": "01:05:28,760"
			},
			"offsets": {
				"from": 3922120,
				"to": 3928760
			},
			"text": " change in the blockchain will will remain so this can be really useful for testing some some complex"
		},
		{
			"timestamps": {
				"from": "01:05:28,760",
				"to": "01:05:41,320"
			},
			"offsets": {
				"from": 3928760,
				"to": 3941320
			},
			"text": " code but yeah we're not going to we yeah assertion is can be simple to to define and it's it will also"
		},
		{
			"timestamps": {
				"from": "01:05:41,320",
				"to": "01:05:49,160"
			},
			"offsets": {
				"from": 3941320,
				"to": 3949160
			},
			"text": " it will also be easy to see on the code coverage if it's not if it's not covered or not however"
		},
		{
			"timestamps": {
				"from": "01:05:49,160",
				"to": "01:05:56,280"
			},
			"offsets": {
				"from": 3949160,
				"to": 3956280
			},
			"text": " some code especially some old piece of solidical it's going to have assertion as required and that"
		},
		{
			"timestamps": {
				"from": "01:05:56,280",
				"to": "01:06:02,280"
			},
			"offsets": {
				"from": 3956280,
				"to": 3962280
			},
			"text": " is a really bad thing you should not be doing it use require if you want to if you want to actually"
		},
		{
			"timestamps": {
				"from": "01:06:02,280",
				"to": "01:06:07,560"
			},
			"offsets": {
				"from": 3962280,
				"to": 3967560
			},
			"text": " have a precondition in your call and use assertion for for testing"
		},
		{
			"timestamps": {
				"from": "01:06:07,560",
				"to": "01:06:17,400"
			},
			"offsets": {
				"from": 3967560,
				"to": 3977400
			},
			"text": " okay um yeah finally we have the the foundry and dap compatibility the only thing well"
		},
		{
			"timestamps": {
				"from": "01:06:18,440",
				"to": "01:06:24,280"
			},
			"offsets": {
				"from": 3978440,
				"to": 3984280
			},
			"text": " the thing that we don't support is pranks so we don't like to prank people so we don't we don't"
		},
		{
			"timestamps": {
				"from": "01:06:24,280",
				"to": "01:06:33,320"
			},
			"offsets": {
				"from": 3984280,
				"to": 3993320
			},
			"text": " support pranks however we support some of the some of the um uh havm yeah the havm the original ones"
		},
		{
			"timestamps": {
				"from": "01:06:33,320",
				"to": "01:06:42,920"
			},
			"offsets": {
				"from": 3993320,
				"to": 4002920
			},
			"text": " cheat codes you should be careful using it uh we we know that there are some uh catch with that"
		},
		{
			"timestamps": {
				"from": "01:06:43,480",
				"to": "01:06:51,240"
			},
			"offsets": {
				"from": 4003480,
				"to": 4011240
			},
			"text": " especially related with what the solute compiler expects and what you are doing in your in your"
		},
		{
			"timestamps": {
				"from": "01:06:51,240",
				"to": "01:07:00,120"
			},
			"offsets": {
				"from": 4011240,
				"to": 4020120
			},
			"text": " transaction so please be careful because you could have some um some some issues so we in"
		},
		{
			"timestamps": {
				"from": "01:07:00,120",
				"to": "01:07:08,200"
			},
			"offsets": {
				"from": 4020120,
				"to": 4028200
			},
			"text": " we rarely use cheat codes uh we try to keep all our code as close at the solutely possible"
		},
		{
			"timestamps": {
				"from": "01:07:08,200",
				"to": "01:07:12,600"
			},
			"offsets": {
				"from": 4028200,
				"to": 4032600
			},
			"text": " so you can easily port it to another tool there's there's little a keynote specific"
		},
		{
			"timestamps": {
				"from": "01:07:12,600",
				"to": "01:07:18,360"
			},
			"offsets": {
				"from": 4032600,
				"to": 4038360
			},
			"text": " uh but yeah we are also open to discussion if if the community agrees that we need a specific"
		},
		{
			"timestamps": {
				"from": "01:07:18,360",
				"to": "01:07:23,960"
			},
			"offsets": {
				"from": 4038360,
				"to": 4043960
			},
			"text": " cheat code or we need to avoid some specific cheat code then we are open to this code all right"
		},
		{
			"timestamps": {
				"from": "01:07:23,960",
				"to": "01:07:37,160"
			},
			"offsets": {
				"from": 4043960,
				"to": 4057160
			},
			"text": " so exercise four we're going to deal with um one of the um one of the uh exercise four"
		},
		{
			"timestamps": {
				"from": "01:07:37,160",
				"to": "01:07:45,400"
			},
			"offsets": {
				"from": 4057160,
				"to": 4065400
			},
			"text": " done vulnerable defi so how many of you know this uh um amazing uh ctf um"
		},
		{
			"timestamps": {
				"from": "01:07:45,400",
				"to": "01:07:52,680"
			},
			"offsets": {
				"from": 4065400,
				"to": 4072680
			},
			"text": " ah yeah sorry you you yeah we can skip it yeah yeah we can yeah we can skip it this is um so"
		},
		{
			"timestamps": {
				"from": "01:07:52,680",
				"to": "01:07:58,760"
			},
			"offsets": {
				"from": 4072680,
				"to": 4078760
			},
			"text": " this exercise was exactly the same as the first one but instead of using function akin on dothker"
		},
		{
			"timestamps": {
				"from": "01:07:58,760",
				"to": "01:08:03,880"
			},
			"offsets": {
				"from": 4078760,
				"to": 4083880
			},
			"text": " we were using a session yeah exactly the same invariant exactly the same setup but with a different"
		},
		{
			"timestamps": {
				"from": "01:08:03,880",
				"to": "01:08:10,280"
			},
			"offsets": {
				"from": 4083880,
				"to": 4090280
			},
			"text": " API just as an example yeah so we will go into a more interesting example um but before that um"
		},
		{
			"timestamps": {
				"from": "01:08:10,280",
				"to": "01:08:18,360"
			},
			"offsets": {
				"from": 4090280,
				"to": 4098360
			},
			"text": " there is uh something that you wouldn't need which is called the multi-ibi mode um so we usually"
		},
		{
			"timestamps": {
				"from": "01:08:18,360",
				"to": "01:08:25,800"
			},
			"offsets": {
				"from": 4098360,
				"to": 4105800
			},
			"text": " usually testing tools take a specific contract as your main contract to interact so in in the"
		},
		{
			"timestamps": {
				"from": "01:08:25,800",
				"to": "01:08:32,040"
			},
			"offsets": {
				"from": 4105800,
				"to": 4112040
			},
			"text": " default mode akina will only target a specific contract that you can put in on your command line"
		},
		{
			"timestamps": {
				"from": "01:08:32,040",
				"to": "01:08:36,680"
			},
			"offsets": {
				"from": 4112040,
				"to": 4116680
			},
			"text": " or if you have only one contract you will use the first one right but there is something called"
		},
		{
			"timestamps": {
				"from": "01:08:36,680",
				"to": "01:08:44,280"
			},
			"offsets": {
				"from": 4116680,
				"to": 4124280
			},
			"text": " multi-ibi that we call every every contract that is deployed after the constructor that you have"
		},
		{
			"timestamps": {
				"from": "01:08:44,280",
				"to": "01:08:50,520"
			},
			"offsets": {
				"from": 4124280,
				"to": 4130520
			},
			"text": " abi right so if you deploy something in bico directly and you don't have abi kina one be able to"
		},
		{
			"timestamps": {
				"from": "01:08:50,520",
				"to": "01:08:57,320"
			},
			"offsets": {
				"from": 4130520,
				"to": 4137320
			},
			"text": " call it because it doesn't know what is what is there but if you if you deployed a couple of tokens"
		},
		{
			"timestamps": {
				"from": "01:08:57,320",
				"to": "01:09:03,960"
			},
			"offsets": {
				"from": 4137320,
				"to": 4143960
			},
			"text": " and several contracts and you use multi-ibi akina will call any function in any deployed contract"
		},
		{
			"timestamps": {
				"from": "01:09:03,960",
				"to": "01:09:11,240"
			},
			"offsets": {
				"from": 4143960,
				"to": 4151240
			},
			"text": " after after the the end of the constructor so we will need these in order to deal with the next"
		},
		{
			"timestamps": {
				"from": "01:09:11,240",
				"to": "01:09:18,440"
			},
			"offsets": {
				"from": 4151240,
				"to": 4158440
			},
			"text": " example because sometimes the the the bug that you want to detect it doesn't depend on the state"
		},
		{
			"timestamps": {
				"from": "01:09:18,440",
				"to": "01:09:24,200"
			},
			"offsets": {
				"from": 4158440,
				"to": 4164200
			},
			"text": " of one contract it depends on the state of many contracts and in that case you can you can be"
		},
		{
			"timestamps": {
				"from": "01:09:24,200",
				"to": "01:09:30,440"
			},
			"offsets": {
				"from": 4164200,
				"to": 4170440
			},
			"text": " surprised by the fact that changing the state in another contract can break your your property"
		},
		{
			"timestamps": {
				"from": "01:09:30,440",
				"to": "01:09:38,520"
			},
			"offsets": {
				"from": 4170440,
				"to": 4178520
			},
			"text": " and definitely want to avoid that okay so again how many of you know about them vulnerable DeFi"
		},
		{
			"timestamps": {
				"from": "01:09:38,520",
				"to": "01:09:45,400"
			},
			"offsets": {
				"from": 4178520,
				"to": 4185400
			},
			"text": " okay yeah a good number and did you actually well this is these are the first exercise the first"
		},
		{
			"timestamps": {
				"from": "01:09:45,400",
				"to": "01:09:52,760"
			},
			"offsets": {
				"from": 4185400,
				"to": 4192760
			},
			"text": " the first two so i hope that uh people know so if you know this this how to solve it"
		},
		{
			"timestamps": {
				"from": "01:09:53,400",
				"to": "01:09:59,320"
			},
			"offsets": {
				"from": 4193400,
				"to": 4199320
			},
			"text": " you should it's going to be even easier for you what we're going to do is we're going to"
		},
		{
			"timestamps": {
				"from": "01:09:59,320",
				"to": "01:10:07,240"
			},
			"offsets": {
				"from": 4199320,
				"to": 4207240
			},
			"text": " take a look of this sample so yeah i assume that we are ready you already have the code"
		},
		{
			"timestamps": {
				"from": "01:10:07,240",
				"to": "01:10:20,520"
			},
			"offsets": {
				"from": 4207240,
				"to": 4220520
			},
			"text": " so um is the exercise the the naive receiver one um so what we want to do is we want to be able to"
		},
		{
			"timestamps": {
				"from": "01:10:20,520",
				"to": "01:10:29,880"
			},
			"offsets": {
				"from": 4220520,
				"to": 4229880
			},
			"text": " drain um the the funds in flash loan receiver right just just to give like a bit of description of the"
		},
		{
			"timestamps": {
				"from": "01:10:29,880",
				"to": "01:10:37,320"
			},
			"offsets": {
				"from": 4229880,
				"to": 4237320
			},
			"text": " challenge um here you have two contract you have the naive um receiver along the pool which basically"
		},
		{
			"timestamps": {
				"from": "01:10:37,320",
				"to": "01:10:43,640"
			},
			"offsets": {
				"from": 4237320,
				"to": 4243640
			},
			"text": " yeah yeah yeah it's it's over there yeah um i can allow you to take a flash loan for a fee"
		},
		{
			"timestamps": {
				"from": "01:10:43,640",
				"to": "01:10:50,200"
			},
			"offsets": {
				"from": 4243640,
				"to": 4250200
			},
			"text": " and you have a second contract which is a user uh contract that is going to interact with the"
		},
		{
			"timestamps": {
				"from": "01:10:50,920",
				"to": "01:10:55,400"
			},
			"offsets": {
				"from": 4250920,
				"to": 4255400
			},
			"text": " pool and the contract is going to be the user contract is going to be deployed with some"
		},
		{
			"timestamps": {
				"from": "01:10:55,400",
				"to": "01:11:00,920"
			},
			"offsets": {
				"from": 4255400,
				"to": 4260920
			},
			"text": " funds inside and the girl is going to try to receive if it's possible for this specific contract"
		},
		{
			"timestamps": {
				"from": "01:11:00,920",
				"to": "01:11:11,400"
			},
			"offsets": {
				"from": 4260920,
				"to": 4271400
			},
			"text": " from the user to be joined exactly so what uh what we want you to do is um uh we we want you to"
		},
		{
			"timestamps": {
				"from": "01:11:11,400",
				"to": "01:11:20,440"
			},
			"offsets": {
				"from": 4271400,
				"to": 4280440
			},
			"text": " review the the exercise if you have already did it it it required you to send some some some number"
		},
		{
			"timestamps": {
				"from": "01:11:20,440",
				"to": "01:11:26,440"
			},
			"offsets": {
				"from": 4280440,
				"to": 4286440
			},
			"text": " of transactions so in this case we are going to prepare everything for a kidney to rediscover"
		},
		{
			"timestamps": {
				"from": "01:11:26,440",
				"to": "01:11:36,920"
			},
			"offsets": {
				"from": 4286440,
				"to": 4296920
			},
			"text": " this without telling it what is what uh how how it can be uh solved so we will need two things we"
		},
		{
			"timestamps": {
				"from": "01:11:36,920",
				"to": "01:11:46,280"
			},
			"offsets": {
				"from": 4296920,
				"to": 4306280
			},
			"text": " will need to initialize the um um the code to have um to match what the um what the initialization is"
		},
		{
			"timestamps": {
				"from": "01:11:46,280",
				"to": "01:11:54,120"
			},
			"offsets": {
				"from": 4306280,
				"to": 4314120
			},
			"text": " it's um is actually showing us let's see okay so this is the the flash loan uh the part of the"
		},
		{
			"timestamps": {
				"from": "01:11:54,120",
				"to": "01:11:59,400"
			},
			"offsets": {
				"from": 4314120,
				"to": 4319400
			},
			"text": " or the flash loan so the the interesting part about this is we don't have to care about specific"
		},
		{
			"timestamps": {
				"from": "01:11:59,400",
				"to": "01:12:06,760"
			},
			"offsets": {
				"from": 4319400,
				"to": 4326760
			},
			"text": " details in the code we want to we want to um give a kidney the same scenario that we have on the"
		},
		{
			"timestamps": {
				"from": "01:12:06,760",
				"to": "01:12:14,680"
			},
			"offsets": {
				"from": 4326760,
				"to": 4334680
			},
			"text": " on the actual uh challenge and we want to know if it can actually find a way to drain the contract"
		},
		{
			"timestamps": {
				"from": "01:12:14,680",
				"to": "01:12:23,800"
			},
			"offsets": {
				"from": 4334680,
				"to": 4343800
			},
			"text": " so yeah we can uh we can see uh how the receiver function um works here but um yeah the the"
		},
		{
			"timestamps": {
				"from": "01:12:23,800",
				"to": "01:12:29,160"
			},
			"offsets": {
				"from": 4343800,
				"to": 4349160
			},
			"text": " interesting part perhaps is the initialization what we are going to do is we are going to"
		},
		{
			"timestamps": {
				"from": "01:12:29,720",
				"to": "01:12:37,320"
			},
			"offsets": {
				"from": 4349720,
				"to": 4357320
			},
			"text": " deploy in the constructor of our um test we're going to deploy the the contracts that we have here"
		},
		{
			"timestamps": {
				"from": "01:12:37,320",
				"to": "01:12:44,440"
			},
			"offsets": {
				"from": 4357320,
				"to": 4364440
			},
			"text": " and prepare everything and then we're going to use a suitable um uh invariant which should be"
		},
		{
			"timestamps": {
				"from": "01:12:44,440",
				"to": "01:12:52,680"
			},
			"offsets": {
				"from": 4364440,
				"to": 4372680
			},
			"text": " really simple you don't have to uh overthink and we want you to uh run a kidney uh with that in"
		},
		{
			"timestamps": {
				"from": "01:12:52,680",
				"to": "01:12:58,600"
			},
			"offsets": {
				"from": 4372680,
				"to": 4378600
			},
			"text": " order to see if it can drain the contract uh with the of course with the suitable um uh with the"
		},
		{
			"timestamps": {
				"from": "01:12:58,600",
				"to": "01:13:06,200"
			},
			"offsets": {
				"from": 4378600,
				"to": 4386200
			},
			"text": " suitable invariant so yeah we will take um ten minutes i think yeah we are running out of time but"
		},
		{
			"timestamps": {
				"from": "01:13:06,200",
				"to": "01:13:12,840"
			},
			"offsets": {
				"from": 4386200,
				"to": 4392840
			},
			"text": " let's take ten minutes so the first step is really like this is a initialization from the test case"
		},
		{
			"timestamps": {
				"from": "01:13:12,840",
				"to": "01:13:18,280"
			},
			"offsets": {
				"from": 4392840,
				"to": 4398280
			},
			"text": " of the contract the first step is really just to replay this into a solidity constructor and then"
		},
		{
			"timestamps": {
				"from": "01:13:18,280",
				"to": "01:13:25,800"
			},
			"offsets": {
				"from": 4398280,
				"to": 4405800
			},
			"text": " to avoid the invariant yeah so happy to take questions or any technical issues"
		},
		{
			"timestamps": {
				"from": "01:13:25,800",
				"to": "01:13:37,560"
			},
			"offsets": {
				"from": 4405800,
				"to": 4417560
			},
			"text": " that's not a goal actually uh we are going to do exactly what is doing here but in solidity"
		},
		{
			"timestamps": {
				"from": "01:13:37,560",
				"to": "01:13:45,160"
			},
			"offsets": {
				"from": 4417560,
				"to": 4425160
			},
			"text": " yes there there is an alternative way to do it but the solidity approach is it's easier to to avoid"
		},
		{
			"timestamps": {
				"from": "01:13:46,040",
				"to": "01:13:51,720"
			},
			"offsets": {
				"from": 4426040,
				"to": 4431720
			},
			"text": " um because well the other tool is called itino that can replay this in a simulated blockchain like"
		},
		{
			"timestamps": {
				"from": "01:13:51,720",
				"to": "01:14:00,040"
			},
			"offsets": {
				"from": 4431720,
				"to": 4440040
			},
			"text": " an ash and then send it to the to the tool so uh in that case you don't need to replay it on solidity"
		},
		{
			"timestamps": {
				"from": "01:14:00,040",
				"to": "01:14:06,440"
			},
			"offsets": {
				"from": 4440040,
				"to": 4446440
			},
			"text": " manually but you are still still know still need to know where is everything deployed right so if"
		},
		{
			"timestamps": {
				"from": "01:14:06,440",
				"to": "01:14:10,360"
			},
			"offsets": {
				"from": 4446440,
				"to": 4450360
			},
			"text": " you want to interact with the pool you need to know where is where is which is the address of the pool"
		},
		{
			"timestamps": {
				"from": "01:14:10,920",
				"to": "01:14:18,440"
			},
			"offsets": {
				"from": 4450920,
				"to": 4458440
			},
			"text": " and you can you can then uh uh i can i cannot actually call the pool functions automatically"
		},
		{
			"timestamps": {
				"from": "01:14:18,440",
				"to": "01:14:23,640"
			},
			"offsets": {
				"from": 4458440,
				"to": 4463640
			},
			"text": " because it it has everything but in this case we're going to go into a simple route that is going to"
		},
		{
			"timestamps": {
				"from": "01:14:23,640",
				"to": "01:14:29,800"
			},
			"offsets": {
				"from": 4463640,
				"to": 4469800
			},
			"text": " take us to rewrite it's just a couple of and this kind of much what we are doing we are not"
		},
		{
			"timestamps": {
				"from": "01:14:29,800",
				"to": "01:14:35,000"
			},
			"offsets": {
				"from": 4469800,
				"to": 4475000
			},
			"text": " in it we might look at the existing unit test we understand initialization and we might translate"
		},
		{
			"timestamps": {
				"from": "01:14:35,000",
				"to": "01:14:40,360"
			},
			"offsets": {
				"from": 4475000,
				"to": 4480360
			},
			"text": " the solidity if needed to as an equator as invariance"
		},
		{
			"timestamps": {
				"from": "01:14:40,360",
				"to": "01:14:53,080"
			},
			"offsets": {
				"from": 4480360,
				"to": 4493080
			},
			"text": " so yeah the the previous exercises are on the ec side this is a bit more difficult but still"
		},
		{
			"timestamps": {
				"from": "01:14:53,080",
				"to": "01:15:00,840"
			},
			"offsets": {
				"from": 4493080,
				"to": 4500840
			},
			"text": " shouldn't require more than a few lines um so yeah but please let us know if you if you need some"
		},
		{
			"timestamps": {
				"from": "01:15:01,480",
				"to": "01:15:08,600"
			},
			"offsets": {
				"from": 4501480,
				"to": 4508600
			},
			"text": " some hints there are some hints in the in one of the one of the branches in the hinged branch"
		},
		{
			"timestamps": {
				"from": "01:15:08,600",
				"to": "01:15:17,320"
			},
			"offsets": {
				"from": 4508600,
				"to": 4517320
			},
			"text": " but yeah hey there uh hello yeah sorry no worries um is there any thought or current support for"
		},
		{
			"timestamps": {
				"from": "01:15:17,320",
				"to": "01:15:27,160"
			},
			"offsets": {
				"from": 4517320,
				"to": 4527160
			},
			"text": " mainnet forking or state forking of some sort not yet yes so uh not yet hivm has support for"
		},
		{
			"timestamps": {
				"from": "01:15:27,880",
				"to": "01:15:34,840"
			},
			"offsets": {
				"from": 4527880,
				"to": 4534840
			},
			"text": " that but that will that will need us to put uh that requires to do like input output"
		},
		{
			"timestamps": {
				"from": "01:15:34,840",
				"to": "01:15:44,040"
			},
			"offsets": {
				"from": 4534840,
				"to": 4544040
			},
			"text": " on on transaction so we need to check if that will impact on the actual um on the actual um"
		},
		{
			"timestamps": {
				"from": "01:15:44,040",
				"to": "01:15:53,720"
			},
			"offsets": {
				"from": 4544040,
				"to": 4553720
			},
			"text": " performance on the call um so yeah they will um yeah um i have kind of high level"
		},
		{
			"timestamps": {
				"from": "01:15:54,440",
				"to": "01:15:58,680"
			},
			"offsets": {
				"from": 4554440,
				"to": 4558680
			},
			"text": " question so i'm i'm trying to think about what the limitations are in terms of"
		},
		{
			"timestamps": {
				"from": "01:15:58,680",
				"to": "01:16:05,960"
			},
			"offsets": {
				"from": 4558680,
				"to": 4565960
			},
			"text": " expressing properties as invariance right so for example let's say we have a temporal property"
		},
		{
			"timestamps": {
				"from": "01:16:05,960",
				"to": "01:16:11,400"
			},
			"offsets": {
				"from": 4565960,
				"to": 4571400
			},
			"text": " that we want to express like we have a wallet contract and we want to be able to say that any"
		},
		{
			"timestamps": {
				"from": "01:16:11,400",
				"to": "01:16:17,640"
			},
			"offsets": {
				"from": 4571400,
				"to": 4577640
			},
			"text": " user who deposits their money is eventually able to withdraw it is that just like a fundamental"
		},
		{
			"timestamps": {
				"from": "01:16:17,640",
				"to": "01:16:25,240"
			},
			"offsets": {
				"from": 4577640,
				"to": 4585240
			},
			"text": " limitation of a kid now or is there a way to so if you if you can so the notion of eventually"
		},
		{
			"timestamps": {
				"from": "01:16:25,240",
				"to": "01:16:31,640"
			},
			"offsets": {
				"from": 4585240,
				"to": 4591640
			},
			"text": " it's you you need to have some definition on the on the blockchain right so eventually cannot"
		},
		{
			"timestamps": {
				"from": "01:16:31,640",
				"to": "01:16:39,320"
			},
			"offsets": {
				"from": 4591640,
				"to": 4599320
			},
			"text": " mean like in a hundred years right so if you if you define say a will only allow increment of time"
		},
		{
			"timestamps": {
				"from": "01:16:39,320",
				"to": "01:16:49,320"
			},
			"offsets": {
				"from": 4599320,
				"to": 4609320
			},
			"text": " up to some limit yes you can you can call it as a bounded version of that property but you cannot"
		},
		{
			"timestamps": {
				"from": "01:16:49,320",
				"to": "01:16:56,520"
			},
			"offsets": {
				"from": 4609320,
				"to": 4616520
			},
			"text": " you cannot use it as a theoretical thing like you know i have a state which i don't know what it is"
		},
		{
			"timestamps": {
				"from": "01:16:56,520",
				"to": "01:17:03,480"
			},
			"offsets": {
				"from": 4616520,
				"to": 4623480
			},
			"text": " and then i will transition to another state which i don't know which uh what it is and in that case"
		},
		{
			"timestamps": {
				"from": "01:17:03,480",
				"to": "01:17:10,440"
			},
			"offsets": {
				"from": 4623480,
				"to": 4630440
			},
			"text": " you will need to know if the original state was actually possible and and things like that so"
		},
		{
			"timestamps": {
				"from": "01:17:10,440",
				"to": "01:17:17,720"
			},
			"offsets": {
				"from": 4630440,
				"to": 4637720
			},
			"text": " a kind of works on the on a concrete on on concrete states so you always have"
		},
		{
			"timestamps": {
				"from": "01:17:17,720",
				"to": "01:17:23,080"
			},
			"offsets": {
				"from": 4637720,
				"to": 4643080
			},
			"text": " concrete state and you need to put like boundaries on the things that you that you can do so if you"
		},
		{
			"timestamps": {
				"from": "01:17:23,080",
				"to": "01:17:31,960"
			},
			"offsets": {
				"from": 4643080,
				"to": 4651960
			},
			"text": " say a user should eventually receive this amount and eventually means like in a number of transactions"
		},
		{
			"timestamps": {
				"from": "01:17:31,960",
				"to": "01:17:38,440"
			},
			"offsets": {
				"from": 4651960,
				"to": 4658440
			},
			"text": " in a number of blocks or time stamp then yes otherwise it's it's more like a theoretical"
		},
		{
			"timestamps": {
				"from": "01:17:38,440",
				"to": "01:17:43,560"
			},
			"offsets": {
				"from": 4658440,
				"to": 4663560
			},
			"text": " proof that you are doing and you probably need a not type of tool yeah i guess i'm curious even if"
		},
		{
			"timestamps": {
				"from": "01:17:43,560",
				"to": "01:17:48,040"
			},
			"offsets": {
				"from": 4663560,
				"to": 4668040
			},
			"text": " you took like the bounded case because that's fair that you're dealing with like concrete traces here"
		},
		{
			"timestamps": {
				"from": "01:17:48,040",
				"to": "01:17:52,360"
			},
			"offsets": {
				"from": 4668040,
				"to": 4672360
			},
			"text": " it seems like that's not or it's not intuitive to me anyway how you would express that it's like"
		},
		{
			"timestamps": {
				"from": "01:17:52,360",
				"to": "01:17:58,840"
			},
			"offsets": {
				"from": 4672360,
				"to": 4678840
			},
			"text": " one of these invariants so you you will you will do something like this you will put a function that says"
		},
		{
			"timestamps": {
				"from": "01:17:59,560",
				"to": "01:18:08,520"
			},
			"offsets": {
				"from": 4679560,
				"to": 4688520
			},
			"text": " uh and and you will need a state to track down like uh you you do a deposit and you will need a user"
		},
		{
			"timestamps": {
				"from": "01:18:08,520",
				"to": "01:18:14,040"
			},
			"offsets": {
				"from": 4688520,
				"to": 4694040
			},
			"text": " to eventually receive something right so you will need to have a state that tracks the deposits like"
		},
		{
			"timestamps": {
				"from": "01:18:14,040",
				"to": "01:18:22,680"
			},
			"offsets": {
				"from": 4694040,
				"to": 4702680
			},
			"text": " a mapping right and you have a function that is your invariant so if um and then you receive"
		},
		{
			"timestamps": {
				"from": "01:18:22,680",
				"to": "01:18:30,440"
			},
			"offsets": {
				"from": 4702680,
				"to": 4710440
			},
			"text": " the address of a user and you check in the mapping uh if if the time um between the last"
		},
		{
			"timestamps": {
				"from": "01:18:30,440",
				"to": "01:18:36,520"
			},
			"offsets": {
				"from": 4710440,
				"to": 4716520
			},
			"text": " deposit is in this range then you are going to check something and if if the time in this in"
		},
		{
			"timestamps": {
				"from": "01:18:36,520",
				"to": "01:18:41,960"
			},
			"offsets": {
				"from": 4716520,
				"to": 4721960
			},
			"text": " this other range you're going to check some something else so it will be like randomly checking in"
		},
		{
			"timestamps": {
				"from": "01:18:41,960",
				"to": "01:18:50,600"
			},
			"offsets": {
				"from": 4721960,
				"to": 4730600
			},
			"text": " transactions um and with that you will be able to cover uh given the fact that you are going to"
		},
		{
			"timestamps": {
				"from": "01:18:50,600",
				"to": "01:18:55,640"
			},
			"offsets": {
				"from": 4730600,
				"to": 4735640
			},
			"text": " generate enough transactions and enough time times right so it seems like the answer is it's"
		},
		{
			"timestamps": {
				"from": "01:18:55,640",
				"to": "01:19:00,200"
			},
			"offsets": {
				"from": 4735640,
				"to": 4740200
			},
			"text": " capable of doing it but it requires some like kind of manual adjustment of the code almost at"
		},
		{
			"timestamps": {
				"from": "01:19:00,200",
				"to": "01:19:08,360"
			},
			"offsets": {
				"from": 4740200,
				"to": 4748360
			},
			"text": " state that so yeah you will so if the if the property that you are testing requires to add state yes"
		},
		{
			"timestamps": {
				"from": "01:19:08,360",
				"to": "01:19:15,320"
			},
			"offsets": {
				"from": 4748360,
				"to": 4755320
			},
			"text": " you will need to add whatever state is needed it won't be able to track state outside right the"
		},
		{
			"timestamps": {
				"from": "01:19:15,320",
				"to": "01:19:23,160"
			},
			"offsets": {
				"from": 4755320,
				"to": 4763160
			},
			"text": " only thing that will be tracked outside is the increment between between the different blocks"
		},
		{
			"timestamps": {
				"from": "01:19:23,160",
				"to": "01:19:30,440"
			},
			"offsets": {
				"from": 4763160,
				"to": 4770440
			},
			"text": " for instance so that that will be tracked outside and again i will show you from in between this"
		},
		{
			"timestamps": {
				"from": "01:19:30,440",
				"to": "01:19:36,040"
			},
			"offsets": {
				"from": 4770440,
				"to": 4776040
			},
			"text": " transaction and this transaction i have 10 blocks that will be tracked outside but everything else"
		},
		{
			"timestamps": {
				"from": "01:19:36,040",
				"to": "01:19:42,680"
			},
			"offsets": {
				"from": 4776040,
				"to": 4782680
			},
			"text": " if you need to do a mapping between users and and the time between certain operation you will need"
		},
		{
			"timestamps": {
				"from": "01:19:42,680",
				"to": "01:19:48,360"
			},
			"offsets": {
				"from": 4782680,
				"to": 4788360
			},
			"text": " to keep that in a different in a in a in a different bio i see great thank you"
		},
		{
			"timestamps": {
				"from": "01:19:48,360",
				"to": "01:19:55,080"
			},
			"offsets": {
				"from": 4788360,
				"to": 4795080
			},
			"text": " all right so we have some other questions"
		},
		{
			"timestamps": {
				"from": "01:19:55,080",
				"to": "01:20:04,520"
			},
			"offsets": {
				"from": 4795080,
				"to": 4804520
			},
			"text": " hi um is there any feature that allowed me to guide the future or the domain of values that i"
		},
		{
			"timestamps": {
				"from": "01:20:04,520",
				"to": "01:20:12,840"
			},
			"offsets": {
				"from": 4804520,
				"to": 4812840
			},
			"text": " want to try um so in order to in order to guide the the faster into a particular state the easiest"
		},
		{
			"timestamps": {
				"from": "01:20:12,840",
				"to": "01:20:21,560"
			},
			"offsets": {
				"from": 4812840,
				"to": 4821560
			},
			"text": " way to do it is to add um is is to add a small piece of code that will be auxiliary code in order to"
		},
		{
			"timestamps": {
				"from": "01:20:21,560",
				"to": "01:20:29,000"
			},
			"offsets": {
				"from": 4821560,
				"to": 4829000
			},
			"text": " move the state from your contract into something else like for instance if you have if you have a"
		},
		{
			"timestamps": {
				"from": "01:20:29,000",
				"to": "01:20:37,000"
			},
			"offsets": {
				"from": 4829000,
				"to": 4837000
			},
			"text": " contract the the protocol that requires a deposit with a particular property let's say that"
		},
		{
			"timestamps": {
				"from": "01:20:37,000",
				"to": "01:20:46,200"
			},
			"offsets": {
				"from": 4837000,
				"to": 4846200
			},
			"text": " you have three parameters and you need a deposit that has that has this two parameter in in in"
		},
		{
			"timestamps": {
				"from": "01:20:46,200",
				"to": "01:20:52,040"
			},
			"offsets": {
				"from": 4846200,
				"to": 4852040
			},
			"text": " the same number or in numbers in which in which are difficult to find you can add this piece of"
		},
		{
			"timestamps": {
				"from": "01:20:52,040",
				"to": "01:20:57,560"
			},
			"offsets": {
				"from": 4852040,
				"to": 4857560
			},
			"text": " code but it's important to let the kid not to explore freely at the same time that you are"
		},
		{
			"timestamps": {
				"from": "01:20:57,560",
				"to": "01:21:05,400"
			},
			"offsets": {
				"from": 4857560,
				"to": 4865400
			},
			"text": " writing information so it's it's actually important to know that as a navigator or as a developer"
		},
		{
			"timestamps": {
				"from": "01:21:05,400",
				"to": "01:21:11,720"
			},
			"offsets": {
				"from": 4865400,
				"to": 4871720
			},
			"text": " you are adding information into into not just using it as a black box right so every state"
		},
		{
			"timestamps": {
				"from": "01:21:11,720",
				"to": "01:21:18,440"
			},
			"offsets": {
				"from": 4871720,
				"to": 4878440
			},
			"text": " transition that is non trivial to find or is really really important you you can have it and make"
		},
		{
			"timestamps": {
				"from": "01:21:18,440",
				"to": "01:21:23,800"
			},
			"offsets": {
				"from": 4878440,
				"to": 4883800
			},
			"text": " sure that it can eventually execute it because it's going to be another another transaction to"
		},
		{
			"timestamps": {
				"from": "01:21:23,800",
				"to": "01:21:29,880"
			},
			"offsets": {
				"from": 4883800,
				"to": 4889880
			},
			"text": " uh to execute but at the same time you want to allow the tool to explore things that you don't"
		},
		{
			"timestamps": {
				"from": "01:21:29,880",
				"to": "01:21:37,080"
			},
			"offsets": {
				"from": 4889880,
				"to": 4897080
			},
			"text": " expect because if you just restrict says i only expect users to do these type of deposits then you"
		},
		{
			"timestamps": {
				"from": "01:21:37,080",
				"to": "01:21:43,880"
			},
			"offsets": {
				"from": 4897080,
				"to": 4903880
			},
			"text": " can you can be surprised later because there there is a way to break your property using things that"
		},
		{
			"timestamps": {
				"from": "01:21:43,880",
				"to": "01:21:52,040"
			},
			"offsets": {
				"from": 4903880,
				"to": 4912040
			},
			"text": " you don't expect great things and it comes down to the previous question where either you start"
		},
		{
			"timestamps": {
				"from": "01:21:52,040",
				"to": "01:21:56,360"
			},
			"offsets": {
				"from": 4912040,
				"to": 4916360
			},
			"text": " with a lot of requirement and a lot of you know restriction in what you are trying to explore"
		},
		{
			"timestamps": {
				"from": "01:21:56,360",
				"to": "01:22:02,120"
			},
			"offsets": {
				"from": 4916360,
				"to": 4922120
			},
			"text": " and if it's all you're going to remove some of the restriction or you start the opposite direction"
		},
		{
			"timestamps": {
				"from": "01:22:02,120",
				"to": "01:22:09,720"
			},
			"offsets": {
				"from": 4922120,
				"to": 4929720
			},
			"text": " you don't have any restriction and you know you go more and more restricted"
		},
		{
			"timestamps": {
				"from": "01:22:09,720",
				"to": "01:22:25,640"
			},
			"offsets": {
				"from": 4929720,
				"to": 4945640
			},
			"text": " so"
		},
		{
			"timestamps": {
				"from": "01:22:25,640",
				"to": "01:22:41,560"
			},
			"offsets": {
				"from": 4945640,
				"to": 4961560
			},
			"text": " yeah"
		},
		{
			"timestamps": {
				"from": "01:22:41,560",
				"to": "01:22:58,040"
			},
			"offsets": {
				"from": 4961560,
				"to": 4978040
			},
			"text": " okay"
		},
		{
			"timestamps": {
				"from": "01:22:58,040",
				"to": "01:23:07,320"
			},
			"offsets": {
				"from": 4978040,
				"to": 4987320
			},
			"text": " okay so did did anyone manage to at least uh still still start to uh create the constructor or even"
		},
		{
			"timestamps": {
				"from": "01:23:07,320",
				"to": "01:23:17,320"
			},
			"offsets": {
				"from": 4987320,
				"to": 4997320
			},
			"text": " run it uh to have some some invariant or even think about the the invariant that you need"
		},
		{
			"timestamps": {
				"from": "01:23:17,320",
				"to": "01:23:36,120"
			},
			"offsets": {
				"from": 4997320,
				"to": 5016120
			},
			"text": " say in in a couple of minutes we'll go over the conclusions and we'll show the the solution"
		},
		{
			"timestamps": {
				"from": "01:23:36,920",
				"to": "01:23:41,160"
			},
			"offsets": {
				"from": 5016920,
				"to": 5021160
			},
			"text": " um"
		},
		{
			"timestamps": {
				"from": "01:23:41,160",
				"to": "01:23:52,840"
			},
			"offsets": {
				"from": 5021160,
				"to": 5032840
			},
			"text": " but you're happy to take any additional questions"
		},
		{
			"timestamps": {
				"from": "01:23:52,840",
				"to": "01:24:08,760"
			},
			"offsets": {
				"from": 5032840,
				"to": 5048760
			},
			"text": " um"
		},
		{
			"timestamps": {
				"from": "01:24:19,160",
				"to": "01:24:27,240"
			},
			"offsets": {
				"from": 5059160,
				"to": 5067240
			},
			"text": " just from an implementation side i'm curious what um what actual like virtual machine being used to"
		},
		{
			"timestamps": {
				"from": "01:24:27,240",
				"to": "01:24:39,160"
			},
			"offsets": {
				"from": 5067240,
				"to": 5079160
			},
			"text": " deploy and execute contracts so we we use hivm uh which is the virtual machine written in Haskell"
		},
		{
			"timestamps": {
				"from": "01:24:39,160",
				"to": "01:24:46,200"
			},
			"offsets": {
				"from": 5079160,
				"to": 5086200
			},
			"text": " i know that it's in the process of uh improving and rewriting so it was moved from the"
		},
		{
			"timestamps": {
				"from": "01:24:46,200",
				"to": "01:24:51,720"
			},
			"offsets": {
				"from": 5086200,
				"to": 5091720
			},
			"text": " adaptor into a chain repository so we are eager to test new features"
		},
		{
			"timestamps": {
				"from": "01:24:51,720",
				"to": "01:25:01,240"
			},
			"offsets": {
				"from": 5091720,
				"to": 5101240
			},
			"text": " but yeah um if you use the tino companion tool to deploy a contract it's going to use kenash"
		},
		{
			"timestamps": {
				"from": "01:25:01,240",
				"to": "01:25:12,200"
			},
			"offsets": {
				"from": 5101240,
				"to": 5112200
			},
			"text": " um and you will serialize into JSON file and you can then load it into into that"
		},
		{
			"timestamps": {
				"from": "01:25:15,480",
				"to": "01:25:31,400"
			},
			"offsets": {
				"from": 5115480,
				"to": 5131400
			},
			"text": " okay"
		},
		{
			"timestamps": {
				"from": "01:25:31,400",
				"to": "01:25:39,880"
			},
			"offsets": {
				"from": 5131400,
				"to": 5139880
			},
			"text": " yeah we're going to the into the uh solution okay yeah we we're going to quickly go over the solution"
		},
		{
			"timestamps": {
				"from": "01:25:40,440",
				"to": "01:25:46,040"
			},
			"offsets": {
				"from": 5140440,
				"to": 5146040
			},
			"text": " so we can have a couple of minutes for for this so the solution requires first to"
		},
		{
			"timestamps": {
				"from": "01:25:46,040",
				"to": "01:25:53,560"
			},
			"offsets": {
				"from": 5146040,
				"to": 5153560
			},
			"text": " deploy have a contract with enough amount of ether uh to to match what is deployed"
		},
		{
			"timestamps": {
				"from": "01:25:53,560",
				"to": "01:26:04,600"
			},
			"offsets": {
				"from": 5153560,
				"to": 5164600
			},
			"text": " and then um you can see here uh in we we deployed all the contracts that we need and send um the"
		},
		{
			"timestamps": {
				"from": "01:26:04,600",
				"to": "01:26:11,480"
			},
			"offsets": {
				"from": 5164600,
				"to": 5171480
			},
			"text": " amount of ether that every contract meets and then what is uh what we're going to use we're going to"
		},
		{
			"timestamps": {
				"from": "01:26:11,480",
				"to": "01:26:16,760"
			},
			"offsets": {
				"from": 5171480,
				"to": 5176760
			},
			"text": " use a simple very simple property that is going to say that the balance of the receiver is at least"
		},
		{
			"timestamps": {
				"from": "01:26:16,760",
				"to": "01:26:24,040"
			},
			"offsets": {
				"from": 5176760,
				"to": 5184040
			},
			"text": " 10 ether so we don't actually need to follow exactly what the exercise says about draining"
		},
		{
			"timestamps": {
				"from": "01:26:24,040",
				"to": "01:26:30,920"
			},
			"offsets": {
				"from": 5184040,
				"to": 5190920
			},
			"text": " completely the contract if we have one transaction that allows you to reduce the balance of the"
		},
		{
			"timestamps": {
				"from": "01:26:30,920",
				"to": "01:26:38,360"
			},
			"offsets": {
				"from": 5190920,
				"to": 5198360
			},
			"text": " receiver then then then something is wrong and uh definitely uh it will it will eventually be drained"
		},
		{
			"timestamps": {
				"from": "01:26:38,360",
				"to": "01:26:48,120"
			},
			"offsets": {
				"from": 5198360,
				"to": 5208120
			},
			"text": " so yeah so quickly if you run it you will see something like this um in which well the uh the"
		},
		{
			"timestamps": {
				"from": "01:26:48,120",
				"to": "01:26:54,760"
			},
			"offsets": {
				"from": 5208120,
				"to": 5214760
			},
			"text": " flash run has a has a parameter that is the the the borderware and we can control this to in order to"
		},
		{
			"timestamps": {
				"from": "01:26:56,200",
				"to": "01:27:01,560"
			},
			"offsets": {
				"from": 5216200,
				"to": 5221560
			},
			"text": " reduce the amount of balance all right uh so yeah you want to go on to the"
		},
		{
			"timestamps": {
				"from": "01:27:01,560",
				"to": "01:27:06,600"
			},
			"offsets": {
				"from": 5221560,
				"to": 5226600
			},
			"text": " okay yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah"
		},
		{
			"timestamps": {
				"from": "01:27:06,600",
				"to": "01:27:06,600"
			},
			"offsets": {
				"from": 5226600,
				"to": 5226600
			},
			"text": " yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah yeah"
		},
		{
			"timestamps": {
				"from": "01:27:06,760",
				"to": "01:27:11,160"
			},
			"offsets": {
				"from": 5226760,
				"to": 5231160
			},
			"text": " yeah well the second exercise on demo novel defi but uh we're running out of time"
		},
		{
			"timestamps": {
				"from": "01:27:11,160",
				"to": "01:27:19,000"
			},
			"offsets": {
				"from": 5231160,
				"to": 5239000
			},
			"text": " the idea was the same we are defining initialization uh which was a bit more complex and if you go"
		},
		{
			"timestamps": {
				"from": "01:27:19,000",
				"to": "01:27:23,960"
			},
			"offsets": {
				"from": 5239000,
				"to": 5243960
			},
			"text": " through this exercise with something a bit more specific is that there is a callback from the"
		},
		{
			"timestamps": {
				"from": "01:27:23,960",
				"to": "01:27:28,520"
			},
			"offsets": {
				"from": 5243960,
				"to": 5248520
			},
			"text": " contract to the color so on the keynote test you need to have like also the callback to implement"
		},
		{
			"timestamps": {
				"from": "01:27:28,520",
				"to": "01:27:38,520"
			},
			"offsets": {
				"from": 5248520,
				"to": 5258520
			},
			"text": " the flash load but yeah okay um yeah so this is something we kind of touched on a bit during"
		},
		{
			"timestamps": {
				"from": "01:27:38,520",
				"to": "01:27:43,720"
			},
			"offsets": {
				"from": 5258520,
				"to": 5263720
			},
			"text": " our discussion what about the other tools so there are a couple of other further out there"
		},
		{
			"timestamps": {
				"from": "01:27:43,720",
				"to": "01:27:50,760"
			},
			"offsets": {
				"from": 5263720,
				"to": 5270760
			},
			"text": " there is DAP, Growny, Fondry, at least this one our open source this file might be a bit"
		},
		{
			"timestamps": {
				"from": "01:27:50,760",
				"to": "01:27:57,720"
			},
			"offsets": {
				"from": 5270760,
				"to": 5277720
			},
			"text": " better for simple tests and for like you know is a fuse for like the first invariance because"
		},
		{
			"timestamps": {
				"from": "01:27:57,720",
				"to": "01:28:02,680"
			},
			"offsets": {
				"from": 5277720,
				"to": 5282680
			},
			"text": " they are integrated within the compilation framework but in the long run they might not be as powerful"
		},
		{
			"timestamps": {
				"from": "01:28:02,680",
				"to": "01:28:07,240"
			},
			"offsets": {
				"from": 5282680,
				"to": 5287240
			},
			"text": " as a kina simply because we have you know uh use the kina for a couple of years and we have"
		},
		{
			"timestamps": {
				"from": "01:28:07,240",
				"to": "01:28:13,400"
			},
			"offsets": {
				"from": 5287240,
				"to": 5293400
			},
			"text": " tune it you know where that uh provides uh the best value that we can do oh it's okay to finish"
		},
		{
			"timestamps": {
				"from": "01:28:13,400",
				"to": "01:28:23,320"
			},
			"offsets": {
				"from": 5293400,
				"to": 5303320
			},
			"text": " okay sorry um yeah okay so i hope you enjoyed uh the workshop um we have more exercise in building"
		},
		{
			"timestamps": {
				"from": "01:28:23,320",
				"to": "01:28:28,120"
			},
			"offsets": {
				"from": 5303320,
				"to": 5308120
			},
			"text": " secure contract something that would recommend for you is to try to write invariant you know in your"
		},
		{
			"timestamps": {
				"from": "01:28:28,120",
				"to": "01:28:38,520"
			},
			"offsets": {
				"from": 5308120,
				"to": 5318520
			},
			"text": " next project and actually who is going to try a kina on its next project nice and thank you"
		},
		{
			"timestamps": {
				"from": "01:28:38,520",
				"to": "01:28:51,960"
			},
			"offsets": {
				"from": 5318520,
				"to": 5331960
			},
			"text": " so today we're going to talk about storage proofs i want to introduce this uh yes uh i'm gonna"
		},
		{
			"timestamps": {
				"from": "01:28:51,960",
				"to": "01:28:56,920"
			},
			"offsets": {
				"from": 5331960,
				"to": 5336920
			},
			"text": " present you storage proofs and explain why they're cool how to work with them why you need tooling"
		},
		{
			"timestamps": {
				"from": "01:28:56,920",
				"to": "01:29:04,360"
			},
			"offsets": {
				"from": 5336920,
				"to": 5344360
			},
			"text": " to work with them and yeah a bunch of other things why is it even possible all the complexities"
		},
		{
			"timestamps": {
				"from": "01:29:04,360",
				"to": "01:29:10,440"
			},
			"offsets": {
				"from": 5344360,
				"to": 5350440
			},
			"text": " behind the trade-offs and so on so if you're about storage proofs why i really believe that they"
		},
		{
			"timestamps": {
				"from": "01:29:10,440",
				"to": "01:29:18,120"
			},
			"offsets": {
				"from": 5350440,
				"to": 5358120
			},
			"text": " are cool especially nowadays so my thesis is that Ethereum is pretty sharded nowadays and with storage"
		},
		{
			"timestamps": {
				"from": "01:29:18,120",
				"to": "01:29:26,040"
			},
			"offsets": {
				"from": 5358120,
				"to": 5366040
			},
			"text": " proofs we can essentially read the state in a almost synchronous manner which is a pretty pretty nice"
		},
		{
			"timestamps": {
				"from": "01:29:26,040",
				"to": "01:29:35,240"
			},
			"offsets": {
				"from": 5366040,
				"to": 5375240
			},
			"text": " thing to do um given the circumstances um yeah and maybe also let me explain why is it even possible"
		},
		{
			"timestamps": {
				"from": "01:29:35,240",
				"to": "01:29:39,560"
			},
			"offsets": {
				"from": 5375240,
				"to": 5379560
			},
			"text": " so storage proof is essentially this idea that the entire state is committed in a cryptographic"
		},
		{
			"timestamps": {
				"from": "01:29:39,560",
				"to": "01:29:46,040"
			},
			"offsets": {
				"from": 5379560,
				"to": 5386040
			},
			"text": " manner um using some data structure like miracle trees, my cup of trees and so on and yeah we can"
		},
		{
			"timestamps": {
				"from": "01:29:46,040",
				"to": "01:29:53,640"
			},
			"offsets": {
				"from": 5386040,
				"to": 5393640
			},
			"text": " essentially verify any specific piece of state at any point in time on any domain which is pretty"
		},
		{
			"timestamps": {
				"from": "01:29:53,640",
				"to": "01:29:57,960"
			},
			"offsets": {
				"from": 5393640,
				"to": 5397960
			},
			"text": " nice and doesn't introduce additional trust assumptions you just rely on the security of like the"
		},
		{
			"timestamps": {
				"from": "01:29:57,960",
				"to": "01:30:06,360"
			},
			"offsets": {
				"from": 5397960,
				"to": 5406360
			},
			"text": " base chain um so yeah that's like storage proofs tldr where they are cool now a bit of like sponsored"
		},
		{
			"timestamps": {
				"from": "01:30:06,360",
				"to": "01:30:14,520"
			},
			"offsets": {
				"from": 5406360,
				"to": 5414520
			},
			"text": " section of sponsored sections so uh what we're doing at hervadutus so our like goal is to make"
		},
		{
			"timestamps": {
				"from": "01:30:15,240",
				"to": "01:30:22,600"
			},
			"offsets": {
				"from": 5415240,
				"to": 5422600
			},
			"text": " smart contracts so far in a way uh by providing access to historical state uh we like i said"
		},
		{
			"timestamps": {
				"from": "01:30:22,600",
				"to": "01:30:27,960"
			},
			"offsets": {
				"from": 5422600,
				"to": 5427960
			},
			"text": " might as this is that ethereum is pretty sharded nowadays we want to unshard it by using storage"
		},
		{
			"timestamps": {
				"from": "01:30:27,960",
				"to": "01:30:34,280"
			},
			"offsets": {
				"from": 5427960,
				"to": 5434280
			},
			"text": " proofs and we want to enable synchronous data which because today we do not have really nice ways to"
		},
		{
			"timestamps": {
				"from": "01:30:34,280",
				"to": "01:30:40,360"
			},
			"offsets": {
				"from": 5434280,
				"to": 5440360
			},
			"text": " make synchronous data access without introducing new state uh new trust assumptions so yeah that's"
		},
		{
			"timestamps": {
				"from": "01:30:40,360",
				"to": "01:30:45,320"
			},
			"offsets": {
				"from": 5440360,
				"to": 5445320
			},
			"text": " we do and how we achieve that we achieve that by using obvious storage proofs we use narks"
		},
		{
			"timestamps": {
				"from": "01:30:45,320",
				"to": "01:30:52,920"
			},
			"offsets": {
				"from": 5445320,
				"to": 5452920
			},
			"text": " starts and npc uh i will get why we even use all this tooling but first a few words about storage"
		},
		{
			"timestamps": {
				"from": "01:30:52,920",
				"to": "01:31:00,760"
			},
			"offsets": {
				"from": 5452920,
				"to": 5460760
			},
			"text": " proofs what these are and and so on it's so tricky actually i i need to be multitask okay so uh what"
		},
		{
			"timestamps": {
				"from": "01:31:00,760",
				"to": "01:31:07,080"
			},
			"offsets": {
				"from": 5460760,
				"to": 5467080
			},
			"text": " we're gonna cover in today's workshop so all the basics required to like understand properly"
		},
		{
			"timestamps": {
				"from": "01:31:07,080",
				"to": "01:31:13,400"
			},
			"offsets": {
				"from": 5467080,
				"to": 5473400
			},
			"text": " this primitive how to like work with it how we can generate this proofs why they are pretty useful"
		},
		{
			"timestamps": {
				"from": "01:31:13,400",
				"to": "01:31:18,920"
			},
			"offsets": {
				"from": 5473400,
				"to": 5478920
			},
			"text": " and how actually you can access these commitments i will get later what we call the commitment"
		},
		{
			"timestamps": {
				"from": "01:31:18,920",
				"to": "01:31:27,160"
			},
			"offsets": {
				"from": 5478920,
				"to": 5487160
			},
			"text": " in a trusted manner and how we make some of our contracts self-aware and enable historical data"
		},
		{
			"timestamps": {
				"from": "01:31:27,160",
				"to": "01:31:39,320"
			},
			"offsets": {
				"from": 5487160,
				"to": 5499320
			},
			"text": " reads cool so um it's pretty uh that's pretty tricky so uh about the background that i want you to"
		},
		{
			"timestamps": {
				"from": "01:31:39,320",
				"to": "01:31:45,640"
			},
			"offsets": {
				"from": 5499320,
				"to": 5505640
			},
			"text": " have for this workshop so we're gonna like start from the biggest basics so what is a hashing function"
		},
		{
			"timestamps": {
				"from": "01:31:45,640",
				"to": "01:31:50,920"
			},
			"offsets": {
				"from": 5505640,
				"to": 5510920
			},
			"text": " just a very quick reminder i hope it will take less in a minute uh like generalized blockchain"
		},
		{
			"timestamps": {
				"from": "01:31:50,920",
				"to": "01:31:57,320"
			},
			"offsets": {
				"from": 5510920,
				"to": 5517320
			},
			"text": " anatomy how an interim header looks like white theorem they're not like pretty on only like"
		},
		{
			"timestamps": {
				"from": "01:31:57,320",
				"to": "01:32:02,040"
			},
			"offsets": {
				"from": 5517320,
				"to": 5522040
			},
			"text": " theorem focused however i think that for the sake of this workshop it's the best to like present on"
		},
		{
			"timestamps": {
				"from": "01:32:02,040",
				"to": "01:32:09,080"
			},
			"offsets": {
				"from": 5522040,
				"to": 5529080
			},
			"text": " this concrete example miracle trees explain me like on five i will just quickly explain the idea"
		},
		{
			"timestamps": {
				"from": "01:32:09,080",
				"to": "01:32:15,400"
			},
			"offsets": {
				"from": 5529080,
				"to": 5535400
			},
			"text": " how it works and what is a miracle patricia tree without really going too much into the details um"
		},
		{
			"timestamps": {
				"from": "01:32:15,400",
				"to": "01:32:24,360"
			},
			"offsets": {
				"from": 5535400,
				"to": 5544360
			},
			"text": " yeah finally no not finally uh the anatomy theorem state it's pretty important to like deal with this"
		},
		{
			"timestamps": {
				"from": "01:32:24,360",
				"to": "01:32:32,760"
			},
			"offsets": {
				"from": 5544360,
				"to": 5552760
			},
			"text": " with this primitive and finally how to deal with this origin layout cool so hashing function essentially"
		},
		{
			"timestamps": {
				"from": "01:32:32,760",
				"to": "01:32:40,840"
			},
			"offsets": {
				"from": 5552760,
				"to": 5560840
			},
			"text": " is this idea essentially it's this idea that i can have a function that takes some input of any size"
		},
		{
			"timestamps": {
				"from": "01:32:40,840",
				"to": "01:32:48,200"
			},
			"offsets": {
				"from": 5560840,
				"to": 5568200
			},
			"text": " any hours always return an output of a fixed size and now what's also important there is no input"
		},
		{
			"timestamps": {
				"from": "01:32:48,200",
				"to": "01:32:53,720"
			},
			"offsets": {
				"from": 5568200,
				"to": 5573720
			},
			"text": " there are no two inputs that will generate the same output and you cannot reverse the hashing"
		},
		{
			"timestamps": {
				"from": "01:32:53,720",
				"to": "01:32:57,800"
			},
			"offsets": {
				"from": 5573720,
				"to": 5577800
			},
			"text": " functions that means that even the output you don't know what is the input and this is that what we"
		},
		{
			"timestamps": {
				"from": "01:32:57,800",
				"to": "01:33:03,160"
			},
			"offsets": {
				"from": 5577800,
				"to": 5583160
			},
			"text": " call like collision resistance pretty useful primitive like using blockchains uh i will and i think"
		},
		{
			"timestamps": {
				"from": "01:33:03,160",
				"to": "01:33:08,600"
			},
			"offsets": {
				"from": 5583160,
				"to": 5588600
			},
			"text": " that's the pretty much that i assume that everyone is like familiar with it like yeah okay why is it"
		},
		{
			"timestamps": {
				"from": "01:33:08,600",
				"to": "01:33:18,120"
			},
			"offsets": {
				"from": 5588600,
				"to": 5598120
			},
			"text": " important um so generalize blockchain anatomy so why we call it a chain because we have a"
		},
		{
			"timestamps": {
				"from": "01:33:18,120",
				"to": "01:33:24,360"
			},
			"offsets": {
				"from": 5598120,
				"to": 5604360
			},
			"text": " bunch of blocks bind together like link together because each block contains the reference of the"
		},
		{
			"timestamps": {
				"from": "01:33:24,360",
				"to": "01:33:29,560"
			},
			"offsets": {
				"from": 5604360,
				"to": 5609560
			},
			"text": " parent hash and the previous header contains the reference of the parent hash which is pretty cool"
		},
		{
			"timestamps": {
				"from": "01:33:29,560",
				"to": "01:33:35,640"
			},
			"offsets": {
				"from": 5609560,
				"to": 5615640
			},
			"text": " and let me remind what the hash the the parent hash or the block hash of uh only theorem is it's"
		},
		{
			"timestamps": {
				"from": "01:33:35,640",
				"to": "01:33:41,240"
			},
			"offsets": {
				"from": 5615640,
				"to": 5621240
			},
			"text": " essentially the hash of the header uh pretty important to deal with these primitives and make"
		},
		{
			"timestamps": {
				"from": "01:33:41,240",
				"to": "01:33:46,760"
			},
			"offsets": {
				"from": 5621240,
				"to": 5626760
			},
			"text": " smart contract software so accessing six article state um to just keep that in mind"
		},
		{
			"timestamps": {
				"from": "01:33:46,760",
				"to": "01:33:52,040"
			},
			"offsets": {
				"from": 5626760,
				"to": 5632040
			},
			"text": " let's get to the next part so um no"
		},
		{
			"timestamps": {
				"from": "01:33:52,040",
				"to": "01:34:03,480"
			},
			"offsets": {
				"from": 5632040,
				"to": 5643480
			},
			"text": " uh i think i'm missing one slide no it's the correct one okay so uh this is an interim block"
		},
		{
			"timestamps": {
				"from": "01:34:03,480",
				"to": "01:34:09,720"
			},
			"offsets": {
				"from": 5643480,
				"to": 5649720
			},
			"text": " header uh as i said we're gonna go through the example of ethereum completely so a bit of anatomy so"
		},
		{
			"timestamps": {
				"from": "01:34:09,720",
				"to": "01:34:14,360"
			},
			"offsets": {
				"from": 5649720,
				"to": 5654360
			},
			"text": " to access state obviously we need the state root what is the state root is the root of the"
		},
		{
			"timestamps": {
				"from": "01:34:14,360",
				"to": "01:34:20,120"
			},
			"offsets": {
				"from": 5654360,
				"to": 5660120
			},
			"text": " merco patricia tree of the ethereum state we also have the transactions root which is pretty useful"
		},
		{
			"timestamps": {
				"from": "01:34:20,120",
				"to": "01:34:26,040"
			},
			"offsets": {
				"from": 5660120,
				"to": 5666040
			},
			"text": " if you want to access historical transactions like their entire body um and receipt root so it's"
		},
		{
			"timestamps": {
				"from": "01:34:26,040",
				"to": "01:34:32,840"
			},
			"offsets": {
				"from": 5666040,
				"to": 5672840
			},
			"text": " reducible to access any events logs and and so on and all of these are like root of the merco"
		},
		{
			"timestamps": {
				"from": "01:34:32,840",
				"to": "01:34:38,040"
			},
			"offsets": {
				"from": 5672840,
				"to": 5678040
			},
			"text": " patricia tree a merco patricia tree a merco tree just think of it in that in that way"
		},
		{
			"timestamps": {
				"from": "01:34:38,040",
				"to": "01:34:44,440"
			},
			"offsets": {
				"from": 5678040,
				"to": 5684440
			},
			"text": " and most importantly we have the parent hash and with the parent hash we can in a way go go backwards"
		},
		{
			"timestamps": {
				"from": "01:34:44,440",
				"to": "01:34:52,360"
			},
			"offsets": {
				"from": 5684440,
				"to": 5692360
			},
			"text": " i think that's it let's get to merco tree so essentially it's this idea that i can take whatever"
		},
		{
			"timestamps": {
				"from": "01:34:52,360",
				"to": "01:34:59,720"
			},
			"offsets": {
				"from": 5692360,
				"to": 5699720
			},
			"text": " amount of data and i can commit it in a cryptographic manner by using this data structure so on the"
		},
		{
			"timestamps": {
				"from": "01:34:59,720",
				"to": "01:35:05,800"
			},
			"offsets": {
				"from": 5699720,
				"to": 5705800
			},
			"text": " left side we see a standard merco tree so essentially all the data goes to the bottom and we essentially"
		},
		{
			"timestamps": {
				"from": "01:35:05,800",
				"to": "01:35:09,640"
			},
			"offsets": {
				"from": 5705800,
				"to": 5709640
			},
			"text": " hash it you know what the hashing function is then we combine these two hashes together with hash it"
		},
		{
			"timestamps": {
				"from": "01:35:09,640",
				"to": "01:35:14,680"
			},
			"offsets": {
				"from": 5709640,
				"to": 5714680
			},
			"text": " and uh we keep doing that till we get to essentially one hash and this is what we call the root"
		},
		{
			"timestamps": {
				"from": "01:35:14,680",
				"to": "01:35:21,160"
			},
			"offsets": {
				"from": 5714680,
				"to": 5721160
			},
			"text": " merco patricia tree modified merco patricia tree to be exact this is uh the data structure that we"
		},
		{
			"timestamps": {
				"from": "01:35:21,160",
				"to": "01:35:27,160"
			},
			"offsets": {
				"from": 5721160,
				"to": 5727160
			},
			"text": " use in ethereum um what you see here i hope you see on the top we have the state root"
		},
		{
			"timestamps": {
				"from": "01:35:27,160",
				"to": "01:35:32,360"
			},
			"offsets": {
				"from": 5727160,
				"to": 5732360
			},
			"text": " and essentially the state root is the root of this tree and now how it works and how you should"
		},
		{
			"timestamps": {
				"from": "01:35:32,360",
				"to": "01:35:37,480"
			},
			"offsets": {
				"from": 5732360,
				"to": 5737480
			},
			"text": " think of this of this it's a pretty complex data structure i don't want you to bother with it today"
		},
		{
			"timestamps": {
				"from": "01:35:37,480",
				"to": "01:35:45,800"
			},
			"offsets": {
				"from": 5737480,
				"to": 5745800
			},
			"text": " but essentially we have three types of like nodes we have leaf nodes extension nodes and branch nodes"
		},
		{
			"timestamps": {
				"from": "01:35:46,360",
				"to": "01:35:52,520"
			},
			"offsets": {
				"from": 5746360,
				"to": 5752520
			},
			"text": " so leaf nodes contain data branch nodes contain data and extension nodes like on the high level"
		},
		{
			"timestamps": {
				"from": "01:35:52,520",
				"to": "01:35:57,000"
			},
			"offsets": {
				"from": 5752520,
				"to": 5757000
			},
			"text": " just help us to like sort of navigating that tree but to be honest to deal with storage"
		},
		{
			"timestamps": {
				"from": "01:35:57,000",
				"to": "01:36:02,360"
			},
			"offsets": {
				"from": 5757000,
				"to": 5762360
			},
			"text": " fruits we don't really need to understand this part but to like build on the low level as we do"
		},
		{
			"timestamps": {
				"from": "01:36:02,360",
				"to": "01:36:09,640"
			},
			"offsets": {
				"from": 5762360,
				"to": 5769640
			},
			"text": " obviously we need to uh we need to deal pretty pretty about with that with that part okay so"
		},
		{
			"timestamps": {
				"from": "01:36:09,640",
				"to": "01:36:15,160"
			},
			"offsets": {
				"from": 5769640,
				"to": 5775160
			},
			"text": " ethereum state how is it constructed most important takeaway it's a two level structure"
		},
		{
			"timestamps": {
				"from": "01:36:15,160",
				"to": "01:36:20,360"
			},
			"offsets": {
				"from": 5775160,
				"to": 5780360
			},
			"text": " so i mentioned that the state root is a commitment of the entire state but it's not really true because"
		},
		{
			"timestamps": {
				"from": "01:36:20,360",
				"to": "01:36:27,960"
			},
			"offsets": {
				"from": 5780360,
				"to": 5787960
			},
			"text": " ethereum is a it's true okay it works it's uh it's account based um and essentially the state root is"
		},
		{
			"timestamps": {
				"from": "01:36:27,960",
				"to": "01:36:33,160"
			},
			"offsets": {
				"from": 5787960,
				"to": 5793160
			},
			"text": " the commitment of all the accounts that exist on ethereum and what an account is made of it's made"
		},
		{
			"timestamps": {
				"from": "01:36:33,160",
				"to": "01:36:41,480"
			},
			"offsets": {
				"from": 5793160,
				"to": 5801480
			},
			"text": " of a balance like the e balance it's a non-transaction counter storage root the storage root is like the"
		},
		{
			"timestamps": {
				"from": "01:36:41,480",
				"to": "01:36:47,960"
			},
			"offsets": {
				"from": 5801480,
				"to": 5807960
			},
			"text": " root of another america patricia tree and this america patricia tree contains a key value database"
		},
		{
			"timestamps": {
				"from": "01:36:47,960",
				"to": "01:36:55,320"
			},
			"offsets": {
				"from": 5807960,
				"to": 5815320
			},
			"text": " that holds like the mapping from storage key to its actual value and finally we have the code"
		},
		{
			"timestamps": {
				"from": "01:36:55,320",
				"to": "01:37:02,520"
			},
			"offsets": {
				"from": 5815320,
				"to": 5822520
			},
			"text": " hash it's essentially the hash of the um the byte code so main takeaway first we access accounts"
		},
		{
			"timestamps": {
				"from": "01:37:02,520",
				"to": "01:37:06,520"
			},
			"offsets": {
				"from": 5822520,
				"to": 5826520
			},
			"text": " and once we have the account storage root we can access is it's it's the"
		},
		{
			"timestamps": {
				"from": "01:37:07,800",
				"to": "01:37:16,520"
			},
			"offsets": {
				"from": 5827800,
				"to": 5836520
			},
			"text": " okay um cool so to sum it up uh like the background so main takeaways given the block state root you"
		},
		{
			"timestamps": {
				"from": "01:37:16,520",
				"to": "01:37:25,720"
			},
			"offsets": {
				"from": 5836520,
				"to": 5845720
			},
			"text": " can recreate any any state for the specific block on this network and given an initial trusted block"
		},
		{
			"timestamps": {
				"from": "01:37:25,720",
				"to": "01:37:32,200"
			},
			"offsets": {
				"from": 5845720,
				"to": 5852200
			},
			"text": " hash you can essentially recreate all the previous headers which is pretty pretty cool and important"
		},
		{
			"timestamps": {
				"from": "01:37:32,200",
				"to": "01:37:38,680"
			},
			"offsets": {
				"from": 5852200,
				"to": 5858680
			},
			"text": " to get the ideas that i will explain like pretty soon okay so as it's gonna be a workshop it's a"
		},
		{
			"timestamps": {
				"from": "01:37:38,680",
				"to": "01:37:45,400"
			},
			"offsets": {
				"from": 5858680,
				"to": 5865400
			},
			"text": " short one so i won't let you code but i will show you some concrete examples so what i want you to"
		},
		{
			"timestamps": {
				"from": "01:37:45,400",
				"to": "01:37:52,440"
			},
			"offsets": {
				"from": 5865400,
				"to": 5872440
			},
			"text": " like go through with me today is how we can prove the ownership of a lance profile on another chain"
		},
		{
			"timestamps": {
				"from": "01:37:52,440",
				"to": "01:38:00,760"
			},
			"offsets": {
				"from": 5872440,
				"to": 5880760
			},
			"text": " so a bit of background lance profiles are represented as nft's and lance is deployed on"
		},
		{
			"timestamps": {
				"from": "01:38:00,760",
				"to": "01:38:09,400"
			},
			"offsets": {
				"from": 5880760,
				"to": 5889400
			},
			"text": " polygon i think that's it how do we get to this so first of all the question that we need to answer"
		},
		{
			"timestamps": {
				"from": "01:38:09,400",
				"to": "01:38:15,880"
			},
			"offsets": {
				"from": 5889400,
				"to": 5895880
			},
			"text": " to ourself is how does polygon commit to tromel one because if we want to like let's say prove the"
		},
		{
			"timestamps": {
				"from": "01:38:15,880",
				"to": "01:38:23,080"
			},
			"offsets": {
				"from": 5895880,
				"to": 5903080
			},
			"text": " ownership of a lance profile on optimism we need to know the state root of polygon but there is"
		},
		{
			"timestamps": {
				"from": "01:38:23,080",
				"to": "01:38:30,680"
			},
			"offsets": {
				"from": 5903080,
				"to": 5910680
			},
			"text": " tromel one in the middle so how do we actually access this on tromel one primarily so uh polygon"
		},
		{
			"timestamps": {
				"from": "01:38:30,680",
				"to": "01:38:39,640"
			},
			"offsets": {
				"from": 5910680,
				"to": 5919640
			},
			"text": " is a commit chain and it commits to tromem a bunch of things every some amount of time"
		},
		{
			"timestamps": {
				"from": "01:38:39,640",
				"to": "01:38:45,160"
			},
			"offsets": {
				"from": 5919640,
				"to": 5925160
			},
			"text": " and essentially on one we do not validate the entire state transition but we just verify the"
		},
		{
			"timestamps": {
				"from": "01:38:45,160",
				"to": "01:38:54,040"
			},
			"offsets": {
				"from": 5925160,
				"to": 5934040
			},
			"text": " consensus of polygon and this checkpoints how they call it essentially contain state roots and so"
		},
		{
			"timestamps": {
				"from": "01:38:54,040",
				"to": "01:39:02,760"
			},
			"offsets": {
				"from": 5934040,
				"to": 5942760
			},
			"text": " i mean not directly but we can access them and let's get to this to this part so this is taken"
		},
		{
			"timestamps": {
				"from": "01:39:02,760",
				"to": "01:39:10,360"
			},
			"offsets": {
				"from": 5942760,
				"to": 5950360
			},
			"text": " from polygon's documentation and this is how a checkpoint looks like so as you can see the checkpoint"
		},
		{
			"timestamps": {
				"from": "01:39:10,360",
				"to": "01:39:16,360"
			},
			"offsets": {
				"from": 5950360,
				"to": 5956360
			},
			"text": " is made of a proposal so who proposed the block start block and block give me a second i will get"
		},
		{
			"timestamps": {
				"from": "01:39:16,360",
				"to": "01:39:21,960"
			},
			"offsets": {
				"from": 5956360,
				"to": 5961960
			},
			"text": " to this and most importantly we have the root hash so the root hash is essentially a miracle tree not"
		},
		{
			"timestamps": {
				"from": "01:39:21,960",
				"to": "01:39:28,440"
			},
			"offsets": {
				"from": 5961960,
				"to": 5968440
			},
			"text": " a miracle patricia tree that contains all the headers and which headers the headers in the range of"
		},
		{
			"timestamps": {
				"from": "01:39:28,440",
				"to": "01:39:37,960"
			},
			"offsets": {
				"from": 5968440,
				"to": 5977960
			},
			"text": " start block and end block cool so now if we get back to the previous part we can essentially prove"
		},
		{
			"timestamps": {
				"from": "01:39:37,960",
				"to": "01:39:44,760"
			},
			"offsets": {
				"from": 5977960,
				"to": 5984760
			},
			"text": " with this commitment that we know the valid state root of polygon first leave and block"
		},
		{
			"timestamps": {
				"from": "01:39:46,840",
				"to": "01:39:54,120"
			},
			"offsets": {
				"from": 5986840,
				"to": 5994120
			},
			"text": " okay a bit of hands-on so we want to prove that i own a lens profile on polygon forever so"
		},
		{
			"timestamps": {
				"from": "01:39:54,120",
				"to": "01:40:00,920"
			},
			"offsets": {
				"from": 5994120,
				"to": 6000920
			},
			"text": " for one we go to the contracts we see a contract we go for it and we see that"
		},
		{
			"timestamps": {
				"from": "01:40:00,920",
				"to": "01:40:08,200"
			},
			"offsets": {
				"from": 6000920,
				"to": 6008200
			},
			"text": " essentially there is a bunch of logic on top of this erc721 this is like the basic erc71 as you"
		},
		{
			"timestamps": {
				"from": "01:40:08,200",
				"to": "01:40:13,960"
			},
			"offsets": {
				"from": 6008200,
				"to": 6013960
			},
			"text": " can see it's an abstract contract and it's slightly modified instead of having like a standard mapping"
		},
		{
			"timestamps": {
				"from": "01:40:13,960",
				"to": "01:40:20,440"
			},
			"offsets": {
				"from": 6013960,
				"to": 6020440
			},
			"text": " from like token id to its owner we have like token id to token data token it is a struct"
		},
		{
			"timestamps": {
				"from": "01:40:20,440",
				"to": "01:40:27,080"
			},
			"offsets": {
				"from": 6020440,
				"to": 6027080
			},
			"text": " this struct is 32 bytes in total 20 bytes is the actual owner and the remaining 12 bytes represent"
		},
		{
			"timestamps": {
				"from": "01:40:27,080",
				"to": "01:40:34,600"
			},
			"offsets": {
				"from": 6027080,
				"to": 6034600
			},
			"text": " one the token was minted okay but how do i actually prove it oh and also very important"
		},
		{
			"timestamps": {
				"from": "01:40:34,600",
				"to": "01:40:39,560"
			},
			"offsets": {
				"from": 6034600,
				"to": 6039560
			},
			"text": " thing when dealing with storage layout we have something that is called like slot indices so each"
		},
		{
			"timestamps": {
				"from": "01:40:39,560",
				"to": "01:40:47,080"
			},
			"offsets": {
				"from": 6039560,
				"to": 6047080
			},
			"text": " variable has a given slot like in the some sort of meta layout i call it like that it's from"
		},
		{
			"timestamps": {
				"from": "01:40:47,080",
				"to": "01:40:55,960"
			},
			"offsets": {
				"from": 6047080,
				"to": 6055960
			},
			"text": " the right way anyways this mapping it has like the slot index 2 i will get to this part in a"
		},
		{
			"timestamps": {
				"from": "01:40:55,960",
				"to": "01:41:02,600"
			},
			"offsets": {
				"from": 6055960,
				"to": 6062600
			},
			"text": " second why it's 2 and we have a mapping from token id so you into 32 bytes of data represent"
		},
		{
			"timestamps": {
				"from": "01:41:02,600",
				"to": "01:41:10,600"
			},
			"offsets": {
				"from": 6062600,
				"to": 6070600
			},
			"text": " represent this struct but just think of it as some bytes okay so i guess most of you use hard"
		},
		{
			"timestamps": {
				"from": "01:41:10,600",
				"to": "01:41:16,680"
			},
			"offsets": {
				"from": 6070600,
				"to": 6076680
			},
			"text": " hot so i'm gonna present on on hard hot there is a very very cool tool to deal with storage"
		},
		{
			"timestamps": {
				"from": "01:41:16,680",
				"to": "01:41:21,880"
			},
			"offsets": {
				"from": 6076680,
				"to": 6081880
			},
			"text": " layouts it's called obviously hard hot storage layout this is how you install it it's literally"
		},
		{
			"timestamps": {
				"from": "01:41:21,880",
				"to": "01:41:27,880"
			},
			"offsets": {
				"from": 6081880,
				"to": 6087880
			},
			"text": " yarn install hard hot storage layout you add one comment to your hard hot config you write a new"
		},
		{
			"timestamps": {
				"from": "01:41:27,880",
				"to": "01:41:33,160"
			},
			"offsets": {
				"from": 6087880,
				"to": 6093160
			},
			"text": " script that contains literally eight lines of code you run the script and you get this weird table"
		},
		{
			"timestamps": {
				"from": "01:41:33,160",
				"to": "01:41:38,920"
			},
			"offsets": {
				"from": 6093160,
				"to": 6098920
			},
			"text": " i want does it what does it really tell you and oh by the way why this tool is pretty useful"
		},
		{
			"timestamps": {
				"from": "01:41:38,920",
				"to": "01:41:45,400"
			},
			"offsets": {
				"from": 6098920,
				"to": 6105400
			},
			"text": " as you see this contract is abstract so some other contracts you can does it's too"
		},
		{
			"timestamps": {
				"from": "01:41:45,400",
				"to": "01:41:51,320"
			},
			"offsets": {
				"from": 6105400,
				"to": 6111320
			},
			"text": " yeah some contracts can inherit from it and obviously why we inherit the storage layout i mean"
		},
		{
			"timestamps": {
				"from": "01:41:51,320",
				"to": "01:41:59,000"
			},
			"offsets": {
				"from": 6111320,
				"to": 6119000
			},
			"text": " this does this in synthesis can can get more trickier because it also live okay so that's"
		},
		{
			"timestamps": {
				"from": "01:41:59,000",
				"to": "01:42:07,240"
			},
			"offsets": {
				"from": 6119000,
				"to": 6127240
			},
			"text": " it's pretty hard to coordinate like one hand with another hand even though i'm Italian okay anyways"
		},
		{
			"timestamps": {
				"from": "01:42:07,240",
				"to": "01:42:17,480"
			},
			"offsets": {
				"from": 6127240,
				"to": 6137480
			},
			"text": " yeah we know this slot in the index and that's how we get it we have a column that is called"
		},
		{
			"timestamps": {
				"from": "01:42:18,760",
				"to": "01:42:25,400"
			},
			"offsets": {
				"from": 6138760,
				"to": 6145400
			},
			"text": " storage slot and as you see under score token data is marked as two and that's it okay but"
		},
		{
			"timestamps": {
				"from": "01:42:25,400",
				"to": "01:42:32,360"
			},
			"offsets": {
				"from": 6145400,
				"to": 6152360
			},
			"text": " what do we do with it how do we get this storage key and yeah that's it let me check your time"
		},
		{
			"timestamps": {
				"from": "01:42:32,360",
				"to": "01:42:41,480"
			},
			"offsets": {
				"from": 6152360,
				"to": 6161480
			},
			"text": " okay so a bit of hands on how do we get the actual storage it sounds scary and it's meant to be"
		},
		{
			"timestamps": {
				"from": "01:42:41,480",
				"to": "01:42:49,240"
			},
			"offsets": {
				"from": 6161480,
				"to": 6169240
			},
			"text": " scary so we know the slot index the storage index i want to prove that it's like zero x 35"
		},
		{
			"timestamps": {
				"from": "01:42:49,240",
				"to": "01:43:00,040"
			},
			"offsets": {
				"from": 6169240,
				"to": 6180040
			},
			"text": " and and i also with id 35 94 how do we get the storage key we essentially do this operation so we"
		},
		{
			"timestamps": {
				"from": "01:43:00,040",
				"to": "01:43:10,280"
			},
			"offsets": {
				"from": 6180040,
				"to": 6190280
			},
			"text": " concatenate the slot i mean the key in the mapping which is 35 94 because this is the token id"
		},
		{
			"timestamps": {
				"from": "01:43:10,280",
				"to": "01:43:14,120"
			},
			"offsets": {
				"from": 6190280,
				"to": 6194120
			},
			"text": " as you know we have a mapping from token id to token data token data contains the"
		},
		{
			"timestamps": {
				"from": "01:43:14,120",
				"to": "01:43:23,480"
			},
			"offsets": {
				"from": 6194120,
				"to": 6203480
			},
			"text": " okay so we concatenate this with the storage index we have to talk together this is the storage key"
		},
		{
			"timestamps": {
				"from": "01:43:23,480",
				"to": "01:43:30,040"
			},
			"offsets": {
				"from": 6203480,
				"to": 6210040
			},
			"text": " that we have if you're interested how to deal with it for like more complex mappings and like"
		},
		{
			"timestamps": {
				"from": "01:43:30,040",
				"to": "01:43:37,240"
			},
			"offsets": {
				"from": 6210040,
				"to": 6217240
			},
			"text": " layouts back the solidity documentation it's explained pretty well so"
		},
		{
			"timestamps": {
				"from": "01:43:38,760",
				"to": "01:43:45,000"
			},
			"offsets": {
				"from": 6218760,
				"to": 6225000
			},
			"text": " now that's to make sure we got the proper storage key let's just check it how we can check it"
		},
		{
			"timestamps": {
				"from": "01:43:45,000",
				"to": "01:43:51,640"
			},
			"offsets": {
				"from": 6225000,
				"to": 6231640
			},
			"text": " super easy but just make a one-liter PC call to get this storage it sounds specific key"
		},
		{
			"timestamps": {
				"from": "01:43:51,640",
				"to": "01:43:59,480"
			},
			"offsets": {
				"from": 6231640,
				"to": 6239480
			},
			"text": " is if if gets storage at so the parameters we want to access the storage of what of the lens"
		},
		{
			"timestamps": {
				"from": "01:43:59,480",
				"to": "01:44:05,000"
			},
			"offsets": {
				"from": 6239480,
				"to": 6245000
			},
			"text": " hub lens hub is the contract that essentially is the representation of these profiles"
		},
		{
			"timestamps": {
				"from": "01:44:05,720",
				"to": "01:44:10,600"
			},
			"offsets": {
				"from": 6245720,
				"to": 6250600
			},
			"text": " and it's address is zero x d d d four and so on and the slot"
		},
		{
			"timestamps": {
				"from": "01:44:10,600",
				"to": "01:44:23,000"
			},
			"offsets": {
				"from": 6250600,
				"to": 6263000
			},
			"text": " oh is it better oh it's much better and the slot the storage key is zero x one so essentially"
		},
		{
			"timestamps": {
				"from": "01:44:23,000",
				"to": "01:44:30,760"
			},
			"offsets": {
				"from": 6263000,
				"to": 6270760
			},
			"text": " that's the hush that we got and the result is zero x zero zero zero and we know that it's 32"
		},
		{
			"timestamps": {
				"from": "01:44:30,760",
				"to": "01:44:38,040"
			},
			"offsets": {
				"from": 6270760,
				"to": 6278040
			},
			"text": " vice of data where we have 20 and 12 so let's split it into 12 and 20 bytes and what we have is"
		},
		{
			"timestamps": {
				"from": "01:44:38,040",
				"to": "01:44:47,240"
			},
			"offsets": {
				"from": 6278040,
				"to": 6287240
			},
			"text": " some number like you can see zero x a lot of zeros than 62 till d and this looks like a small"
		},
		{
			"timestamps": {
				"from": "01:44:47,240",
				"to": "01:44:54,440"
			},
			"offsets": {
				"from": 6287240,
				"to": 6294440
			},
			"text": " number so apparently it is a timestamp and the second part is like 35 57 and it's literally our"
		},
		{
			"timestamps": {
				"from": "01:44:54,440",
				"to": "01:44:59,800"
			},
			"offsets": {
				"from": 6294440,
				"to": 6299800
			},
			"text": " address so we got it correct we have the proper storage key cool"
		},
		{
			"timestamps": {
				"from": "01:44:59,800",
				"to": "01:45:09,800"
			},
			"offsets": {
				"from": 6299800,
				"to": 6309800
			},
			"text": " but how do we actually get to storage proofs so there are standardized methods in like the"
		},
		{
			"timestamps": {
				"from": "01:45:09,800",
				"to": "01:45:16,280"
			},
			"offsets": {
				"from": 6309800,
				"to": 6316280
			},
			"text": " JSON or PC standard for Ethereum clients and this method is called ETH get proof which essentially"
		},
		{
			"timestamps": {
				"from": "01:45:16,280",
				"to": "01:45:22,760"
			},
			"offsets": {
				"from": 6316280,
				"to": 6322760
			},
			"text": " given the contract address so um better call it account address in this specific case"
		},
		{
			"timestamps": {
				"from": "01:45:22,760",
				"to": "01:45:28,920"
			},
			"offsets": {
				"from": 6322760,
				"to": 6328920
			},
			"text": " allows us to generate a state proof and the last argument I mean the sorry the second argument"
		},
		{
			"timestamps": {
				"from": "01:45:28,920",
				"to": "01:45:35,560"
			},
			"offsets": {
				"from": 6328920,
				"to": 6335560
			},
			"text": " is an array that contains all these storage storage keys if we want to prove there is another"
		},
		{
			"timestamps": {
				"from": "01:45:35,560",
				"to": "01:45:40,680"
			},
			"offsets": {
				"from": 6335560,
				"to": 6340680
			},
			"text": " argument which is zero x one a it's essentially the block number for which we prove the state"
		},
		{
			"timestamps": {
				"from": "01:45:40,680",
				"to": "01:45:47,640"
			},
			"offsets": {
				"from": 6340680,
				"to": 6347640
			},
			"text": " yeah let's call this method oh by the way you might have a question how do we deal with this"
		},
		{
			"timestamps": {
				"from": "01:45:47,640",
				"to": "01:45:54,600"
			},
			"offsets": {
				"from": 6347640,
				"to": 6354600
			},
			"text": " method on non-evm chains because for example on some specific roll-ups this method is like not"
		},
		{
			"timestamps": {
				"from": "01:45:54,600",
				"to": "01:46:00,200"
			},
			"offsets": {
				"from": 6354600,
				"to": 6360200
			},
			"text": " supported actually it's not a big deal because if you think of it we just need the database"
		},
		{
			"timestamps": {
				"from": "01:46:00,200",
				"to": "01:46:04,840"
			},
			"offsets": {
				"from": 6360200,
				"to": 6364840
			},
			"text": " and on top of this database we can literally build this this method we just need to know how the"
		},
		{
			"timestamps": {
				"from": "01:46:04,840",
				"to": "01:46:13,960"
			},
			"offsets": {
				"from": 6364840,
				"to": 6373960
			},
			"text": " storage is constructed okay this is the proof it looks scary it is scary this entire object is"
		},
		{
			"timestamps": {
				"from": "01:46:13,960",
				"to": "01:46:21,240"
			},
			"offsets": {
				"from": 6373960,
				"to": 6381240
			},
			"text": " four kilobytes of data and now I mentioned before that the state is like a two-level structure"
		},
		{
			"timestamps": {
				"from": "01:46:21,240",
				"to": "01:46:26,760"
			},
			"offsets": {
				"from": 6381240,
				"to": 6386760
			},
			"text": " first we have a proof for the account itself and then we have the proof for the storage I mean"
		},
		{
			"timestamps": {
				"from": "01:46:26,760",
				"to": "01:46:34,440"
			},
			"offsets": {
				"from": 6386760,
				"to": 6394440
			},
			"text": " for the actual storage slot it is scary it's meant to be scary one proof is like more or less 600"
		},
		{
			"timestamps": {
				"from": "01:46:34,440",
				"to": "01:46:40,840"
			},
			"offsets": {
				"from": 6394440,
				"to": 6400840
			},
			"text": " bytes 700 bytes it really depends like bigger the storage is than bigger the proof is and also"
		},
		{
			"timestamps": {
				"from": "01:46:40,840",
				"to": "01:46:47,880"
			},
			"offsets": {
				"from": 6400840,
				"to": 6407880
			},
			"text": " more accounts we have than bigger the account proof is so that's a lot of cool data if you can"
		},
		{
			"timestamps": {
				"from": "01:46:47,880",
				"to": "01:46:55,080"
			},
			"offsets": {
				"from": 6407880,
				"to": 6415080
			},
			"text": " imagine and yeah that's that's pretty bad why because we need to pause this proof on the chain"
		},
		{
			"timestamps": {
				"from": "01:46:55,080",
				"to": "01:47:02,520"
			},
			"offsets": {
				"from": 6415080,
				"to": 6422520
			},
			"text": " so it's a lot of cool data but okay let's let's try what is going to be the cost on like an"
		},
		{
			"timestamps": {
				"from": "01:47:02,520",
				"to": "01:47:11,000"
			},
			"offsets": {
				"from": 6422520,
				"to": 6431000
			},
			"text": " EVM chain that's the cost it's like 600k of gas that's a lot that kills almost every single"
		},
		{
			"timestamps": {
				"from": "01:47:11,000",
				"to": "01:47:16,520"
			},
			"offsets": {
				"from": 6431000,
				"to": 6436520
			},
			"text": " application that you want to build on top of this nice primitive so it's pretty bad and why is it"
		},
		{
			"timestamps": {
				"from": "01:47:16,520",
				"to": "01:47:22,600"
			},
			"offsets": {
				"from": 6436520,
				"to": 6442600
			},
			"text": " that bad so I explained on the high level what merkle trees are and merkle patricia trees are"
		},
		{
			"timestamps": {
				"from": "01:47:22,600",
				"to": "01:47:27,560"
			},
			"offsets": {
				"from": 6442600,
				"to": 6447560
			},
			"text": " only fair we use merkle patricia trees and essentially there is a trade-off that when using merkle"
		},
		{
			"timestamps": {
				"from": "01:47:27,560",
				"to": "01:47:33,480"
			},
			"offsets": {
				"from": 6447560,
				"to": 6453480
			},
			"text": " patricia trees the proof is a slightly bigger it's like harder to decode it because actually we need"
		},
		{
			"timestamps": {
				"from": "01:47:33,480",
				"to": "01:47:40,520"
			},
			"offsets": {
				"from": 6453480,
				"to": 6460520
			},
			"text": " to do some a bit of decoding there but we need to do less hashing so this is a trade-off but"
		},
		{
			"timestamps": {
				"from": "01:47:40,520",
				"to": "01:47:46,040"
			},
			"offsets": {
				"from": 6460520,
				"to": 6466040
			},
			"text": " depending where we actually verify this proof might be more feasible to verify like proof that is"
		},
		{
			"timestamps": {
				"from": "01:47:46,040",
				"to": "01:47:53,000"
			},
			"offsets": {
				"from": 6466040,
				"to": 6473000
			},
			"text": " based on merkle patricia trees or merkle trees okay but there is a solution and the solution is"
		},
		{
			"timestamps": {
				"from": "01:47:53,000",
				"to": "01:48:00,200"
			},
			"offsets": {
				"from": 6473000,
				"to": 6480200
			},
			"text": " what if we snarkify such such a proof and we verify this proof inside the snark why is it cool because"
		},
		{
			"timestamps": {
				"from": "01:48:00,200",
				"to": "01:48:05,960"
			},
			"offsets": {
				"from": 6480200,
				"to": 6485960
			},
			"text": " we can like let's say that i'm gonna verify this proof inside the graph cross 16 circuit"
		},
		{
			"timestamps": {
				"from": "01:48:05,960",
				"to": "01:48:15,000"
			},
			"offsets": {
				"from": 6485960,
				"to": 6495000
			},
			"text": " and yeah the verification cost more or less like 210k gas the proof is like way less than 600 bytes"
		},
		{
			"timestamps": {
				"from": "01:48:15,000",
				"to": "01:48:18,680"
			},
			"offsets": {
				"from": 6495000,
				"to": 6498680
			},
			"text": " so it's good so essentially get rid of the cold data because the proof itself can be the"
		},
		{
			"timestamps": {
				"from": "01:48:19,880",
				"to": "01:48:26,440"
			},
			"offsets": {
				"from": 6499880,
				"to": 6506440
			},
			"text": " private input to the circuit yeah we can like use multiple proving system depending on the"
		},
		{
			"timestamps": {
				"from": "01:48:26,440",
				"to": "01:48:32,280"
			},
			"offsets": {
				"from": 6506440,
				"to": 6512280
			},
			"text": " on the actual use case and now why is it like very very cool so first of all it removes cold data"
		},
		{
			"timestamps": {
				"from": "01:48:32,280",
				"to": "01:48:38,520"
			},
			"offsets": {
				"from": 6512280,
				"to": 6518520
			},
			"text": " second of all it allows us to deal with very unfriendly hashing functions"
		},
		{
			"timestamps": {
				"from": "01:48:38,520",
				"to": "01:48:44,280"
			},
			"offsets": {
				"from": 6518520,
				"to": 6524280
			},
			"text": " or the EVM is the one that we don't have precompiled for like let's say peterson"
		},
		{
			"timestamps": {
				"from": "01:48:46,440",
				"to": "01:48:50,120"
			},
			"offsets": {
				"from": 6526440,
				"to": 6530120
			},
			"text": " so it might be like super expensive to verify such a proof on the EVM because first of all"
		},
		{
			"timestamps": {
				"from": "01:48:50,120",
				"to": "01:48:55,400"
			},
			"offsets": {
				"from": 6530120,
				"to": 6535400
			},
			"text": " that's a lot of cold data and the hashing function is pretty like unfriendly but what if we can like"
		},
		{
			"timestamps": {
				"from": "01:48:55,400",
				"to": "01:49:02,680"
			},
			"offsets": {
				"from": 6535400,
				"to": 6542680
			},
			"text": " do it inside the snark and just verify snark and yeah so another benefits this really really helps"
		},
		{
			"timestamps": {
				"from": "01:49:02,680",
				"to": "01:49:07,640"
			},
			"offsets": {
				"from": 6542680,
				"to": 6547640
			},
			"text": " in obstructing the way how we verify this proof because you don't need to have like one generalized"
		},
		{
			"timestamps": {
				"from": "01:49:07,640",
				"to": "01:49:16,040"
			},
			"offsets": {
				"from": 6547640,
				"to": 6556040
			},
			"text": " verifier for each type of proof but you can essentially obstruct it behind behind the snark"
		},
		{
			"timestamps": {
				"from": "01:49:16,600",
				"to": "01:49:24,920"
			},
			"offsets": {
				"from": 6556600,
				"to": 6564920
			},
			"text": " which is which is great these numbers were taken from a very nice article written by a 16z like"
		},
		{
			"timestamps": {
				"from": "01:49:24,920",
				"to": "01:49:32,600"
			},
			"offsets": {
				"from": 6564920,
				"to": 6572600
			},
			"text": " a bunch of a few a few months ago yeah and I think that's pretty much it let's get to the next slide"
		},
		{
			"timestamps": {
				"from": "01:49:32,600",
				"to": "01:49:40,120"
			},
			"offsets": {
				"from": 6572600,
				"to": 6580120
			},
			"text": " so synchronous cross-layer state access so how can actually a control deployed on some layer access"
		},
		{
			"timestamps": {
				"from": "01:49:40,120",
				"to": "01:49:48,120"
			},
			"offsets": {
				"from": 6580120,
				"to": 6588120
			},
			"text": " the state of another L2 or L1 so I mentioned that we always need the state root but because all of"
		},
		{
			"timestamps": {
				"from": "01:49:48,120",
				"to": "01:49:53,320"
			},
			"offsets": {
				"from": 6588120,
				"to": 6593320
			},
			"text": " these systems have a native messaging system we can send the small commitments like for example"
		},
		{
			"timestamps": {
				"from": "01:49:53,320",
				"to": "01:50:00,360"
			},
			"offsets": {
				"from": 6593320,
				"to": 6600360
			},
			"text": " the block hash to like a one usually it goes all for L1 and and yeah we can like enroll it or send"
		},
		{
			"timestamps": {
				"from": "01:50:00,360",
				"to": "01:50:04,520"
			},
			"offsets": {
				"from": 6600360,
				"to": 6604520
			},
			"text": " the state through directly and also we don't need to rely on messaging what we can for example"
		},
		{
			"timestamps": {
				"from": "01:50:04,520",
				"to": "01:50:09,880"
			},
			"offsets": {
				"from": 6604520,
				"to": 6609880
			},
			"text": " rely on the fact that polygon is like a commit chain and all these problems like commit"
		},
		{
			"timestamps": {
				"from": "01:50:10,120",
				"to": "01:50:16,520"
			},
			"offsets": {
				"from": 6610120,
				"to": 6616520
			},
			"text": " from time to time they're like batches and so on so this is like pretty important and we sort of"
		},
		{
			"timestamps": {
				"from": "01:50:16,520",
				"to": "01:50:22,200"
			},
			"offsets": {
				"from": 6616520,
				"to": 6622200
			},
			"text": " can get the commitment from which will recreate the state directly on on the one and then send it"
		},
		{
			"timestamps": {
				"from": "01:50:22,200",
				"to": "01:50:31,320"
			},
			"offsets": {
				"from": 6622200,
				"to": 6631320
			},
			"text": " to another so if let's say polygon commits on L1 I can send this commitment then to start and"
		},
		{
			"timestamps": {
				"from": "01:50:31,320",
				"to": "01:50:38,600"
			},
			"offsets": {
				"from": 6631320,
				"to": 6638600
			},
			"text": " then start and do the actual verification cool so now how do we actually do that so let's break"
		},
		{
			"timestamps": {
				"from": "01:50:38,600",
				"to": "01:50:43,720"
			},
			"offsets": {
				"from": 6638600,
				"to": 6643720
			},
			"text": " the entire flow into like smallest pieces so the flow is the following we need to have access to"
		},
		{
			"timestamps": {
				"from": "01:50:43,720",
				"to": "01:50:49,720"
			},
			"offsets": {
				"from": 6643720,
				"to": 6649720
			},
			"text": " the commitment which is either a block hash or a state root and again we can get it or either"
		},
		{
			"timestamps": {
				"from": "01:50:49,720",
				"to": "01:50:56,440"
			},
			"offsets": {
				"from": 6649720,
				"to": 6656440
			},
			"text": " by sending a message relying on the fact that is this chain commit so in a sense it's still a message"
		},
		{
			"timestamps": {
				"from": "01:50:56,440",
				"to": "01:51:02,040"
			},
			"offsets": {
				"from": 6656440,
				"to": 6662040
			},
			"text": " we can relate an optimistic manner or we can go even more crazy and verify the entire consensus"
		},
		{
			"timestamps": {
				"from": "01:51:03,560",
				"to": "01:51:08,680"
			},
			"offsets": {
				"from": 6663560,
				"to": 6668680
			},
			"text": " okay so this is step number one we need to get the commitment step number two we need to"
		},
		{
			"timestamps": {
				"from": "01:51:08,680",
				"to": "01:51:13,400"
			},
			"offsets": {
				"from": 6668680,
				"to": 6673400
			},
			"text": " somehow access the state root so the commitments of the state from like a previous block or the"
		},
		{
			"timestamps": {
				"from": "01:51:13,400",
				"to": "01:51:17,480"
			},
			"offsets": {
				"from": 6673400,
				"to": 6677480
			},
			"text": " actual block because keep in mind that these commitments are only block hashes and we block"
		},
		{
			"timestamps": {
				"from": "01:51:17,480",
				"to": "01:51:24,520"
			},
			"offsets": {
				"from": 6677480,
				"to": 6684520
			},
			"text": " hashes we can recreate headers but we cannot access the state okay so once we have the state root we"
		},
		{
			"timestamps": {
				"from": "01:51:24,520",
				"to": "01:51:32,280"
			},
			"offsets": {
				"from": 6684520,
				"to": 6692280
			},
			"text": " obviously need to verify this state slash storage proofs okay and there are multi-treats to do that"
		},
		{
			"timestamps": {
				"from": "01:51:32,280",
				"to": "01:51:36,440"
			},
			"offsets": {
				"from": 6692280,
				"to": 6696440
			},
			"text": " all of them come with some trade-offs and let's go through all these approaches"
		},
		{
			"timestamps": {
				"from": "01:51:36,440",
				"to": "01:51:45,720"
			},
			"offsets": {
				"from": 6696440,
				"to": 6705720
			},
			"text": " so approach number one messaging so I can send a message from let's say"
		},
		{
			"timestamps": {
				"from": "01:51:45,720",
				"to": "01:51:54,440"
			},
			"offsets": {
				"from": 6705720,
				"to": 6714440
			},
			"text": " optimism to each of your middle one I can get the opcode I can get the block hash by just calling"
		},
		{
			"timestamps": {
				"from": "01:51:54,440",
				"to": "01:52:01,640"
			},
			"offsets": {
				"from": 6714440,
				"to": 6721640
			},
			"text": " the proper opcode and and I get it take some time but still I get it this is approach number one"
		},
		{
			"timestamps": {
				"from": "01:52:01,640",
				"to": "01:52:07,320"
			},
			"offsets": {
				"from": 6721640,
				"to": 6727320
			},
			"text": " so we rely on the built-in messaging system which is I think fair because the security of it is"
		},
		{
			"timestamps": {
				"from": "01:52:07,320",
				"to": "01:52:11,320"
			},
			"offsets": {
				"from": 6727320,
				"to": 6731320
			},
			"text": " equal to the security of the roll-up and if you're deploying an application of this roll-up"
		},
		{
			"timestamps": {
				"from": "01:52:11,320",
				"to": "01:52:19,880"
			},
			"offsets": {
				"from": 6731320,
				"to": 6739880
			},
			"text": " it's a fair assumption to do so yeah it doesn't oh the now about the downsides so the message"
		},
		{
			"timestamps": {
				"from": "01:52:19,880",
				"to": "01:52:25,160"
			},
			"offsets": {
				"from": 6739880,
				"to": 6745160
			},
			"text": " must be delivered so it introduces a significant delay especially when dealing with the withdrawal"
		},
		{
			"timestamps": {
				"from": "01:52:25,160",
				"to": "01:52:31,640"
			},
			"offsets": {
				"from": 6745160,
				"to": 6751640
			},
			"text": " period in the in the middle and it requires we it requires interacting with multiple layers so"
		},
		{
			"timestamps": {
				"from": "01:52:31,640",
				"to": "01:52:37,560"
			},
			"offsets": {
				"from": 6751640,
				"to": 6757560
			},
			"text": " first you need to send a message and then actually you need to consume it so it's it's not ideal"
		},
		{
			"timestamps": {
				"from": "01:52:37,560",
				"to": "01:52:48,200"
			},
			"offsets": {
				"from": 6757560,
				"to": 6768200
			},
			"text": " but the trust assumptions are pretty okay. Another approach consensus validation by the way this"
		},
		{
			"timestamps": {
				"from": "01:52:48,200",
				"to": "01:52:54,600"
			},
			"offsets": {
				"from": 6768200,
				"to": 6774600
			},
			"text": " like Gramlin is supposed to verify a bunch of PLS signatures I hope it's self-explanatory."
		},
		{
			"timestamps": {
				"from": "01:52:54,600",
				"to": "01:53:02,920"
			},
			"offsets": {
				"from": 6774600,
				"to": 6782920
			},
			"text": " Okay so maybe a few a bit of an intro right now we have POS as the native like consensus"
		},
		{
			"timestamps": {
				"from": "01:53:02,920",
				"to": "01:53:10,440"
			},
			"offsets": {
				"from": 6782920,
				"to": 6790440
			},
			"text": " algorithm which is pretty great because verifying the consensus is finally doable because before"
		},
		{
			"timestamps": {
				"from": "01:53:10,440",
				"to": "01:53:15,400"
			},
			"offsets": {
				"from": 6790440,
				"to": 6795400
			},
			"text": " like verifying the hashing function ETH hash which was used for proof of work was very memory"
		},
		{
			"timestamps": {
				"from": "01:53:15,400",
				"to": "01:53:23,800"
			},
			"offsets": {
				"from": 6795400,
				"to": 6803800
			},
			"text": " intense so not possible to do inside the SNAARC on chain directly so it was almost impossible to do so"
		},
		{
			"timestamps": {
				"from": "01:53:23,800",
				"to": "01:53:31,000"
			},
			"offsets": {
				"from": 6803800,
				"to": 6811000
			},
			"text": " so now we also have this frog choice for what called a lambda goes which is implementable but"
		},
		{
			"timestamps": {
				"from": "01:53:31,000",
				"to": "01:53:36,200"
			},
			"offsets": {
				"from": 6811000,
				"to": 6816200
			},
			"text": " doing all of this like directly is pretty expensive so we need to ideally wrap inside the SNAARC but"
		},
		{
			"timestamps": {
				"from": "01:53:36,200",
				"to": "01:53:43,320"
			},
			"offsets": {
				"from": 6816200,
				"to": 6823320
			},
			"text": " there is another downside so a few words about the trust assumptions you well you verify the"
		},
		{
			"timestamps": {
				"from": "01:53:43,320",
				"to": "01:53:51,080"
			},
			"offsets": {
				"from": 6823320,
				"to": 6831080
			},
			"text": " consensus directly so it's it's fine. Do you introduce any trust assumptions? Not really but the biggest"
		},
		{
			"timestamps": {
				"from": "01:53:51,080",
				"to": "01:53:59,240"
			},
			"offsets": {
				"from": 6831080,
				"to": 6839240
			},
			"text": " downside that generating the proof actually takes some time so to be honest this approach is feasible"
		},
		{
			"timestamps": {
				"from": "01:53:59,240",
				"to": "01:54:06,120"
			},
			"offsets": {
				"from": 6839240,
				"to": 6846120
			},
			"text": " but comparing to messaging like quite often is like almost the same and you pay a lot of improving"
		},
		{
			"timestamps": {
				"from": "01:54:06,120",
				"to": "01:54:14,920"
			},
			"offsets": {
				"from": 6846120,
				"to": 6854920
			},
			"text": " time and requires like having more advanced infrastructure. Okay last approach that we actually use"
		},
		{
			"timestamps": {
				"from": "01:54:14,920",
				"to": "01:54:21,080"
			},
			"offsets": {
				"from": 6854920,
				"to": 6861080
			},
			"text": " is something that we call like an optimistic layer based on NPC. NPC stands for a multi-party"
		},
		{
			"timestamps": {
				"from": "01:54:21,080",
				"to": "01:54:28,920"
			},
			"offsets": {
				"from": 6861080,
				"to": 6868920
			},
			"text": " computation maybe before I explain how it works let me explain the image I hope it's self-explanatory"
		},
		{
			"timestamps": {
				"from": "01:54:28,920",
				"to": "01:54:35,000"
			},
			"offsets": {
				"from": 6868920,
				"to": 6875000
			},
			"text": " so it's an NPC protocol we have multiple parties this multiple parties attached something"
		},
		{
			"timestamps": {
				"from": "01:54:35,560",
				"to": "01:54:42,200"
			},
			"offsets": {
				"from": 6875560,
				"to": 6882200
			},
			"text": " then we have an observer that can challenge it and then we have finally the commitment given to a"
		},
		{
			"timestamps": {
				"from": "01:54:42,200",
				"to": "01:54:49,000"
			},
			"offsets": {
				"from": 6882200,
				"to": 6889000
			},
			"text": " specific chain in this case started once everything is fine how does it work? So we have a set of"
		},
		{
			"timestamps": {
				"from": "01:54:49,000",
				"to": "01:54:56,040"
			},
			"offsets": {
				"from": 6889000,
				"to": 6896040
			},
			"text": " trusted relayers validators however and they attach it a specific commitment is valid so how"
		},
		{
			"timestamps": {
				"from": "01:54:56,040",
				"to": "01:55:06,360"
			},
			"offsets": {
				"from": 6896040,
				"to": 6906360
			},
			"text": " does it work if you want to get the commitment aka the block hash of block number x on startnet"
		},
		{
			"timestamps": {
				"from": "01:55:06,360",
				"to": "01:55:12,600"
			},
			"offsets": {
				"from": 6906360,
				"to": 6912600
			},
			"text": " then instead of sending a message that would be delayed with a slightly delayed we can essentially"
		},
		{
			"timestamps": {
				"from": "01:55:12,600",
				"to": "01:55:17,800"
			},
			"offsets": {
				"from": 6912600,
				"to": 6917800
			},
			"text": " make an off-chain call just get the latest one essentially related message directly to start"
		},
		{
			"timestamps": {
				"from": "01:55:17,800",
				"to": "01:55:24,360"
			},
			"offsets": {
				"from": 6917800,
				"to": 6924360
			},
			"text": " and what it comes with a few downsides because while we introduce some trust assumptions but still"
		},
		{
			"timestamps": {
				"from": "01:55:24,360",
				"to": "01:55:28,600"
			},
			"offsets": {
				"from": 6924360,
				"to": 6928600
			},
			"text": " it's okay okay how does it work? So it works in a way that we have a bunch of off-chain actors"
		},
		{
			"timestamps": {
				"from": "01:55:28,600",
				"to": "01:55:34,680"
			},
			"offsets": {
				"from": 6928600,
				"to": 6934680
			},
			"text": " who essentially make this calls and it works more or less like a multi-sick but the reason why we"
		},
		{
			"timestamps": {
				"from": "01:55:34,680",
				"to": "01:55:42,920"
			},
			"offsets": {
				"from": 6934680,
				"to": 6942920
			},
			"text": " have NPC is because more validators you have then obviously more securities but more validators"
		},
		{
			"timestamps": {
				"from": "01:55:42,920",
				"to": "01:55:49,880"
			},
			"offsets": {
				"from": 6942920,
				"to": 6949880
			},
			"text": " you have in a like standard multi-sick approach you have more signatures so more in a way decentralized"
		},
		{
			"timestamps": {
				"from": "01:55:49,880",
				"to": "01:55:55,800"
			},
			"offsets": {
				"from": 6949880,
				"to": 6955800
			},
			"text": " it is then it's more expensive to verify because you need to verify multiple signatures and you need"
		},
		{
			"timestamps": {
				"from": "01:55:55,800",
				"to": "01:56:01,880"
			},
			"offsets": {
				"from": 6955800,
				"to": 6961880
			},
			"text": " to like pause the signature sits a lot of colata such approach is not feasible on chains where"
		},
		{
			"timestamps": {
				"from": "01:56:01,880",
				"to": "01:56:09,000"
			},
			"offsets": {
				"from": 6961880,
				"to": 6969000
			},
			"text": " colata is expensive so I want optimistic roll-ups and yeah okay so how does it work?"
		},
		{
			"timestamps": {
				"from": "01:56:09,000",
				"to": "01:56:16,200"
			},
			"offsets": {
				"from": 6969000,
				"to": 6976200
			},
			"text": " and what is actually NPC part doing? The NPC part is very simple it's essentially signing over"
		},
		{
			"timestamps": {
				"from": "01:56:17,000",
				"to": "01:56:21,640"
			},
			"offsets": {
				"from": 6977000,
				"to": 6981640
			},
			"text": " like a specific curve sounds specific payload and the payload is the commitment itself"
		},
		{
			"timestamps": {
				"from": "01:56:21,640",
				"to": "01:56:28,440"
			},
			"offsets": {
				"from": 6981640,
				"to": 6988440
			},
			"text": " and that's it okay so this is how we actually attest but now how wide this approach is called"
		},
		{
			"timestamps": {
				"from": "01:56:28,440",
				"to": "01:56:35,640"
			},
			"offsets": {
				"from": 6988440,
				"to": 6995640
			},
			"text": " optimistic and why it's still secure so first of all we just posted something on the actual L2"
		},
		{
			"timestamps": {
				"from": "01:56:35,640",
				"to": "01:56:41,240"
			},
			"offsets": {
				"from": 6995640,
				"to": 7001240
			},
			"text": " and as you may know we can send messages from L1 to L2 and such a message can contain"
		},
		{
			"timestamps": {
				"from": "01:56:41,960",
				"to": "01:56:48,520"
			},
			"offsets": {
				"from": 7001960,
				"to": 7008520
			},
			"text": " like the proper commitment so essentially even if the validator set will lie L1 will never lie so"
		},
		{
			"timestamps": {
				"from": "01:56:48,520",
				"to": "01:56:54,040"
			},
			"offsets": {
				"from": 7008520,
				"to": 7014040
			},
			"text": " you can just challenge such a message and now to participate in verifying this validator it's"
		},
		{
			"timestamps": {
				"from": "01:56:54,040",
				"to": "01:56:59,560"
			},
			"offsets": {
				"from": 7014040,
				"to": 7019560
			},
			"text": " super easy because literally two rpc calls one call is gonna check the actual commitment on the"
		},
		{
			"timestamps": {
				"from": "01:56:59,560",
				"to": "01:57:05,720"
			},
			"offsets": {
				"from": 7019560,
				"to": 7025720
			},
			"text": " actual chain and the other one checks like what is the claimed commitment if you disagree"
		},
		{
			"timestamps": {
				"from": "01:57:06,840",
				"to": "01:57:14,120"
			},
			"offsets": {
				"from": 7026840,
				"to": 7034120
			},
			"text": " you just send a message it calls roughly 60k of gas and that's it everyone can do that"
		},
		{
			"timestamps": {
				"from": "01:57:14,120",
				"to": "01:57:22,120"
			},
			"offsets": {
				"from": 7034120,
				"to": 7042120
			},
			"text": " and again the fraud-proofing window is pretty short because it's essentially how long it will take"
		},
		{
			"timestamps": {
				"from": "01:57:22,120",
				"to": "01:57:27,480"
			},
			"offsets": {
				"from": 7042120,
				"to": 7047480
			},
			"text": " to generate like the proof of consensus if it's possible or how long does it take to deliver the"
		},
		{
			"timestamps": {
				"from": "01:57:27,480",
				"to": "01:57:33,000"
			},
			"offsets": {
				"from": 7047480,
				"to": 7053000
			},
			"text": " message and what is pretty cool in this approach it's not the gas intensive and we verify just one"
		},
		{
			"timestamps": {
				"from": "01:57:33,000",
				"to": "01:57:39,880"
			},
			"offsets": {
				"from": 7053000,
				"to": 7059880
			},
			"text": " signature so that's about this approach let's make a recap and let's identify the trade-offs"
		},
		{
			"timestamps": {
				"from": "01:57:39,880",
				"to": "01:57:47,160"
			},
			"offsets": {
				"from": 7059880,
				"to": 7067160
			},
			"text": " so we have three approaches the first one is messaging the second one is validating the consensus"
		},
		{
			"timestamps": {
				"from": "01:57:47,160",
				"to": "01:57:54,680"
			},
			"offsets": {
				"from": 7067160,
				"to": 7074680
			},
			"text": " and the third one is having this optimistic layer so I categorize it in four categories"
		},
		{
			"timestamps": {
				"from": "01:57:54,680",
				"to": "01:58:02,600"
			},
			"offsets": {
				"from": 7074680,
				"to": 7082600
			},
			"text": " the first one is latency the second one is the gas cost the third one is trust and the last one is"
		},
		{
			"timestamps": {
				"from": "01:58:02,600",
				"to": "01:58:07,800"
			},
			"offsets": {
				"from": 7082600,
				"to": 7087800
			},
			"text": " what is the off-chain computation overhead why do i even list it because if we do some sort of"
		},
		{
			"timestamps": {
				"from": "01:58:07,800",
				"to": "01:58:13,000"
			},
			"offsets": {
				"from": 7087800,
				"to": 7093000
			},
			"text": " proving then obviously it takes time because we need to generate the proof so messaging in"
		},
		{
			"timestamps": {
				"from": "01:58:13,000",
				"to": "01:58:19,320"
			},
			"offsets": {
				"from": 7093000,
				"to": 7099320
			},
			"text": " terms of latency we are quite sad because well the message needs to get delivered so once the"
		},
		{
			"timestamps": {
				"from": "01:58:19,320",
				"to": "01:58:26,280"
			},
			"offsets": {
				"from": 7099320,
				"to": 7106280
			},
			"text": " message gets delivered to some specific L2 L1 will be able to generate a right in your block so we"
		},
		{
			"timestamps": {
				"from": "01:58:26,280",
				"to": "01:58:32,680"
			},
			"offsets": {
				"from": 7106280,
				"to": 7112680
			},
			"text": " don't have like access to the newest values in terms of gas cost it's not bad but it's not perfect"
		},
		{
			"timestamps": {
				"from": "01:58:32,680",
				"to": "01:58:36,760"
			},
			"offsets": {
				"from": 7112680,
				"to": 7116760
			},
			"text": " because we need to interact with two chains at the same time so first we need to send the message"
		},
		{
			"timestamps": {
				"from": "01:58:36,760",
				"to": "01:58:43,640"
			},
			"offsets": {
				"from": 7116760,
				"to": 7123640
			},
			"text": " and consume it in terms of trust we are pretty happy because we trust the roll-up itself and it's"
		},
		{
			"timestamps": {
				"from": "01:58:43,640",
				"to": "01:58:49,480"
			},
			"offsets": {
				"from": 7123640,
				"to": 7129480
			},
			"text": " the first assumption option computation overhead we're very happy because there is no computation"
		},
		{
			"timestamps": {
				"from": "01:58:49,480",
				"to": "01:58:55,320"
			},
			"offsets": {
				"from": 7129480,
				"to": 7135320
			},
			"text": " to do off-chain verify the consensus so in terms of latency we are sad because we need to generate"
		},
		{
			"timestamps": {
				"from": "01:58:55,320",
				"to": "01:59:00,760"
			},
			"offsets": {
				"from": 7135320,
				"to": 7140760
			},
			"text": " the proof that we done it it takes a bit of time in terms of gas cost we are"
		},
		{
			"timestamps": {
				"from": "01:59:00,760",
				"to": "01:59:07,000"
			},
			"offsets": {
				"from": 7140760,
				"to": 7147000
			},
			"text": " outside sad because we need to verify the actual zk proof which is way more expensive than just"
		},
		{
			"timestamps": {
				"from": "01:59:07,000",
				"to": "01:59:14,120"
			},
			"offsets": {
				"from": 7147000,
				"to": 7154120
			},
			"text": " consuming a message or verifying a signature in terms of trust we are happy because we verified"
		},
		{
			"timestamps": {
				"from": "01:59:14,120",
				"to": "01:59:19,640"
			},
			"offsets": {
				"from": 7154120,
				"to": 7159640
			},
			"text": " the consensus itself and computation overhead it's significant right because we need to generate"
		},
		{
			"timestamps": {
				"from": "01:59:19,640",
				"to": "01:59:26,840"
			},
			"offsets": {
				"from": 7159640,
				"to": 7166840
			},
			"text": " a proof final approach this optimistic relayer so in terms of latency we're happy because we"
		},
		{
			"timestamps": {
				"from": "01:59:26,840",
				"to": "01:59:32,120"
			},
			"offsets": {
				"from": 7166840,
				"to": 7172120
			},
			"text": " simply make a claim and we post it on the other chain that's it gas cost we're very happy because"
		},
		{
			"timestamps": {
				"from": "01:59:32,120",
				"to": "01:59:38,840"
			},
			"offsets": {
				"from": 7172120,
				"to": 7178840
			},
			"text": " the well we just verify a signature in terms of trust well we are not that happy but also not"
		},
		{
			"timestamps": {
				"from": "01:59:38,840",
				"to": "01:59:43,960"
			},
			"offsets": {
				"from": 7178840,
				"to": 7183960
			},
			"text": " that sad at the same time because it still can be challenged in an optimistic manner using a"
		},
		{
			"timestamps": {
				"from": "01:59:43,960",
				"to": "01:59:50,120"
			},
			"offsets": {
				"from": 7183960,
				"to": 7190120
			},
			"text": " fraud proof computation off-chain computation overhead we're pretty happy because we participate"
		},
		{
			"timestamps": {
				"from": "01:59:50,120",
				"to": "01:59:56,360"
			},
			"offsets": {
				"from": 7190120,
				"to": 7196360
			},
			"text": " like an NPC protocol so essentially the overhead comes mostly from communication not computation"
		},
		{
			"timestamps": {
				"from": "01:59:56,360",
				"to": "02:00:03,640"
			},
			"offsets": {
				"from": 7196360,
				"to": 7203640
			},
			"text": " itself cool so this is part number one these are the three approaches obviously i'm not gonna say"
		},
		{
			"timestamps": {
				"from": "02:00:03,640",
				"to": "02:00:10,760"
			},
			"offsets": {
				"from": 7203640,
				"to": 7210760
			},
			"text": " which one is the best because all of them come with some trade-offs okay accessing the headers i"
		},
		{
			"timestamps": {
				"from": "02:00:10,760",
				"to": "02:00:15,720"
			},
			"offsets": {
				"from": 7210760,
				"to": 7215720
			},
			"text": " hope itself explanatory because we literally unroll something from the trusted input"
		},
		{
			"timestamps": {
				"from": "02:00:15,720",
				"to": "02:00:23,880"
			},
			"offsets": {
				"from": 7215720,
				"to": 7223880
			},
			"text": " and the trusted input is again a block hash for a specific block x and if you follow the initial"
		},
		{
			"timestamps": {
				"from": "02:00:23,880",
				"to": "02:00:28,760"
			},
			"offsets": {
				"from": 7223880,
				"to": 7228760
			},
			"text": " slides that's essentially each block we given a block hash you can recreate the block header"
		},
		{
			"timestamps": {
				"from": "02:00:28,760",
				"to": "02:00:33,960"
			},
			"offsets": {
				"from": 7228760,
				"to": 7233960
			},
			"text": " and knowing the block header we can access the parent hash and by knowing the parent hash you"
		},
		{
			"timestamps": {
				"from": "02:00:33,960",
				"to": "02:00:39,880"
			},
			"offsets": {
				"from": 7233960,
				"to": 7239880
			},
			"text": " can recreate the previous block header so essentially go till the genesis block so given this very"
		},
		{
			"timestamps": {
				"from": "02:00:39,880",
				"to": "02:00:45,560"
			},
			"offsets": {
				"from": 7239880,
				"to": 7245560
			},
			"text": " small input we can essentially unroll the state or whatever was present on the chain from this block"
		},
		{
			"timestamps": {
				"from": "02:00:45,560",
				"to": "02:00:54,040"
			},
			"offsets": {
				"from": 7245560,
				"to": 7254040
			},
			"text": " till the genesis block okay so as i said i'm gonna explain everything on on the example of ethereum"
		},
		{
			"timestamps": {
				"from": "02:00:54,040",
				"to": "02:00:59,560"
			},
			"offsets": {
				"from": 7254040,
				"to": 7259560
			},
			"text": " and today all the block headers together are like roughly seven gigabytes of data"
		},
		{
			"timestamps": {
				"from": "02:00:59,560",
				"to": "02:01:05,720"
			},
			"offsets": {
				"from": 7259560,
				"to": 7265720
			},
			"text": " so it's quite a lot but okay this is how we actually do that this is the high-level concept"
		},
		{
			"timestamps": {
				"from": "02:01:05,720",
				"to": "02:01:10,600"
			},
			"offsets": {
				"from": 7265720,
				"to": 7270600
			},
			"text": " and what are the approaches so the first one we call it like on chain accumulation"
		},
		{
			"timestamps": {
				"from": "02:01:10,600",
				"to": "02:01:16,600"
			},
			"offsets": {
				"from": 7270600,
				"to": 7276600
			},
			"text": " essentially we do this procedure this computation directly on the chain so we provide all these"
		},
		{
			"timestamps": {
				"from": "02:01:16,600",
				"to": "02:01:23,400"
			},
			"offsets": {
				"from": 7276600,
				"to": 7283400
			},
			"text": " properly encoded block headers inside the call data and the block hash that we might receive as"
		},
		{
			"timestamps": {
				"from": "02:01:23,400",
				"to": "02:01:29,000"
			},
			"offsets": {
				"from": 7283400,
				"to": 7289000
			},
			"text": " like trusted input by sending a message relaying it in an optimistic manner or evaluating the consensus"
		},
		{
			"timestamps": {
				"from": "02:01:30,120",
				"to": "02:01:36,920"
			},
			"offsets": {
				"from": 7290120,
				"to": 7296920
			},
			"text": " and yeah like recursively go through all these headers and verify them but there are many many"
		},
		{
			"timestamps": {
				"from": "02:01:36,920",
				"to": "02:01:43,240"
			},
			"offsets": {
				"from": 7296920,
				"to": 7303240
			},
			"text": " downsides because first of all it's very cold data intensive it's very computational intensive"
		},
		{
			"timestamps": {
				"from": "02:01:43,240",
				"to": "02:01:50,200"
			},
			"offsets": {
				"from": 7303240,
				"to": 7310200
			},
			"text": " and now we can store all these headers on the actual chain but you know even storing on an L2"
		},
		{
			"timestamps": {
				"from": "02:01:50,200",
				"to": "02:01:55,800"
			},
			"offsets": {
				"from": 7310200,
				"to": 7315800
			},
			"text": " storing seven gigabytes of data is still a significant cause because the state on an L2 is"
		},
		{
			"timestamps": {
				"from": "02:01:55,800",
				"to": "02:02:02,600"
			},
			"offsets": {
				"from": 7315800,
				"to": 7322600
			},
			"text": " referred to as cold data on L1 so it's still expensive either way but the cool thing is that"
		},
		{
			"timestamps": {
				"from": "02:02:02,600",
				"to": "02:02:07,080"
			},
			"offsets": {
				"from": 7322600,
				"to": 7327080
			},
			"text": " i have direct access to like state rules or anything that i want to access"
		},
		{
			"timestamps": {
				"from": "02:02:07,080",
				"to": "02:02:16,520"
			},
			"offsets": {
				"from": 7327080,
				"to": 7336520
			},
			"text": " next approach is on chain compression so we can still use the same approach as previously"
		},
		{
			"timestamps": {
				"from": "02:02:16,520",
				"to": "02:02:22,840"
			},
			"offsets": {
				"from": 7336520,
				"to": 7342840
			},
			"text": " so literally unroll it and process the seven gigabytes of data but instead of like storing"
		},
		{
			"timestamps": {
				"from": "02:02:22,840",
				"to": "02:02:28,360"
			},
			"offsets": {
				"from": 7342840,
				"to": 7348360
			},
			"text": " then we can just update a miracle tree it's a nice approach but comes again with a few downsides"
		},
		{
			"timestamps": {
				"from": "02:02:28,360",
				"to": "02:02:33,000"
			},
			"offsets": {
				"from": 7348360,
				"to": 7353000
			},
			"text": " it's very computationally intense because if we have like millions of headers we need to"
		},
		{
			"timestamps": {
				"from": "02:02:33,000",
				"to": "02:02:38,840"
			},
			"offsets": {
				"from": 7353000,
				"to": 7358840
			},
			"text": " perform millions of hashes on the chain that's that's expensive but at least we we save on"
		},
		{
			"timestamps": {
				"from": "02:02:38,840",
				"to": "02:02:43,960"
			},
			"offsets": {
				"from": 7358840,
				"to": 7363960
			},
			"text": " storing data and also we need to update the miracle tree which is which is another cost"
		},
		{
			"timestamps": {
				"from": "02:02:43,960",
				"to": "02:02:50,920"
			},
			"offsets": {
				"from": 7363960,
				"to": 7370920
			},
			"text": " last downside is that we need to index all the headers that have been processed"
		},
		{
			"timestamps": {
				"from": "02:02:50,920",
				"to": "02:02:57,560"
			},
			"offsets": {
				"from": 7370920,
				"to": 7377560
			},
			"text": " why we need to index them because if i want to up the access a specific block header"
		},
		{
			"timestamps": {
				"from": "02:02:57,560",
				"to": "02:03:02,120"
			},
			"offsets": {
				"from": 7377560,
				"to": 7382120
			},
			"text": " i need to provide a miracle path because as we update the miracle tree and we just store a root"
		},
		{
			"timestamps": {
				"from": "02:03:02,120",
				"to": "02:03:07,080"
			},
			"offsets": {
				"from": 7382120,
				"to": 7387080
			},
			"text": " in the contract itself then i need to know the path right so i need to index the data and"
		},
		{
			"timestamps": {
				"from": "02:03:07,080",
				"to": "02:03:12,120"
			},
			"offsets": {
				"from": 7387080,
				"to": 7392120
			},
			"text": " essentially once i it's the moment that i want to access so i need to provide the miracle path"
		},
		{
			"timestamps": {
				"from": "02:03:12,120",
				"to": "02:03:19,480"
			},
			"offsets": {
				"from": 7392120,
				"to": 7399480
			},
			"text": " this approach is okay it's i wouldn't say way better than the previous one but it's way cheaper"
		},
		{
			"timestamps": {
				"from": "02:03:20,120",
				"to": "02:03:26,920"
			},
			"offsets": {
				"from": 7400120,
				"to": 7406920
			},
			"text": " last approach so there is a very cool primitive called miracle mountain ranges"
		},
		{
			"timestamps": {
				"from": "02:03:26,920",
				"to": "02:03:36,360"
			},
			"offsets": {
				"from": 7406920,
				"to": 7416360
			},
			"text": " love it and the idea is let's do the same that we do previously inside the start so we can provide"
		},
		{
			"timestamps": {
				"from": "02:03:36,360",
				"to": "02:03:42,520"
			},
			"offsets": {
				"from": 7416360,
				"to": 7422520
			},
			"text": " this tremendous amount of data as a private input to the circuit and essentially do the"
		},
		{
			"timestamps": {
				"from": "02:03:42,520",
				"to": "02:03:48,680"
			},
			"offsets": {
				"from": 7422520,
				"to": 7428680
			},
			"text": " same computation like unrolling inside the circuit itself and now we have a public input which is"
		},
		{
			"timestamps": {
				"from": "02:03:48,680",
				"to": "02:03:54,200"
			},
			"offsets": {
				"from": 7428680,
				"to": 7434200
			},
			"text": " the block hash so essentially the commitment from which we unroll it so the trusted input"
		},
		{
			"timestamps": {
				"from": "02:03:54,200",
				"to": "02:03:59,640"
			},
			"offsets": {
				"from": 7434200,
				"to": 7439640
			},
			"text": " the public input can be literally asserted when we do the on-chain verification and why we unroll"
		},
		{
			"timestamps": {
				"from": "02:03:59,640",
				"to": "02:04:04,840"
			},
			"offsets": {
				"from": 7439640,
				"to": 7444840
			},
			"text": " it we can accumulate inside the miracle tree or a miracle mountain range why a miracle mountain"
		},
		{
			"timestamps": {
				"from": "02:04:04,840",
				"to": "02:04:10,760"
			},
			"offsets": {
				"from": 7444840,
				"to": 7450760
			},
			"text": " range is is cool because well let's imagine that you want to have like seven gigabytes of data"
		},
		{
			"timestamps": {
				"from": "02:04:10,760",
				"to": "02:04:15,480"
			},
			"offsets": {
				"from": 7450760,
				"to": 7455480
			},
			"text": " processing once and are like the proving time is going to be horrible and why would you even like"
		},
		{
			"timestamps": {
				"from": "02:04:15,480",
				"to": "02:04:21,400"
			},
			"offsets": {
				"from": 7455480,
				"to": 7461400
			},
			"text": " prove these commitments for like the entire history like do you really need that probably not so"
		},
		{
			"timestamps": {
				"from": "02:04:21,400",
				"to": "02:04:27,400"
			},
			"offsets": {
				"from": 7461400,
				"to": 7467400
			},
			"text": " let's chunk it like into smaller pieces and miracle mountain ranges are a pretty cool primitive"
		},
		{
			"timestamps": {
				"from": "02:04:27,400",
				"to": "02:04:34,520"
			},
			"offsets": {
				"from": 7467400,
				"to": 7474520
			},
			"text": " that allow to do this to do this to give you like a bit of intuition how does it work"
		},
		{
			"timestamps": {
				"from": "02:04:34,520",
				"to": "02:04:41,800"
			},
			"offsets": {
				"from": 7474520,
				"to": 7481800
			},
			"text": " it's essentially think of it as a tree of trees yeah so once we do all this proving like off-chain"
		},
		{
			"timestamps": {
				"from": "02:04:41,800",
				"to": "02:04:47,800"
			},
			"offsets": {
				"from": 7481800,
				"to": 7487800
			},
			"text": " we simply verify the proof on-chain as you know like verify the proof is way cheaper than doing"
		},
		{
			"timestamps": {
				"from": "02:04:47,800",
				"to": "02:04:53,160"
			},
			"offsets": {
				"from": 7487800,
				"to": 7493160
			},
			"text": " this directly on the chain and still we just provide a miracle path and that's it"
		},
		{
			"timestamps": {
				"from": "02:04:53,160",
				"to": "02:05:00,680"
			},
			"offsets": {
				"from": 7493160,
				"to": 7500680
			},
			"text": " we essentially have access to any sort of data we want let's do a recap again so approach number"
		},
		{
			"timestamps": {
				"from": "02:05:00,680",
				"to": "02:05:06,840"
			},
			"offsets": {
				"from": 7500680,
				"to": 7506840
			},
			"text": " one on-chain accumulation on-chain compression off-chain compression three categories"
		},
		{
			"timestamps": {
				"from": "02:05:06,840",
				"to": "02:05:13,320"
			},
			"offsets": {
				"from": 7506840,
				"to": 7513320
			},
			"text": " prover overhead gas cost storage cost actually gas cost should be computational cost"
		},
		{
			"timestamps": {
				"from": "02:05:13,320",
				"to": "02:05:20,280"
			},
			"offsets": {
				"from": 7513320,
				"to": 7520280
			},
			"text": " okay so prover overhead on-chain accumulation do we prove anything well not really so we are happy"
		},
		{
			"timestamps": {
				"from": "02:05:20,280",
				"to": "02:05:22,840"
			},
			"offsets": {
				"from": 7520280,
				"to": 7522840
			},
			"text": " on-chain compression well"
		},
		{
			"timestamps": {
				"from": "02:05:22,840",
				"to": "02:05:31,880"
			},
			"offsets": {
				"from": 7522840,
				"to": 7531880
			},
			"text": " we still like need to update the miracle tree i think actually there is uh there is an issue here"
		},
		{
			"timestamps": {
				"from": "02:05:31,880",
				"to": "02:05:36,840"
			},
			"offsets": {
				"from": 7531880,
				"to": 7536840
			},
			"text": " so i'll just skip this part off-chain compression we're very very sad because"
		},
		{
			"timestamps": {
				"from": "02:05:36,840",
				"to": "02:05:42,600"
			},
			"offsets": {
				"from": 7536840,
				"to": 7542600
			},
			"text": " well we need to prove actually significant computation so the proving time is significant"
		},
		{
			"timestamps": {
				"from": "02:05:42,600",
				"to": "02:05:47,800"
			},
			"offsets": {
				"from": 7542600,
				"to": 7547800
			},
			"text": " okay now in terms of gas cost the third approach is horrible because it just cost a lot"
		},
		{
			"timestamps": {
				"from": "02:05:47,800",
				"to": "02:05:53,160"
			},
			"offsets": {
				"from": 7547800,
				"to": 7553160
			},
			"text": " because we do the entire computation on-chain compression well we're a bit happy because we"
		},
		{
			"timestamps": {
				"from": "02:05:53,160",
				"to": "02:05:58,760"
			},
			"offsets": {
				"from": 7553160,
				"to": 7558760
			},
			"text": " just do a bit of computation but still it's a lot of cool data a lot of computation but lost"
		},
		{
			"timestamps": {
				"from": "02:05:58,760",
				"to": "02:06:04,840"
			},
			"offsets": {
				"from": 7558760,
				"to": 7564840
			},
			"text": " at least not so much storage storage cost oh sorry gas cost in the second approach while we"
		},
		{
			"timestamps": {
				"from": "02:06:04,840",
				"to": "02:06:12,520"
			},
			"offsets": {
				"from": 7564840,
				"to": 7572520
			},
			"text": " just verify proof so it's cool okay storage cost for the first approach well seven gigabytes of data"
		},
		{
			"timestamps": {
				"from": "02:06:12,520",
				"to": "02:06:20,280"
			},
			"offsets": {
				"from": 7572520,
				"to": 7580280
			},
			"text": " it is horrible so we are very sad on-chain compression sorry storage cost for on-chain compression"
		},
		{
			"timestamps": {
				"from": "02:06:20,280",
				"to": "02:06:27,320"
			},
			"offsets": {
				"from": 7580280,
				"to": 7587320
			},
			"text": " we just are a root of the miracle tree so we are happy and in the second case we're even more"
		},
		{
			"timestamps": {
				"from": "02:06:27,320",
				"to": "02:06:31,800"
			},
			"offsets": {
				"from": 7587320,
				"to": 7591800
			},
			"text": " happy because we again we just essentially keep updating the tree and we don't even need to"
		},
		{
			"timestamps": {
				"from": "02:06:31,800",
				"to": "02:06:36,520"
			},
			"offsets": {
				"from": 7591800,
				"to": 7596520
			},
			"text": " post a lot post a lot of colata because the colata we post is literally just the proof"
		},
		{
			"timestamps": {
				"from": "02:06:36,520",
				"to": "02:06:41,960"
			},
			"offsets": {
				"from": 7596520,
				"to": 7601960
			},
			"text": " so very very happy but again i don't want to say that all of the one of these approaches is the"
		},
		{
			"timestamps": {
				"from": "02:06:41,960",
				"to": "02:06:51,560"
			},
			"offsets": {
				"from": 7601960,
				"to": 7611560
			},
			"text": " best one because as you see you're trade-off and yeah so this part is actually pretty easy so as"
		},
		{
			"timestamps": {
				"from": "02:06:51,560",
				"to": "02:06:56,840"
			},
			"offsets": {
				"from": 7611560,
				"to": 7616840
			},
			"text": " you know as you may not waste here i was explaining like the second step when it comes to dealing with"
		},
		{
			"timestamps": {
				"from": "02:06:56,840",
				"to": "02:07:01,880"
			},
			"offsets": {
				"from": 7616840,
				"to": 7621880
			},
			"text": " storage proofs and now there is the last part which is essentially verifying the proof itself"
		},
		{
			"timestamps": {
				"from": "02:07:01,880",
				"to": "02:07:06,280"
			},
			"offsets": {
				"from": 7621880,
				"to": 7626280
			},
			"text": " so approach number one is verifying the proof directly on the chain"
		},
		{
			"timestamps": {
				"from": "02:07:06,280",
				"to": "02:07:10,280"
			},
			"offsets": {
				"from": 7626280,
				"to": 7630280
			},
			"text": " approach number two let's verify the proof inside the snark and then verify the snark"
		},
		{
			"timestamps": {
				"from": "02:07:10,280",
				"to": "02:07:15,240"
			},
			"offsets": {
				"from": 7630280,
				"to": 7635240
			},
			"text": " approach number three let's verify multiple proofs inside the snark and then verify the snark"
		},
		{
			"timestamps": {
				"from": "02:07:15,240",
				"to": "02:07:19,960"
			},
			"offsets": {
				"from": 7635240,
				"to": 7639960
			},
			"text": " we can aggregate multiple snarks together and so on but obviously there are some trade-off"
		},
		{
			"timestamps": {
				"from": "02:07:19,960",
				"to": "02:07:25,800"
			},
			"offsets": {
				"from": 7639960,
				"to": 7645800
			},
			"text": " especially when it comes to proving time um and yeah so now why the first approach is"
		},
		{
			"timestamps": {
				"from": "02:07:25,800",
				"to": "02:07:31,320"
			},
			"offsets": {
				"from": 7645800,
				"to": 7651320
			},
			"text": " feasible on on zk roll-up for example on starnet colata is very cheap and what we want to avoid in"
		},
		{
			"timestamps": {
				"from": "02:07:31,320",
				"to": "02:07:37,320"
			},
			"offsets": {
				"from": 7651320,
				"to": 7657320
			},
			"text": " this specific process is colata so this approach is for example feasible on starnet but for example"
		},
		{
			"timestamps": {
				"from": "02:07:37,320",
				"to": "02:07:41,720"
			},
			"offsets": {
				"from": 7657320,
				"to": 7661720
			},
			"text": " if you want to verify like a proof on optimist or a colata is very expensive you want to reduce"
		},
		{
			"timestamps": {
				"from": "02:07:41,720",
				"to": "02:07:46,920"
			},
			"offsets": {
				"from": 7661720,
				"to": 7666920
			},
			"text": " it as much as possible so for that reason you might want to use a snark and finally if you have like"
		},
		{
			"timestamps": {
				"from": "02:07:46,920",
				"to": "02:07:53,160"
			},
			"offsets": {
				"from": 7666920,
				"to": 7673160
			},
			"text": " many slots that you want to prove why can't you just verify them inside one snark you're gonna"
		},
		{
			"timestamps": {
				"from": "02:07:53,160",
				"to": "02:07:59,800"
			},
			"offsets": {
				"from": 7673160,
				"to": 7679800
			},
			"text": " pay in prover time but we just present one proof at the end so this approach is cheaper"
		},
		{
			"timestamps": {
				"from": "02:07:59,800",
				"to": "02:08:07,880"
			},
			"offsets": {
				"from": 7679800,
				"to": 7687880
			},
			"text": " is the most the cheapest one but only if you have multiple actions to take um so there are trade-offs"
		},
		{
			"timestamps": {
				"from": "02:08:07,880",
				"to": "02:08:16,680"
			},
			"offsets": {
				"from": 7687880,
				"to": 7696680
			},
			"text": " so let's identify them categories prover overhead latency verification cost"
		},
		{
			"timestamps": {
				"from": "02:08:17,480",
				"to": "02:08:23,640"
			},
			"offsets": {
				"from": 7697480,
				"to": 7703640
			},
			"text": " so verify the proof directly prover overhead doesn't exist latency doesn't exist because we"
		},
		{
			"timestamps": {
				"from": "02:08:23,640",
				"to": "02:08:29,080"
			},
			"offsets": {
				"from": 7703640,
				"to": 7709080
			},
			"text": " don't need to prove anything verification costs well it is significant because we need to post"
		},
		{
			"timestamps": {
				"from": "02:08:29,080",
				"to": "02:08:33,800"
			},
			"offsets": {
				"from": 7709080,
				"to": 7713800
			},
			"text": " colata and we need to do the actual computation so like going through the entire path and each"
		},
		{
			"timestamps": {
				"from": "02:08:33,800",
				"to": "02:08:40,040"
			},
			"offsets": {
				"from": 7713800,
				"to": 7720040
			},
			"text": " step in the path is one hushing function oh and also let me get back to the previous slide"
		},
		{
			"timestamps": {
				"from": "02:08:40,040",
				"to": "02:08:46,840"
			},
			"offsets": {
				"from": 7720040,
				"to": 7726840
			},
			"text": " i forgot this is very important why wrapping inside the snark is pretty important"
		},
		{
			"timestamps": {
				"from": "02:08:46,840",
				"to": "02:08:52,760"
			},
			"offsets": {
				"from": 7726840,
				"to": 7732760
			},
			"text": " if you're like dealing with a storage layout that is using a specific hushing function let's say for"
		},
		{
			"timestamps": {
				"from": "02:08:52,760",
				"to": "02:08:59,160"
			},
			"offsets": {
				"from": 7732760,
				"to": 7739160
			},
			"text": " example peterson peterson is not available like on on the evm like you just need to implement"
		},
		{
			"timestamps": {
				"from": "02:08:59,160",
				"to": "02:09:03,800"
			},
			"offsets": {
				"from": 7739160,
				"to": 7743800
			},
			"text": " it's not the pre-compile it's it's gonna be costly but if you do inside the snark and peterson is"
		},
		{
			"timestamps": {
				"from": "02:09:03,800",
				"to": "02:09:09,240"
			},
			"offsets": {
				"from": 7743800,
				"to": 7749240
			},
			"text": " pretty snark friendly then well it just verify snark on the one and you abstract it so it's going"
		},
		{
			"timestamps": {
				"from": "02:09:09,240",
				"to": "02:09:15,560"
			},
			"offsets": {
				"from": 7749240,
				"to": 7755560
			},
			"text": " to be way way way cheaper but again there are trade-offs let me get back to this so i went for"
		},
		{
			"timestamps": {
				"from": "02:09:15,560",
				"to": "02:09:23,320"
			},
			"offsets": {
				"from": 7755560,
				"to": 7763320
			},
			"text": " the standard market luxury tree snarkified proof prover overhead it exists so we are not super happy"
		},
		{
			"timestamps": {
				"from": "02:09:23,320",
				"to": "02:09:28,520"
			},
			"offsets": {
				"from": 7763320,
				"to": 7768520
			},
			"text": " latency you're also not happy because we actually need to spend time on improving this this this"
		},
		{
			"timestamps": {
				"from": "02:09:28,520",
				"to": "02:09:35,080"
			},
			"offsets": {
				"from": 7768520,
				"to": 7775080
			},
			"text": " thing verification costs we are happy because well we we just verify a proof so it's fine and"
		},
		{
			"timestamps": {
				"from": "02:09:35,080",
				"to": "02:09:40,360"
			},
			"offsets": {
				"from": 7775080,
				"to": 7780360
			},
			"text": " snarkifying multiple proofs the prover overhead is still there latency is still there it's even"
		},
		{
			"timestamps": {
				"from": "02:09:40,360",
				"to": "02:09:45,320"
			},
			"offsets": {
				"from": 7780360,
				"to": 7785320
			},
			"text": " bigger because it takes a bit longer in improving time and verification costs we are super happy"
		},
		{
			"timestamps": {
				"from": "02:09:45,320",
				"to": "02:09:51,800"
			},
			"offsets": {
				"from": 7785320,
				"to": 7791800
			},
			"text": " because essentially we can neutralize the cost of verifying multiple proofs by just verifying"
		},
		{
			"timestamps": {
				"from": "02:09:51,800",
				"to": "02:10:01,720"
			},
			"offsets": {
				"from": 7791800,
				"to": 7801720
			},
			"text": " one single snark proof okay went through quite a lot of things let's put this all together"
		},
		{
			"timestamps": {
				"from": "02:10:01,720",
				"to": "02:10:08,360"
			},
			"offsets": {
				"from": 7801720,
				"to": 7808360
			},
			"text": " so let's imagine we have free chains and we want to have interoperability between them"
		},
		{
			"timestamps": {
				"from": "02:10:08,360",
				"to": "02:10:15,560"
			},
			"offsets": {
				"from": 7808360,
				"to": 7815560
			},
			"text": " so we have chain z chain x and chain y so it all starts with a message aka commitment we send"
		},
		{
			"timestamps": {
				"from": "02:10:15,560",
				"to": "02:10:21,560"
			},
			"offsets": {
				"from": 7815560,
				"to": 7821560
			},
			"text": " a message in order to get the commitment so let's say that we send a message from chain z to chain"
		},
		{
			"timestamps": {
				"from": "02:10:21,560",
				"to": "02:10:28,760"
			},
			"offsets": {
				"from": 7821560,
				"to": 7828760
			},
			"text": " x because on chain x we want to access the state of chain z so what do we do once we have the"
		},
		{
			"timestamps": {
				"from": "02:10:28,760",
				"to": "02:10:35,720"
			},
			"offsets": {
				"from": 7828760,
				"to": 7835720
			},
			"text": " commitment we literally recreate all the headers using one of the free approaches and once we"
		},
		{
			"timestamps": {
				"from": "02:10:35,720",
				"to": "02:10:40,520"
			},
			"offsets": {
				"from": 7835720,
				"to": 7840520
			},
			"text": " recreate it the header is still the point for which i want to prove the storage i just verify"
		},
		{
			"timestamps": {
				"from": "02:10:40,520",
				"to": "02:10:44,760"
			},
			"offsets": {
				"from": 7840520,
				"to": 7844760
			},
			"text": " a proof and again verify and get proof there are multiple approaches but now let's say that on chain"
		},
		{
			"timestamps": {
				"from": "02:10:44,760",
				"to": "02:10:51,080"
			},
			"offsets": {
				"from": 7844760,
				"to": 7851080
			},
			"text": " y i want to access the state of chain z and there is no direct communication between chain y and"
		},
		{
			"timestamps": {
				"from": "02:10:51,080",
				"to": "02:10:58,440"
			},
			"offsets": {
				"from": 7851080,
				"to": 7858440
			},
			"text": " chain z so it must be routed through chain x by the way i'm like talking about this in a pretty"
		},
		{
			"timestamps": {
				"from": "02:10:58,440",
				"to": "02:11:04,760"
			},
			"offsets": {
				"from": 7858440,
				"to": 7864760
			},
			"text": " abstract way by chain x i just mean interior my later one um yeah so from chain x i'm just gonna"
		},
		{
			"timestamps": {
				"from": "02:11:04,760",
				"to": "02:11:10,040"
			},
			"offsets": {
				"from": 7864760,
				"to": 7870040
			},
			"text": " send again the commitment about chain z as a message and then simply recreate all these"
		},
		{
			"timestamps": {
				"from": "02:11:10,040",
				"to": "02:11:15,480"
			},
			"offsets": {
				"from": 7870040,
				"to": 7875480
			},
			"text": " all these headers as you may not notice it's pretty redundant because we perform the same"
		},
		{
			"timestamps": {
				"from": "02:11:15,480",
				"to": "02:11:21,560"
			},
			"offsets": {
				"from": 7875480,
				"to": 7881560
			},
			"text": " computation on two different chains and we don't need to do that especially if you use like the"
		},
		{
			"timestamps": {
				"from": "02:11:21,560",
				"to": "02:11:27,160"
			},
			"offsets": {
				"from": 7881560,
				"to": 7887160
			},
			"text": " third approach which is generating the proof on chain but now there is another problem"
		},
		{
			"timestamps": {
				"from": "02:11:27,160",
				"to": "02:11:32,040"
			},
			"offsets": {
				"from": 7887160,
				"to": 7892040
			},
			"text": " how do you actually know what you should do like you need to be somehow aware of what is happening"
		},
		{
			"timestamps": {
				"from": "02:11:32,040",
				"to": "02:11:38,440"
			},
			"offsets": {
				"from": 7892040,
				"to": 7898440
			},
			"text": " and for that reason we introduce an api we don't expect like developers to deal with all that"
		},
		{
			"timestamps": {
				"from": "02:11:38,440",
				"to": "02:11:44,520"
			},
			"offsets": {
				"from": 7898440,
				"to": 7904520
			},
			"text": " complexities choosing the right approach for the direct thing essentially right now our apis"
		},
		{
			"timestamps": {
				"from": "02:11:44,520",
				"to": "02:11:52,760"
			},
			"offsets": {
				"from": 7904520,
				"to": 7912760
			},
			"text": " optimizes cost wise soon we'll be able to optimize latency wise and yeah and essentially"
		},
		{
			"timestamps": {
				"from": "02:11:52,760",
				"to": "02:12:00,360"
			},
			"offsets": {
				"from": 7912760,
				"to": 7920360
			},
			"text": " that's it um that's about our api i highly highly encourage you to check this out"
		},
		{
			"timestamps": {
				"from": "02:12:01,880",
				"to": "02:12:07,240"
			},
			"offsets": {
				"from": 7921880,
				"to": 7927240
			},
			"text": " and yeah like a few final words about the api it acts as a coordinator it optimize the cost"
		},
		{
			"timestamps": {
				"from": "02:12:07,240",
				"to": "02:12:12,200"
			},
			"offsets": {
				"from": 7927240,
				"to": 7932200
			},
			"text": " it optimize the cost because we can batch multiple things and once the job is done"
		},
		{
			"timestamps": {
				"from": "02:12:12,200",
				"to": "02:12:17,640"
			},
			"offsets": {
				"from": 7932200,
				"to": 7937640
			},
			"text": " you get a notification like via webhook uh via an event like whatever you want"
		},
		{
			"timestamps": {
				"from": "02:12:17,640",
				"to": "02:12:23,480"
			},
			"offsets": {
				"from": 7937640,
				"to": 7943480
			},
			"text": " essentially you're not you don't need to be like an infrastructure maintainer and you can just"
		},
		{
			"timestamps": {
				"from": "02:12:23,480",
				"to": "02:12:29,240"
			},
			"offsets": {
				"from": 7943480,
				"to": 7949240
			},
			"text": " focus on essentially building on top of this primitive and i think that's it um questions"
		},
		{
			"timestamps": {
				"from": "02:12:29,240",
				"to": "02:12:53,400"
			},
			"offsets": {
				"from": 7949240,
				"to": 7973400
			},
			"text": " ["
		},
		{
			"timestamps": {
				"from": "02:12:53,400",
				"to": "02:13:23,400"
			},
			"offsets": {
				"from": 7973400,
				"to": 8003400
			},
			"text": " like by making an off-jingle like calling a rest api or like calling a j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-"
		},
		{
			"timestamps": {
				"from": "02:13:23,400",
				"to": "02:13:31,080"
			},
			"offsets": {
				"from": 8003400,
				"to": 8011080
			},
			"text": " like using a web socket uh you can be essentially whatever whatever you want"
		},
		{
			"timestamps": {
				"from": "02:13:31,080",
				"to": "02:13:43,800"
			},
			"offsets": {
				"from": 8011080,
				"to": 8023800
			},
			"text": " oh yeah so uh that's actually a great question so different chains use a different like storage"
		},
		{
			"timestamps": {
				"from": "02:13:43,800",
				"to": "02:13:48,600"
			},
			"offsets": {
				"from": 8023800,
				"to": 8028600
			},
			"text": " i would say architecture they might commit to a miracle patricia tree miracle tree"
		},
		{
			"timestamps": {
				"from": "02:13:49,880",
				"to": "02:13:56,120"
			},
			"offsets": {
				"from": 8029880,
				"to": 8036120
			},
			"text": " maybe even vertical tree and obviously like i said having a generalized verifier is like pretty"
		},
		{
			"timestamps": {
				"from": "02:13:56,120",
				"to": "02:14:03,560"
			},
			"offsets": {
				"from": 8036120,
				"to": 8043560
			},
			"text": " it's not a clean approach so we essentially abstracted it by using a snark and inside the"
		},
		{
			"timestamps": {
				"from": "02:14:03,560",
				"to": "02:14:10,440"
			},
			"offsets": {
				"from": 8043560,
				"to": 8050440
			},
			"text": " snark itself we just do the proper work like you know we go through the tree like through the"
		},
		{
			"timestamps": {
				"from": "02:14:10,440",
				"to": "02:14:15,320"
			},
			"offsets": {
				"from": 8050440,
				"to": 8055320
			},
			"text": " through the um through the elements of the proof and then we can like use a specific hashing function"
		},
		{
			"timestamps": {
				"from": "02:14:15,320",
				"to": "02:14:24,200"
			},
			"offsets": {
				"from": 8055320,
				"to": 8064200
			},
			"text": " so for example now Poseidon Poseidon is uh is is pretty popular um i think that's crawl uses Poseidon"
		},
		{
			"timestamps": {
				"from": "02:14:24,200",
				"to": "02:14:30,280"
			},
			"offsets": {
				"from": 8064200,
				"to": 8070280
			},
			"text": " also zk sync uses Poseidon on the evn like performing Poseidon would be pretty expensive"
		},
		{
			"timestamps": {
				"from": "02:14:30,280",
				"to": "02:14:34,280"
			},
			"offsets": {
				"from": 8070280,
				"to": 8074280
			},
			"text": " so for that reason you cannot verify the proof directly but what you can do you can do the entire"
		},
		{
			"timestamps": {
				"from": "02:14:34,280",
				"to": "02:14:38,920"
			},
			"offsets": {
				"from": 8074280,
				"to": 8078920
			},
			"text": " verification inside the snark and then on the one you don't really care what the snark is like"
		},
		{
			"timestamps": {
				"from": "02:14:38,920",
				"to": "02:14:43,400"
			},
			"offsets": {
				"from": 8078920,
				"to": 8083400
			},
			"text": " doing you just just verify it so that's how we actually deal it deal with it if we need to have"
		},
		{
			"timestamps": {
				"from": "02:14:43,400",
				"to": "02:14:55,240"
			},
			"offsets": {
				"from": 8083400,
				"to": 8095240
			},
			"text": " it abstracted we have it abstracted if we don't then we just don't oh yeah"
		},
		{
			"timestamps": {
				"from": "02:14:55,240",
				"to": "02:15:05,240"
			},
			"offsets": {
				"from": 8095240,
				"to": 8105240
			},
			"text": " oh yeah that's uh that's actually a good question because i think it went super technical"
		},
		{
			"timestamps": {
				"from": "02:15:05,240",
				"to": "02:15:11,000"
			},
			"offsets": {
				"from": 8105240,
				"to": 8111000
			},
			"text": " so actually what we do at her relatives every two weeks we have some internal hackatons and"
		},
		{
			"timestamps": {
				"from": "02:15:11,000",
				"to": "02:15:17,080"
			},
			"offsets": {
				"from": 8111000,
				"to": 8117080
			},
			"text": " right before the merge uh we build a proof of concept that we call the merge swap and essentially"
		},
		{
			"timestamps": {
				"from": "02:15:17,080",
				"to": "02:15:23,080"
			},
			"offsets": {
				"from": 8117080,
				"to": 8123080
			},
			"text": " we allowed anyone to dump their proof of work if on proof of stake and the way how it works we"
		},
		{
			"timestamps": {
				"from": "02:15:23,080",
				"to": "02:15:28,360"
			},
			"offsets": {
				"from": 8123080,
				"to": 8128360
			},
			"text": " literally build the bridge on top of this technology and the bridge works in a way that you can lock"
		},
		{
			"timestamps": {
				"from": "02:15:28,360",
				"to": "02:15:35,800"
			},
			"offsets": {
				"from": 8128360,
				"to": 8135800
			},
			"text": " your if proof of work inside the snark contract on if proof of if proof of work chain you can prove"
		},
		{
			"timestamps": {
				"from": "02:15:35,800",
				"to": "02:15:41,160"
			},
			"offsets": {
				"from": 8135800,
				"to": 8141160
			},
			"text": " that you've done it on if you're in proof of stake you can once you the proof is verified you can"
		},
		{
			"timestamps": {
				"from": "02:15:41,160",
				"to": "02:15:46,200"
			},
			"offsets": {
				"from": 8141160,
				"to": 8146200
			},
			"text": " meet a years to 20 token and you can do whatever you want with the token and then if you want to"
		},
		{
			"timestamps": {
				"from": "02:15:46,200",
				"to": "02:15:51,640"
			},
			"offsets": {
				"from": 8146200,
				"to": 8151640
			},
			"text": " withdraw back to if you're in proof of work you just burn it you prove the fact that you burned on the"
		},
		{
			"timestamps": {
				"from": "02:15:51,640",
				"to": "02:15:59,000"
			},
			"offsets": {
				"from": 8151640,
				"to": 8159000
			},
			"text": " other side and and yeah that's it also in terms of uh other use cases i think that cross-chain"
		},
		{
			"timestamps": {
				"from": "02:15:59,000",
				"to": "02:16:04,280"
			},
			"offsets": {
				"from": 8159000,
				"to": 8164280
			},
			"text": " collateralization is pretty cool because this is the place where you want to avoid latency as much"
		},
		{
			"timestamps": {
				"from": "02:16:04,280",
				"to": "02:16:10,120"
			},
			"offsets": {
				"from": 8164280,
				"to": 8170120
			},
			"text": " as possible and you want to be asynchronous as much as possible and essentially that's that's what"
		},
		{
			"timestamps": {
				"from": "02:16:10,120",
				"to": "02:16:16,600"
			},
			"offsets": {
				"from": 8170120,
				"to": 8176600
			},
			"text": " we do here because our latency comes only from from the proving time but again using some optimistic"
		},
		{
			"timestamps": {
				"from": "02:16:16,600",
				"to": "02:16:22,280"
			},
			"offsets": {
				"from": 8176600,
				"to": 8182280
			},
			"text": " approaches and so on there are a lot of things we can do here i hope it answers the question"
		},
		{
			"timestamps": {
				"from": "02:16:30,680",
				"to": "02:16:42,920"
			},
			"offsets": {
				"from": 8190680,
				"to": 8202920
			},
			"text": " okay i think that's it i have like three minutes so guess we can wrap it up and yeah thanks"
		},
		{
			"timestamps": {
				"from": "02:16:42,920",
				"to": "02:16:44,920"
			},
			"offsets": {
				"from": 8202920,
				"to": 8204920
			},
			"text": " you"
		},
		{
			"timestamps": {
				"from": "02:16:44,920",
				"to": "02:17:13,920"
			},
			"offsets": {
				"from": 8204920,
				"to": 8233920
			},
			"text": " [ Silence ]"
		}
	]
}
