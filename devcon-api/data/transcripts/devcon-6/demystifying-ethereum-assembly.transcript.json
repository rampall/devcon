{
	"systeminfo": "AVX = 1 | AVX2 = 1 | AVX512 = 0 | FMA = 1 | NEON = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | VSX = 0 | ",
	"model": {
		"type": "base",
		"multilingual": false,
		"vocab": 51864,
		"audio": {
			"ctx": 1500,
			"state": 512,
			"head": 8,
			"layer": 6
		},
		"text": {
			"ctx": 448,
			"state": 512,
			"head": 8,
			"layer": 6
		},
		"mels": 80,
		"f16": 1
	},
	"params": {
		"model": "models/ggml-base.en.bin",
		"language": "en",
		"translate": false
	},
	"result": {
		"language": "en"
	},
	"transcription": [
		{
			"timestamps": {
				"from": "00:00:00,000",
				"to": "00:00:05,000"
			},
			"offsets": {
				"from": 0,
				"to": 5000
			},
			"text": " [MUSIC PLAYING]"
		},
		{
			"timestamps": {
				"from": "00:00:05,000",
				"to": "00:00:13,440"
			},
			"offsets": {
				"from": 5000,
				"to": 13440
			},
			"text": " All right, welcome everybody."
		},
		{
			"timestamps": {
				"from": "00:00:13,440",
				"to": "00:00:16,200"
			},
			"offsets": {
				"from": 13440,
				"to": 16200
			},
			"text": " This is going to be demystifying Ethereum Assembly,"
		},
		{
			"timestamps": {
				"from": "00:00:16,200",
				"to": "00:00:18,360"
			},
			"offsets": {
				"from": 16200,
				"to": 18360
			},
			"text": " a practical 0 to 1 guide."
		},
		{
			"timestamps": {
				"from": "00:00:18,360",
				"to": "00:00:21,320"
			},
			"offsets": {
				"from": 18360,
				"to": 21320
			},
			"text": " So my name is Joshua or JT Riley."
		},
		{
			"timestamps": {
				"from": "00:00:21,320",
				"to": "00:00:23,520"
			},
			"offsets": {
				"from": 21320,
				"to": 23520
			},
			"text": " I'm an EVM smart contract engineer."
		},
		{
			"timestamps": {
				"from": "00:00:23,520",
				"to": "00:00:28,320"
			},
			"offsets": {
				"from": 23520,
				"to": 28320
			},
			"text": " And so a little bit about why I'm here giving this presentation."
		},
		{
			"timestamps": {
				"from": "00:00:28,320",
				"to": "00:00:31,200"
			},
			"offsets": {
				"from": 28320,
				"to": 31200
			},
			"text": " There's a really, really big gap between the intermediate"
		},
		{
			"timestamps": {
				"from": "00:00:31,200",
				"to": "00:00:34,080"
			},
			"offsets": {
				"from": 31200,
				"to": 34080
			},
			"text": " solidity developer and the wizards that"
		},
		{
			"timestamps": {
				"from": "00:00:34,080",
				"to": "00:00:39,120"
			},
			"offsets": {
				"from": 34080,
				"to": 39120
			},
			"text": " can do the assembly black magic that we see in some popular"
		},
		{
			"timestamps": {
				"from": "00:00:39,120",
				"to": "00:00:39,840"
			},
			"offsets": {
				"from": 39120,
				"to": 39840
			},
			"text": " GitHub repos."
		},
		{
			"timestamps": {
				"from": "00:00:39,840",
				"to": "00:00:43,240"
			},
			"offsets": {
				"from": 39840,
				"to": 43240
			},
			"text": " So I kind of went through this the hard way,"
		},
		{
			"timestamps": {
				"from": "00:00:43,240",
				"to": "00:00:46,760"
			},
			"offsets": {
				"from": 43240,
				"to": 46760
			},
			"text": " reading through as much documentation and as many papers"
		},
		{
			"timestamps": {
				"from": "00:00:46,760",
				"to": "00:00:47,960"
			},
			"offsets": {
				"from": 46760,
				"to": 47960
			},
			"text": " as I could."
		},
		{
			"timestamps": {
				"from": "00:00:47,960",
				"to": "00:00:50,520"
			},
			"offsets": {
				"from": 47960,
				"to": 50520
			},
			"text": " And hopefully, I've condensed this down enough"
		},
		{
			"timestamps": {
				"from": "00:00:50,520",
				"to": "00:00:52,800"
			},
			"offsets": {
				"from": 50520,
				"to": 52800
			},
			"text": " that everybody here can kind of pick this up"
		},
		{
			"timestamps": {
				"from": "00:00:52,800",
				"to": "00:00:53,840"
			},
			"offsets": {
				"from": 52800,
				"to": 53840
			},
			"text": " a little bit faster."
		},
		{
			"timestamps": {
				"from": "00:00:53,840",
				"to": "00:00:55,320"
			},
			"offsets": {
				"from": 53840,
				"to": 55320
			},
			"text": " Or maybe if you already know this,"
		},
		{
			"timestamps": {
				"from": "00:00:55,320",
				"to": "00:00:56,920"
			},
			"offsets": {
				"from": 55320,
				"to": 56920
			},
			"text": " maybe this will kind of reinforce,"
		},
		{
			"timestamps": {
				"from": "00:00:56,920",
				"to": "00:00:58,760"
			},
			"offsets": {
				"from": 56920,
				"to": 58760
			},
			"text": " or you can learn new things."
		},
		{
			"timestamps": {
				"from": "00:00:58,760",
				"to": "00:01:01,240"
			},
			"offsets": {
				"from": 58760,
				"to": 61240
			},
			"text": " So this workshop is going to be pretty interactive."
		},
		{
			"timestamps": {
				"from": "00:01:01,240",
				"to": "00:01:03,920"
			},
			"offsets": {
				"from": 61240,
				"to": 63920
			},
			"text": " So if anybody has questions, if I go over something"
		},
		{
			"timestamps": {
				"from": "00:01:03,920",
				"to": "00:01:06,520"
			},
			"offsets": {
				"from": 63920,
				"to": 66520
			},
			"text": " and maybe it's not clear, feel free to stop me,"
		},
		{
			"timestamps": {
				"from": "00:01:06,520",
				"to": "00:01:07,840"
			},
			"offsets": {
				"from": 66520,
				"to": 67840
			},
			"text": " raise your hand, ask questions."
		},
		{
			"timestamps": {
				"from": "00:01:07,840",
				"to": "00:01:09,800"
			},
			"offsets": {
				"from": 67840,
				"to": 69800
			},
			"text": " We're going to get to the bottom of pretty much anything"
		},
		{
			"timestamps": {
				"from": "00:01:09,800",
				"to": "00:01:11,920"
			},
			"offsets": {
				"from": 69800,
				"to": 71920
			},
			"text": " you guys have questions on today."
		},
		{
			"timestamps": {
				"from": "00:01:11,920",
				"to": "00:01:17,760"
			},
			"offsets": {
				"from": 71920,
				"to": 77760
			},
			"text": " So as we get started, section one, obviously,"
		},
		{
			"timestamps": {
				"from": "00:01:17,760",
				"to": "00:01:20,000"
			},
			"offsets": {
				"from": 77760,
				"to": 80000
			},
			"text": " understanding the Ethereum virtual machine."
		},
		{
			"timestamps": {
				"from": "00:01:20,000",
				"to": "00:01:21,200"
			},
			"offsets": {
				"from": 80000,
				"to": 81200
			},
			"text": " Here is a link tree."
		},
		{
			"timestamps": {
				"from": "00:01:21,200",
				"to": "00:01:24,720"
			},
			"offsets": {
				"from": 81200,
				"to": 84720
			},
			"text": " It's going to be the link tree slash EVM assembly."
		},
		{
			"timestamps": {
				"from": "00:01:24,720",
				"to": "00:01:26,400"
			},
			"offsets": {
				"from": 84720,
				"to": 86400
			},
			"text": " And so this is going to have some useful links"
		},
		{
			"timestamps": {
				"from": "00:01:26,400",
				"to": "00:01:28,200"
			},
			"offsets": {
				"from": 86400,
				"to": 88200
			},
			"text": " throughout this presentation."
		},
		{
			"timestamps": {
				"from": "00:01:28,200",
				"to": "00:01:31,120"
			},
			"offsets": {
				"from": 88200,
				"to": 91120
			},
			"text": " The most important one for you to be able to follow along"
		},
		{
			"timestamps": {
				"from": "00:01:31,120",
				"to": "00:01:34,400"
			},
			"offsets": {
				"from": 91120,
				"to": 94400
			},
			"text": " and kind of play with these things is called EVM.codes."
		},
		{
			"timestamps": {
				"from": "00:01:34,400",
				"to": "00:01:37,200"
			},
			"offsets": {
				"from": 94400,
				"to": 97200
			},
			"text": " So I'm going to be using that as well periodically"
		},
		{
			"timestamps": {
				"from": "00:01:37,200",
				"to": "00:01:37,880"
			},
			"offsets": {
				"from": 97200,
				"to": 97880
			},
			"text": " throughout."
		},
		{
			"timestamps": {
				"from": "00:01:37,880",
				"to": "00:01:40,640"
			},
			"offsets": {
				"from": 97880,
				"to": 100640
			},
			"text": " Basically, what this is is a fantastic resource."
		},
		{
			"timestamps": {
				"from": "00:01:40,640",
				"to": "00:01:43,560"
			},
			"offsets": {
				"from": 100640,
				"to": 103560
			},
			"text": " It's got everything you need to know about instructions."
		},
		{
			"timestamps": {
				"from": "00:01:43,560",
				"to": "00:01:44,920"
			},
			"offsets": {
				"from": 103560,
				"to": 104920
			},
			"text": " And then it also has a playground."
		},
		{
			"timestamps": {
				"from": "00:01:44,920",
				"to": "00:01:46,760"
			},
			"offsets": {
				"from": 104920,
				"to": 106760
			},
			"text": " And that's where we're going to be demoing some of these things"
		},
		{
			"timestamps": {
				"from": "00:01:46,760",
				"to": "00:01:49,400"
			},
			"offsets": {
				"from": 106760,
				"to": 109400
			},
			"text": " so we can really visualize and internalize what's going on."
		},
		{
			"timestamps": {
				"from": "00:01:49,400",
				"to": "00:01:55,960"
			},
			"offsets": {
				"from": 109400,
				"to": 115960
			},
			"text": " So first up, we're going to talk about the instruction set."
		},
		{
			"timestamps": {
				"from": "00:01:55,960",
				"to": "00:01:58,440"
			},
			"offsets": {
				"from": 115960,
				"to": 118440
			},
			"text": " So the EVM is a stack-based virtual machine"
		},
		{
			"timestamps": {
				"from": "00:01:58,440",
				"to": "00:02:00,360"
			},
			"offsets": {
				"from": 118440,
				"to": 120360
			},
			"text": " with a relatively small instruction set."
		},
		{
			"timestamps": {
				"from": "00:02:00,360",
				"to": "00:02:02,000"
			},
			"offsets": {
				"from": 120360,
				"to": 122000
			},
			"text": " And these instructions can be categorized"
		},
		{
			"timestamps": {
				"from": "00:02:02,000",
				"to": "00:02:04,240"
			},
			"offsets": {
				"from": 122000,
				"to": 124240
			},
			"text": " by one of the following, roughly."
		},
		{
			"timestamps": {
				"from": "00:02:04,240",
				"to": "00:02:05,760"
			},
			"offsets": {
				"from": 124240,
				"to": 125760
			},
			"text": " First is stack instructions."
		},
		{
			"timestamps": {
				"from": "00:02:05,760",
				"to": "00:02:07,640"
			},
			"offsets": {
				"from": 125760,
				"to": 127640
			},
			"text": " So these are things that have to do with a stack,"
		},
		{
			"timestamps": {
				"from": "00:02:07,640",
				"to": "00:02:10,240"
			},
			"offsets": {
				"from": 127640,
				"to": 130240
			},
			"text": " the values that are on the stack, and swapping,"
		},
		{
			"timestamps": {
				"from": "00:02:10,240",
				"to": "00:02:12,640"
			},
			"offsets": {
				"from": 130240,
				"to": 132640
			},
			"text": " duplicating things like this."
		},
		{
			"timestamps": {
				"from": "00:02:12,640",
				"to": "00:02:16,360"
			},
			"offsets": {
				"from": 132640,
				"to": 136360
			},
			"text": " Arithmetic instructions are addition, subtraction,"
		},
		{
			"timestamps": {
				"from": "00:02:16,360",
				"to": "00:02:17,560"
			},
			"offsets": {
				"from": 136360,
				"to": 137560
			},
			"text": " pretty basic stuff."
		},
		{
			"timestamps": {
				"from": "00:02:17,560",
				"to": "00:02:20,560"
			},
			"offsets": {
				"from": 137560,
				"to": 140560
			},
			"text": " Compare some instructions, tend to compare two values,"
		},
		{
			"timestamps": {
				"from": "00:02:20,560",
				"to": "00:02:25,600"
			},
			"offsets": {
				"from": 140560,
				"to": 145600
			},
			"text": " and then push 0 if it's false or 1 if it's true."
		},
		{
			"timestamps": {
				"from": "00:02:25,600",
				"to": "00:02:28,320"
			},
			"offsets": {
				"from": 145600,
				"to": 148320
			},
			"text": " Bitwise instructions has to do with bit shifting"
		},
		{
			"timestamps": {
				"from": "00:02:28,320",
				"to": "00:02:30,120"
			},
			"offsets": {
				"from": 148320,
				"to": 150120
			},
			"text": " and other really cool stuff."
		},
		{
			"timestamps": {
				"from": "00:02:30,120",
				"to": "00:02:32,360"
			},
			"offsets": {
				"from": 150120,
				"to": 152360
			},
			"text": " Memory instructions are going to be interacting"
		},
		{
			"timestamps": {
				"from": "00:02:32,360",
				"to": "00:02:35,120"
			},
			"offsets": {
				"from": 152360,
				"to": 155120
			},
			"text": " with the memory in the EVM, which we'll"
		},
		{
			"timestamps": {
				"from": "00:02:35,120",
				"to": "00:02:37,160"
			},
			"offsets": {
				"from": 155120,
				"to": 157160
			},
			"text": " get into a little bit more on that page,"
		},
		{
			"timestamps": {
				"from": "00:02:37,160",
				"to": "00:02:39,400"
			},
			"offsets": {
				"from": 157160,
				"to": 159400
			},
			"text": " and then contextual instructions."
		},
		{
			"timestamps": {
				"from": "00:02:39,400",
				"to": "00:02:40,800"
			},
			"offsets": {
				"from": 159400,
				"to": 160800
			},
			"text": " So these are like reading and writing"
		},
		{
			"timestamps": {
				"from": "00:02:40,800",
				"to": "00:02:43,680"
			},
			"offsets": {
				"from": 160800,
				"to": 163680
			},
			"text": " to the environment, to storage, and other things like that."
		},
		{
			"timestamps": {
				"from": "00:02:43,680",
				"to": "00:02:47,400"
			},
			"offsets": {
				"from": 163680,
				"to": 167400
			},
			"text": " So first, we have stack instructions."
		},
		{
			"timestamps": {
				"from": "00:02:47,400",
				"to": "00:02:49,480"
			},
			"offsets": {
				"from": 167400,
				"to": 169480
			},
			"text": " So stack instructions involve manipulating"
		},
		{
			"timestamps": {
				"from": "00:02:49,480",
				"to": "00:02:52,840"
			},
			"offsets": {
				"from": 169480,
				"to": 172840
			},
			"text": " the position of a value on the stack, or values on the stack."
		},
		{
			"timestamps": {
				"from": "00:02:52,840",
				"to": "00:02:54,520"
			},
			"offsets": {
				"from": 172840,
				"to": 174520
			},
			"text": " So push in value."
		},
		{
			"timestamps": {
				"from": "00:02:54,520",
				"to": "00:02:56,800"
			},
			"offsets": {
				"from": 174520,
				"to": 176800
			},
			"text": " Basically pushes a value to the top of the stack"
		},
		{
			"timestamps": {
				"from": "00:02:56,800",
				"to": "00:03:00,160"
			},
			"offsets": {
				"from": 176800,
				"to": 180160
			},
			"text": " where in is the bite size of that value."
		},
		{
			"timestamps": {
				"from": "00:03:00,160",
				"to": "00:03:05,800"
			},
			"offsets": {
				"from": 180160,
				"to": 185800
			},
			"text": " Pop will pop a value off the top of the stack, swap in,"
		},
		{
			"timestamps": {
				"from": "00:03:05,800",
				"to": "00:03:08,800"
			},
			"offsets": {
				"from": 185800,
				"to": 188800
			},
			"text": " will swap a value on the stack with another,"
		},
		{
			"timestamps": {
				"from": "00:03:08,800",
				"to": "00:03:11,680"
			},
			"offsets": {
				"from": 188800,
				"to": 191680
			},
			"text": " and then dupe in will actually duplicate a value"
		},
		{
			"timestamps": {
				"from": "00:03:11,680",
				"to": "00:03:14,520"
			},
			"offsets": {
				"from": 191680,
				"to": 194520
			},
			"text": " based on the index."
		},
		{
			"timestamps": {
				"from": "00:03:14,520",
				"to": "00:03:18,160"
			},
			"offsets": {
				"from": 194520,
				"to": 198160
			},
			"text": " So as an example here, this is mnemonic bytecode."
		},
		{
			"timestamps": {
				"from": "00:03:18,160",
				"to": "00:03:20,000"
			},
			"offsets": {
				"from": 198160,
				"to": 200000
			},
			"text": " Basically, it's just a human readable format"
		},
		{
			"timestamps": {
				"from": "00:03:20,000",
				"to": "00:03:21,760"
			},
			"offsets": {
				"from": 200000,
				"to": 201760
			},
			"text": " of what the actual EVM bytecode is."
		},
		{
			"timestamps": {
				"from": "00:03:21,760",
				"to": "00:03:23,920"
			},
			"offsets": {
				"from": 201760,
				"to": 203920
			},
			"text": " So this is at the lowest level."
		},
		{
			"timestamps": {
				"from": "00:03:23,920",
				"to": "00:03:26,320"
			},
			"offsets": {
				"from": 203920,
				"to": 206320
			},
			"text": " So first, we have push 1."
		},
		{
			"timestamps": {
				"from": "00:03:26,320",
				"to": "00:03:29,640"
			},
			"offsets": {
				"from": 206320,
				"to": 209640
			},
			"text": " So we're pushing a value of size 1 byte."
		},
		{
			"timestamps": {
				"from": "00:03:29,640",
				"to": "00:03:31,720"
			},
			"offsets": {
				"from": 209640,
				"to": 211720
			},
			"text": " The value is going to be 1."
		},
		{
			"timestamps": {
				"from": "00:03:31,720",
				"to": "00:03:33,800"
			},
			"offsets": {
				"from": 211720,
				"to": 213800
			},
			"text": " And over here, these orange bits here,"
		},
		{
			"timestamps": {
				"from": "00:03:33,800",
				"to": "00:03:36,160"
			},
			"offsets": {
				"from": 213800,
				"to": 216160
			},
			"text": " this is actually just a comments to kind of represent"
		},
		{
			"timestamps": {
				"from": "00:03:36,160",
				"to": "00:03:38,400"
			},
			"offsets": {
				"from": 216160,
				"to": 218400
			},
			"text": " exactly what the stack should look like"
		},
		{
			"timestamps": {
				"from": "00:03:38,400",
				"to": "00:03:41,080"
			},
			"offsets": {
				"from": 218400,
				"to": 221080
			},
			"text": " after any given instruction."
		},
		{
			"timestamps": {
				"from": "00:03:41,080",
				"to": "00:03:43,160"
			},
			"offsets": {
				"from": 221080,
				"to": 223160
			},
			"text": " This next one, it's going to push 1,"
		},
		{
			"timestamps": {
				"from": "00:03:43,160",
				"to": "00:03:45,800"
			},
			"offsets": {
				"from": 223160,
				"to": 225800
			},
			"text": " and that value of 1 byte is going to be 2."
		},
		{
			"timestamps": {
				"from": "00:03:45,800",
				"to": "00:03:48,280"
			},
			"offsets": {
				"from": 225800,
				"to": 228280
			},
			"text": " So now we have 2 and 1 on the stack."
		},
		{
			"timestamps": {
				"from": "00:03:48,280",
				"to": "00:03:50,800"
			},
			"offsets": {
				"from": 228280,
				"to": 230800
			},
			"text": " You can do swap 1, which will swap."
		},
		{
			"timestamps": {
				"from": "00:03:50,800",
				"to": "00:03:53,240"
			},
			"offsets": {
				"from": 230800,
				"to": 233240
			},
			"text": " We have dupe 1, which can duplicate the first value"
		},
		{
			"timestamps": {
				"from": "00:03:53,240",
				"to": "00:03:54,280"
			},
			"offsets": {
				"from": 233240,
				"to": 234280
			},
			"text": " on the stack."
		},
		{
			"timestamps": {
				"from": "00:03:54,280",
				"to": "00:03:55,760"
			},
			"offsets": {
				"from": 234280,
				"to": 235760
			},
			"text": " And then from there, we just do pop"
		},
		{
			"timestamps": {
				"from": "00:03:55,760",
				"to": "00:03:57,400"
			},
			"offsets": {
				"from": 235760,
				"to": 237400
			},
			"text": " until we run out of values on the stack."
		},
		{
			"timestamps": {
				"from": "00:03:57,400",
				"to": "00:04:04,080"
			},
			"offsets": {
				"from": 237400,
				"to": 244080
			},
			"text": " So if you guys want to open up the EVM dot codes website,"
		},
		{
			"timestamps": {
				"from": "00:04:04,080",
				"to": "00:04:06,760"
			},
			"offsets": {
				"from": 244080,
				"to": 246760
			},
			"text": " this is EVM dot codes slash playground."
		},
		{
			"timestamps": {
				"from": "00:04:06,760",
				"to": "00:04:08,120"
			},
			"offsets": {
				"from": 246760,
				"to": 248120
			},
			"text": " You can also find it in the link stream."
		},
		{
			"timestamps": {
				"from": "00:04:08,120",
				"to": "00:04:16,520"
			},
			"offsets": {
				"from": 248120,
				"to": 256520
			},
			"text": " So first, we're going to do basically"
		},
		{
			"timestamps": {
				"from": "00:04:16,520",
				"to": "00:04:18,160"
			},
			"offsets": {
				"from": 256520,
				"to": 258160
			},
			"text": " pushing the number 1 to the stack."
		},
		{
			"timestamps": {
				"from": "00:04:18,160",
				"to": "00:04:20,120"
			},
			"offsets": {
				"from": 258160,
				"to": 260120
			},
			"text": " So we push of size 1."
		},
		{
			"timestamps": {
				"from": "00:04:20,120",
				"to": "00:04:21,880"
			},
			"offsets": {
				"from": 260120,
				"to": 261880
			},
			"text": " The value is going to be 1."
		},
		{
			"timestamps": {
				"from": "00:04:21,880",
				"to": "00:04:24,640"
			},
			"offsets": {
				"from": 261880,
				"to": 264640
			},
			"text": " We'll do the same thing with the number 2."
		},
		{
			"timestamps": {
				"from": "00:04:24,640",
				"to": "00:04:25,560"
			},
			"offsets": {
				"from": 264640,
				"to": 265560
			},
			"text": " We can do it with 3."
		},
		{
			"timestamps": {
				"from": "00:04:25,560",
				"to": "00:04:30,920"
			},
			"offsets": {
				"from": 265560,
				"to": 270920
			},
			"text": " And then we can start playing with this, right?"
		},
		{
			"timestamps": {
				"from": "00:04:30,920",
				"to": "00:04:36,600"
			},
			"offsets": {
				"from": 270920,
				"to": 276600
			},
			"text": " So let's say we want to swap the top stack item with 1"
		},
		{
			"timestamps": {
				"from": "00:04:36,600",
				"to": "00:04:38,320"
			},
			"offsets": {
				"from": 276600,
				"to": 278320
			},
			"text": " that's 2 items down from that."
		},
		{
			"timestamps": {
				"from": "00:04:38,320",
				"to": "00:04:40,040"
			},
			"offsets": {
				"from": 278320,
				"to": 280040
			},
			"text": " So we can do swap 2."
		},
		{
			"timestamps": {
				"from": "00:04:40,040",
				"to": "00:04:45,040"
			},
			"offsets": {
				"from": 280040,
				"to": 285040
			},
			"text": " And whenever we run this, we can basically step through every"
		},
		{
			"timestamps": {
				"from": "00:04:45,040",
				"to": "00:04:47,160"
			},
			"offsets": {
				"from": 285040,
				"to": 287160
			},
			"text": " instruction here."
		},
		{
			"timestamps": {
				"from": "00:04:47,160",
				"to": "00:04:50,480"
			},
			"offsets": {
				"from": 287160,
				"to": 290480
			},
			"text": " So the first one pushes the 1 to the stack."
		},
		{
			"timestamps": {
				"from": "00:04:50,480",
				"to": "00:04:52,080"
			},
			"offsets": {
				"from": 290480,
				"to": 292080
			},
			"text": " The second pushes the 2 to the stack."
		},
		{
			"timestamps": {
				"from": "00:04:52,080",
				"to": "00:04:54,280"
			},
			"offsets": {
				"from": 292080,
				"to": 294280
			},
			"text": " You can see the stack represented down here in the bottom"
		},
		{
			"timestamps": {
				"from": "00:04:54,280",
				"to": "00:04:55,520"
			},
			"offsets": {
				"from": 294280,
				"to": 295520
			},
			"text": " right."
		},
		{
			"timestamps": {
				"from": "00:04:55,520",
				"to": "00:04:57,200"
			},
			"offsets": {
				"from": 295520,
				"to": 297200
			},
			"text": " We'll do the same for 3."
		},
		{
			"timestamps": {
				"from": "00:04:57,200",
				"to": "00:05:01,400"
			},
			"offsets": {
				"from": 297200,
				"to": 301400
			},
			"text": " And then swap 2 should swap the number 3 with the item 2"
		},
		{
			"timestamps": {
				"from": "00:05:01,400",
				"to": "00:05:03,400"
			},
			"offsets": {
				"from": 301400,
				"to": 303400
			},
			"text": " items down from it."
		},
		{
			"timestamps": {
				"from": "00:05:03,400",
				"to": "00:05:04,040"
			},
			"offsets": {
				"from": 303400,
				"to": 304040
			},
			"text": " And there we go."
		},
		{
			"timestamps": {
				"from": "00:05:04,040",
				"to": "00:05:04,760"
			},
			"offsets": {
				"from": 304040,
				"to": 304760
			},
			"text": " And it swaps."
		},
		{
			"timestamps": {
				"from": "00:05:04,760",
				"to": "00:05:14,800"
			},
			"offsets": {
				"from": 304760,
				"to": 314800
			},
			"text": " So from stack instructions, we're going to go to"
		},
		{
			"timestamps": {
				"from": "00:05:14,800",
				"to": "00:05:16,400"
			},
			"offsets": {
				"from": 314800,
				"to": 316400
			},
			"text": " arithmetic instructions."
		},
		{
			"timestamps": {
				"from": "00:05:16,400",
				"to": "00:05:18,720"
			},
			"offsets": {
				"from": 316400,
				"to": 318720
			},
			"text": " So of course, add will add two values."
		},
		{
			"timestamps": {
				"from": "00:05:18,720",
				"to": "00:05:21,160"
			},
			"offsets": {
				"from": 318720,
				"to": 321160
			},
			"text": " Sub will subtract two values."
		},
		{
			"timestamps": {
				"from": "00:05:21,160",
				"to": "00:05:23,560"
			},
			"offsets": {
				"from": 321160,
				"to": 323560
			},
			"text": " Mole will multiply two values."
		},
		{
			"timestamps": {
				"from": "00:05:23,560",
				"to": "00:05:26,480"
			},
			"offsets": {
				"from": 323560,
				"to": 326480
			},
			"text": " S mole does the same thing, but it treats the number as a"
		},
		{
			"timestamps": {
				"from": "00:05:26,480",
				"to": "00:05:27,640"
			},
			"offsets": {
				"from": 326480,
				"to": 327640
			},
			"text": " signed integer."
		},
		{
			"timestamps": {
				"from": "00:05:27,640",
				"to": "00:05:29,960"
			},
			"offsets": {
				"from": 327640,
				"to": 329960
			},
			"text": " So what this means is that the number can be represented as"
		},
		{
			"timestamps": {
				"from": "00:05:29,960",
				"to": "00:05:31,840"
			},
			"offsets": {
				"from": 329960,
				"to": 331840
			},
			"text": " positive or negative."
		},
		{
			"timestamps": {
				"from": "00:05:31,840",
				"to": "00:05:33,200"
			},
			"offsets": {
				"from": 331840,
				"to": 333200
			},
			"text": " Same thing with div."
		},
		{
			"timestamps": {
				"from": "00:05:33,200",
				"to": "00:05:34,000"
			},
			"offsets": {
				"from": 333200,
				"to": 334000
			},
			"text": " Div is divide."
		},
		{
			"timestamps": {
				"from": "00:05:34,000",
				"to": "00:05:36,880"
			},
			"offsets": {
				"from": 334000,
				"to": 336880
			},
			"text": " And then s div treats them as signed integers."
		},
		{
			"timestamps": {
				"from": "00:05:36,880",
				"to": "00:05:38,760"
			},
			"offsets": {
				"from": 336880,
				"to": 338760
			},
			"text": " Mod will actually do the modulus."
		},
		{
			"timestamps": {
				"from": "00:05:38,760",
				"to": "00:05:41,040"
			},
			"offsets": {
				"from": 338760,
				"to": 341040
			},
			"text": " So the remainder after division."
		},
		{
			"timestamps": {
				"from": "00:05:41,040",
				"to": "00:05:43,520"
			},
			"offsets": {
				"from": 341040,
				"to": 343520
			},
			"text": " Exp does exponentiation."
		},
		{
			"timestamps": {
				"from": "00:05:43,520",
				"to": "00:05:45,120"
			},
			"offsets": {
				"from": 343520,
				"to": 345120
			},
			"text": " And then we actually have some instructions."
		},
		{
			"timestamps": {
				"from": "00:05:45,120",
				"to": "00:05:46,440"
			},
			"offsets": {
				"from": 345120,
				"to": 346440
			},
			"text": " Add mod and mole mod."
		},
		{
			"timestamps": {
				"from": "00:05:46,440",
				"to": "00:05:48,040"
			},
			"offsets": {
				"from": 346440,
				"to": 348040
			},
			"text": " That will consume 3 items."
		},
		{
			"timestamps": {
				"from": "00:05:48,040",
				"to": "00:05:51,880"
			},
			"offsets": {
				"from": 348040,
				"to": 351880
			},
			"text": " And basically do addition, then modulo, and then"
		},
		{
			"timestamps": {
				"from": "00:05:51,880",
				"to": "00:05:53,320"
			},
			"offsets": {
				"from": 351880,
				"to": 353320
			},
			"text": " multiplication, then modulo."
		},
		{
			"timestamps": {
				"from": "00:05:53,320",
				"to": "00:05:59,080"
			},
			"offsets": {
				"from": 353320,
				"to": 359080
			},
			"text": " And so here's our arithmetic example."
		},
		{
			"timestamps": {
				"from": "00:05:59,080",
				"to": "00:06:00,480"
			},
			"offsets": {
				"from": 359080,
				"to": 360480
			},
			"text": " We push a 1 to the stack."
		},
		{
			"timestamps": {
				"from": "00:06:00,480",
				"to": "00:06:02,240"
			},
			"offsets": {
				"from": 360480,
				"to": 362240
			},
			"text": " We push a 2 to the stack."
		},
		{
			"timestamps": {
				"from": "00:06:02,240",
				"to": "00:06:03,560"
			},
			"offsets": {
				"from": 362240,
				"to": 363560
			},
			"text": " And then we call the add instruction."
		},
		{
			"timestamps": {
				"from": "00:06:03,560",
				"to": "00:06:06,240"
			},
			"offsets": {
				"from": 363560,
				"to": 366240
			},
			"text": " It consumes the 2 and the 1, adds them together, and"
		},
		{
			"timestamps": {
				"from": "00:06:06,240",
				"to": "00:06:09,640"
			},
			"offsets": {
				"from": 366240,
				"to": 369640
			},
			"text": " pushes a 3 to the stack."
		},
		{
			"timestamps": {
				"from": "00:06:09,640",
				"to": "00:06:13,640"
			},
			"offsets": {
				"from": 369640,
				"to": 373640
			},
			"text": " Next, we'll push the number 2 to the stack."
		},
		{
			"timestamps": {
				"from": "00:06:13,640",
				"to": "00:06:15,120"
			},
			"offsets": {
				"from": 373640,
				"to": 375120
			},
			"text": " We'll duplicate it."
		},
		{
			"timestamps": {
				"from": "00:06:15,120",
				"to": "00:06:15,680"
			},
			"offsets": {
				"from": 375120,
				"to": 375680
			},
			"text": " So--"
		},
		{
			"timestamps": {
				"from": "00:06:15,680",
				"to": "00:06:18,400"
			},
			"offsets": {
				"from": 375680,
				"to": 378400
			},
			"text": " all right, sorry, we'll duplicate the second item on the stack."
		},
		{
			"timestamps": {
				"from": "00:06:18,400",
				"to": "00:06:20,400"
			},
			"offsets": {
				"from": 378400,
				"to": 380400
			},
			"text": " So now we have 3, 2, 3."
		},
		{
			"timestamps": {
				"from": "00:06:20,400",
				"to": "00:06:22,000"
			},
			"offsets": {
				"from": 380400,
				"to": 382000
			},
			"text": " And then we'll multiply, which will give us 3."
		},
		{
			"timestamps": {
				"from": "00:06:22,000",
				"to": "00:06:23,400"
			},
			"offsets": {
				"from": 382000,
				"to": 383400
			},
			"text": " Sorry."
		},
		{
			"timestamps": {
				"from": "00:06:23,400",
				"to": "00:06:24,120"
			},
			"offsets": {
				"from": 383400,
				"to": 384120
			},
			"text": " We'll multiply."
		},
		{
			"timestamps": {
				"from": "00:06:24,120",
				"to": "00:06:25,520"
			},
			"offsets": {
				"from": 384120,
				"to": 385520
			},
			"text": " It'll give us 6."
		},
		{
			"timestamps": {
				"from": "00:06:25,520",
				"to": "00:06:28,080"
			},
			"offsets": {
				"from": 385520,
				"to": 388080
			},
			"text": " And so now the stack is 6 and then 3."
		},
		{
			"timestamps": {
				"from": "00:06:28,080",
				"to": "00:06:29,960"
			},
			"offsets": {
				"from": 388080,
				"to": 389960
			},
			"text": " And then we'll divide those, which will give us 2."
		},
		{
			"timestamps": {
				"from": "00:06:29,960",
				"to": "00:06:34,320"
			},
			"offsets": {
				"from": 389960,
				"to": 394320
			},
			"text": " So hopping over to the playground again."
		},
		{
			"timestamps": {
				"from": "00:06:42,720",
				"to": "00:06:47,480"
			},
			"offsets": {
				"from": 402720,
				"to": 407480
			},
			"text": " So we'll push 2, push 3, multiply, and let's push--"
		},
		{
			"timestamps": {
				"from": "00:06:47,480",
				"to": "00:06:52,480"
			},
			"offsets": {
				"from": 407480,
				"to": 412480
			},
			"text": " let's say 5, and then add."
		},
		{
			"timestamps": {
				"from": "00:06:52,480",
				"to": "00:06:58,880"
			},
			"offsets": {
				"from": 412480,
				"to": 418880
			},
			"text": " So as we step through this, see the 2 is pushed to the stack."
		},
		{
			"timestamps": {
				"from": "00:06:58,880",
				"to": "00:07:01,120"
			},
			"offsets": {
				"from": 418880,
				"to": 421120
			},
			"text": " Then the 3, those are multiplied."
		},
		{
			"timestamps": {
				"from": "00:07:01,120",
				"to": "00:07:02,200"
			},
			"offsets": {
				"from": 421120,
				"to": 422200
			},
			"text": " So the 2 and 3 are consumed."
		},
		{
			"timestamps": {
				"from": "00:07:02,200",
				"to": "00:07:03,440"
			},
			"offsets": {
				"from": 422200,
				"to": 423440
			},
			"text": " There's the 6."
		},
		{
			"timestamps": {
				"from": "00:07:03,440",
				"to": "00:07:04,760"
			},
			"offsets": {
				"from": 423440,
				"to": 424760
			},
			"text": " We push the 5."
		},
		{
			"timestamps": {
				"from": "00:07:04,760",
				"to": "00:07:05,840"
			},
			"offsets": {
				"from": 424760,
				"to": 425840
			},
			"text": " We add it together."
		},
		{
			"timestamps": {
				"from": "00:07:05,840",
				"to": "00:07:07,600"
			},
			"offsets": {
				"from": 425840,
				"to": 427600
			},
			"text": " And then it'll give us 11."
		},
		{
			"timestamps": {
				"from": "00:07:07,600",
				"to": "00:07:10,000"
			},
			"offsets": {
				"from": 427600,
				"to": 430000
			},
			"text": " Now this looks like b, because this is actually an hexadecimal"
		},
		{
			"timestamps": {
				"from": "00:07:10,000",
				"to": "00:07:10,760"
			},
			"offsets": {
				"from": 430000,
				"to": 430760
			},
			"text": " representation."
		},
		{
			"timestamps": {
				"from": "00:07:10,760",
				"to": "00:07:13,280"
			},
			"offsets": {
				"from": 430760,
				"to": 433280
			},
			"text": " So instead of going 1 to 9, then rolling over,"
		},
		{
			"timestamps": {
				"from": "00:07:13,280",
				"to": "00:07:15,560"
			},
			"offsets": {
				"from": 433280,
				"to": 435560
			},
			"text": " it actually goes 1 to 9, then a to f,"
		},
		{
			"timestamps": {
				"from": "00:07:15,560",
				"to": "00:07:17,200"
			},
			"offsets": {
				"from": 435560,
				"to": 437200
			},
			"text": " and then it rolls over to the next."
		},
		{
			"timestamps": {
				"from": "00:07:17,200",
				"to": "00:07:24,920"
			},
			"offsets": {
				"from": 437200,
				"to": 444920
			},
			"text": " So next up, we have comparison instructions."
		},
		{
			"timestamps": {
				"from": "00:07:24,920",
				"to": "00:07:27,960"
			},
			"offsets": {
				"from": 444920,
				"to": 447960
			},
			"text": " So what this will do is pop 1 or 2 values from the stack,"
		},
		{
			"timestamps": {
				"from": "00:07:27,960",
				"to": "00:07:30,200"
			},
			"offsets": {
				"from": 447960,
				"to": 450200
			},
			"text": " perform a comparison, and then based on the result,"
		},
		{
			"timestamps": {
				"from": "00:07:30,200",
				"to": "00:07:34,000"
			},
			"offsets": {
				"from": 450200,
				"to": 454000
			},
			"text": " it'll either return true or false."
		},
		{
			"timestamps": {
				"from": "00:07:34,000",
				"to": "00:07:35,760"
			},
			"offsets": {
				"from": 454000,
				"to": 455760
			},
			"text": " Those are actually reversed."
		},
		{
			"timestamps": {
				"from": "00:07:35,760",
				"to": "00:07:37,200"
			},
			"offsets": {
				"from": 455760,
				"to": 457200
			},
			"text": " If it pushes true, it's going to be 1."
		},
		{
			"timestamps": {
				"from": "00:07:37,200",
				"to": "00:07:39,520"
			},
			"offsets": {
				"from": 457200,
				"to": 459520
			},
			"text": " If it pushes false, it's going to be 0."
		},
		{
			"timestamps": {
				"from": "00:07:39,520",
				"to": "00:07:45,240"
			},
			"offsets": {
				"from": 459520,
				"to": 465240
			},
			"text": " So Lt will push if the top value is less than the second value."
		},
		{
			"timestamps": {
				"from": "00:07:45,240",
				"to": "00:07:48,160"
			},
			"offsets": {
				"from": 465240,
				"to": 468160
			},
			"text": " SLT, of course, is with signed integers."
		},
		{
			"timestamps": {
				"from": "00:07:48,160",
				"to": "00:07:50,520"
			},
			"offsets": {
				"from": 468160,
				"to": 470520
			},
			"text": " Greater than, or GT does greater than."
		},
		{
			"timestamps": {
				"from": "00:07:50,520",
				"to": "00:07:53,600"
			},
			"offsets": {
				"from": 470520,
				"to": 473600
			},
			"text": " So if the top value is greater than the second value,"
		},
		{
			"timestamps": {
				"from": "00:07:53,600",
				"to": "00:07:55,480"
			},
			"offsets": {
				"from": 473600,
				"to": 475480
			},
			"text": " then we push 1."
		},
		{
			"timestamps": {
				"from": "00:07:55,480",
				"to": "00:07:58,280"
			},
			"offsets": {
				"from": 475480,
				"to": 478280
			},
			"text": " EQ will compare and see if the top two items on the stack"
		},
		{
			"timestamps": {
				"from": "00:07:58,280",
				"to": "00:08:04,000"
			},
			"offsets": {
				"from": 478280,
				"to": 484000
			},
			"text": " are equal, and then is 0, will push a true to the top--"
		},
		{
			"timestamps": {
				"from": "00:08:04,000",
				"to": "00:08:07,840"
			},
			"offsets": {
				"from": 484000,
				"to": 487840
			},
			"text": " sorry, it'll push true if the top value is 0."
		},
		{
			"timestamps": {
				"from": "00:08:07,840",
				"to": "00:08:09,360"
			},
			"offsets": {
				"from": 487840,
				"to": 489360
			},
			"text": " Now something to note about is 0."
		},
		{
			"timestamps": {
				"from": "00:08:09,360",
				"to": "00:08:13,360"
			},
			"offsets": {
				"from": 489360,
				"to": 493360
			},
			"text": " You're going to see this a lot in Yule files and other low level"
		},
		{
			"timestamps": {
				"from": "00:08:13,360",
				"to": "00:08:14,000"
			},
			"offsets": {
				"from": 493360,
				"to": 494000
			},
			"text": " assembly stuff."
		},
		{
			"timestamps": {
				"from": "00:08:14,000",
				"to": "00:08:17,760"
			},
			"offsets": {
				"from": 494000,
				"to": 497760
			},
			"text": " Is 0 is commonly used as a inverse operator."
		},
		{
			"timestamps": {
				"from": "00:08:17,760",
				"to": "00:08:19,920"
			},
			"offsets": {
				"from": 497760,
				"to": 499920
			},
			"text": " So it's same as the exclamation point in front of a Boolean."
		},
		{
			"timestamps": {
				"from": "00:08:19,920",
				"to": "00:08:27,280"
			},
			"offsets": {
				"from": 499920,
				"to": 507280
			},
			"text": " So as a comparison example, we push 1, and then we push 2."
		},
		{
			"timestamps": {
				"from": "00:08:27,280",
				"to": "00:08:28,120"
			},
			"offsets": {
				"from": 507280,
				"to": 508120
			},
			"text": " We'll check equal."
		},
		{
			"timestamps": {
				"from": "00:08:28,120",
				"to": "00:08:29,360"
			},
			"offsets": {
				"from": 508120,
				"to": 509360
			},
			"text": " Of course, this is going to push false."
		},
		{
			"timestamps": {
				"from": "00:08:29,360",
				"to": "00:08:32,040"
			},
			"offsets": {
				"from": 509360,
				"to": 512040
			},
			"text": " That's going to be 0."
		},
		{
			"timestamps": {
				"from": "00:08:32,040",
				"to": "00:08:34,320"
			},
			"offsets": {
				"from": 512040,
				"to": 514320
			},
			"text": " And then we can use is 0 to invert that,"
		},
		{
			"timestamps": {
				"from": "00:08:34,320",
				"to": "00:08:35,720"
			},
			"offsets": {
				"from": 514320,
				"to": 515720
			},
			"text": " if we need 2 for whatever reason."
		},
		{
			"timestamps": {
				"from": "00:08:35,720",
				"to": "00:08:37,200"
			},
			"offsets": {
				"from": 515720,
				"to": 517200
			},
			"text": " So it'll invert it the true."
		},
		{
			"timestamps": {
				"from": "00:08:37,200",
				"to": "00:08:38,760"
			},
			"offsets": {
				"from": 517200,
				"to": 518760
			},
			"text": " And then at the end, we pop there."
		},
		{
			"timestamps": {
				"from": "00:08:38,760",
				"to": "00:08:44,520"
			},
			"offsets": {
				"from": 518760,
				"to": 524520
			},
			"text": " Next up, we have bitwise instructions."
		},
		{
			"timestamps": {
				"from": "00:08:44,520",
				"to": "00:08:47,480"
			},
			"offsets": {
				"from": 524520,
				"to": 527480
			},
			"text": " So bitwise instructions pop one or more values from the stack"
		},
		{
			"timestamps": {
				"from": "00:08:47,480",
				"to": "00:08:50,720"
			},
			"offsets": {
				"from": 527480,
				"to": 530720
			},
			"text": " and perform some bitwise operation on them."
		},
		{
			"timestamps": {
				"from": "00:08:50,720",
				"to": "00:08:54,800"
			},
			"offsets": {
				"from": 530720,
				"to": 534800
			},
			"text": " And performs a bitwise and on the top two stack values."
		},
		{
			"timestamps": {
				"from": "00:08:54,800",
				"to": "00:08:59,200"
			},
			"offsets": {
				"from": 534800,
				"to": 539200
			},
			"text": " So what this means is that every bit, or every 1 or 0"
		},
		{
			"timestamps": {
				"from": "00:08:59,200",
				"to": "00:09:02,680"
			},
			"offsets": {
				"from": 539200,
				"to": 542680
			},
			"text": " within this number, if you compare two values,"
		},
		{
			"timestamps": {
				"from": "00:09:02,680",
				"to": "00:09:07,280"
			},
			"offsets": {
				"from": 542680,
				"to": 547280
			},
			"text": " the result is only 1 if both bits are 1."
		},
		{
			"timestamps": {
				"from": "00:09:07,280",
				"to": "00:09:11,000"
			},
			"offsets": {
				"from": 547280,
				"to": 551000
			},
			"text": " So if actually, I think we'll have a bitwise example"
		},
		{
			"timestamps": {
				"from": "00:09:11,000",
				"to": "00:09:11,760"
			},
			"offsets": {
				"from": 551000,
				"to": 551760
			},
			"text": " in a second."
		},
		{
			"timestamps": {
				"from": "00:09:11,760",
				"to": "00:09:17,480"
			},
			"offsets": {
				"from": 551760,
				"to": 557480
			},
			"text": " But basically, it's only a 1 if the two bits are 1."
		},
		{
			"timestamps": {
				"from": "00:09:17,480",
				"to": "00:09:22,640"
			},
			"offsets": {
				"from": 557480,
				"to": 562640
			},
			"text": " An or operation will be 1 if either of the two values are 1."
		},
		{
			"timestamps": {
				"from": "00:09:22,640",
				"to": "00:09:24,720"
			},
			"offsets": {
				"from": 562640,
				"to": 564720
			},
			"text": " XOR is exclusive OR."
		},
		{
			"timestamps": {
				"from": "00:09:24,720",
				"to": "00:09:29,120"
			},
			"offsets": {
				"from": 564720,
				"to": 569120
			},
			"text": " So basically, it will only push a 1 if 1 of the two values is 1,"
		},
		{
			"timestamps": {
				"from": "00:09:29,120",
				"to": "00:09:30,920"
			},
			"offsets": {
				"from": 569120,
				"to": 570920
			},
			"text": " but not both."
		},
		{
			"timestamps": {
				"from": "00:09:30,920",
				"to": "00:09:32,280"
			},
			"offsets": {
				"from": 570920,
				"to": 572280
			},
			"text": " And not, we'll invert it."
		},
		{
			"timestamps": {
				"from": "00:09:32,280",
				"to": "00:09:36,440"
			},
			"offsets": {
				"from": 572280,
				"to": 576440
			},
			"text": " So whatever the value is, it'll invert that if it's 0, 1 if it's 1, 0."
		},
		{
			"timestamps": {
				"from": "00:09:36,440",
				"to": "00:09:40,320"
			},
			"offsets": {
				"from": 576440,
				"to": 580320
			},
			"text": " And then SHR and SHL will perform bit shift operations"
		},
		{
			"timestamps": {
				"from": "00:09:40,320",
				"to": "00:09:44,520"
			},
			"offsets": {
				"from": 580320,
				"to": 584520
			},
			"text": " where we can shift the bits left and right."
		},
		{
			"timestamps": {
				"from": "00:09:44,520",
				"to": "00:09:47,600"
			},
			"offsets": {
				"from": 584520,
				"to": 587600
			},
			"text": " So as an example, over here on the left,"
		},
		{
			"timestamps": {
				"from": "00:09:47,600",
				"to": "00:09:51,200"
			},
			"offsets": {
				"from": 587600,
				"to": 591200
			},
			"text": " there's a little bit of encoding here just showing you basically"
		},
		{
			"timestamps": {
				"from": "00:09:51,200",
				"to": "00:09:53,920"
			},
			"offsets": {
				"from": 591200,
				"to": 593920
			},
			"text": " what these numbers look like in binary format."
		},
		{
			"timestamps": {
				"from": "00:09:53,920",
				"to": "00:09:58,560"
			},
			"offsets": {
				"from": 593920,
				"to": 598560
			},
			"text": " And then on the right, we have push 1, push 2, familiar with this."
		},
		{
			"timestamps": {
				"from": "00:09:58,560",
				"to": "00:10:06,560"
			},
			"offsets": {
				"from": 598560,
				"to": 606560
			},
			"text": " But the SHL operation is going to shift the number 1 by 2 bits."
		},
		{
			"timestamps": {
				"from": "00:10:06,560",
				"to": "00:10:14,280"
			},
			"offsets": {
				"from": 606560,
				"to": 614280
			},
			"text": " So it's going to move it over 2 so we can see here it starts at 0, 0, 0, 1."
		},
		{
			"timestamps": {
				"from": "00:10:14,280",
				"to": "00:10:18,880"
			},
			"offsets": {
				"from": 614280,
				"to": 618880
			},
			"text": " But after it moves over 2, it's going to be 0, 1, 0, 0."
		},
		{
			"timestamps": {
				"from": "00:10:18,880",
				"to": "00:10:20,880"
			},
			"offsets": {
				"from": 618880,
				"to": 620880
			},
			"text": " And then we can do the same thing to shift it right."
		},
		{
			"timestamps": {
				"from": "00:10:20,880",
				"to": "00:10:22,400"
			},
			"offsets": {
				"from": 620880,
				"to": 622400
			},
			"text": " So we push another 2 to the stack."
		},
		{
			"timestamps": {
				"from": "00:10:22,400",
				"to": "00:10:26,040"
			},
			"offsets": {
				"from": 622400,
				"to": 626040
			},
			"text": " SHR is going to shift it back to where it was."
		},
		{
			"timestamps": {
				"from": "00:10:26,040",
				"to": "00:10:28,040"
			},
			"offsets": {
				"from": 626040,
				"to": 628040
			},
			"text": " And then the not instruction, as you can see,"
		},
		{
			"timestamps": {
				"from": "00:10:28,040",
				"to": "00:10:29,080"
			},
			"offsets": {
				"from": 628040,
				"to": 629080
			},
			"text": " it's going to flip every bit."
		},
		{
			"timestamps": {
				"from": "00:10:29,080",
				"to": "00:10:31,600"
			},
			"offsets": {
				"from": 629080,
				"to": 631600
			},
			"text": " So 0, 0, 0, 1 becomes 1, 1, 1, 0."
		},
		{
			"timestamps": {
				"from": "00:10:31,600",
				"to": "00:10:38,680"
			},
			"offsets": {
				"from": 631600,
				"to": 638680
			},
			"text": " So memory instructions can read and write to a chunk of memory."
		},
		{
			"timestamps": {
				"from": "00:10:38,680",
				"to": "00:10:44,240"
			},
			"offsets": {
				"from": 638680,
				"to": 644240
			},
			"text": " A memory is this linear data that can be read and written to"
		},
		{
			"timestamps": {
				"from": "00:10:44,240",
				"to": "00:10:45,880"
			},
			"offsets": {
				"from": 644240,
				"to": 645880
			},
			"text": " during the execution of a program."
		},
		{
			"timestamps": {
				"from": "00:10:45,880",
				"to": "00:10:47,600"
			},
			"offsets": {
				"from": 645880,
				"to": 647600
			},
			"text": " So it's a different place in the stack."
		},
		{
			"timestamps": {
				"from": "00:10:47,600",
				"to": "00:10:50,120"
			},
			"offsets": {
				"from": 647600,
				"to": 650120
			},
			"text": " It's good for storing things like arbitrarily sized values"
		},
		{
			"timestamps": {
				"from": "00:10:50,120",
				"to": "00:10:51,920"
			},
			"offsets": {
				"from": 650120,
				"to": 651920
			},
			"text": " and things like that."
		},
		{
			"timestamps": {
				"from": "00:10:51,920",
				"to": "00:10:56,960"
			},
			"offsets": {
				"from": 651920,
				"to": 656960
			},
			"text": " So M-Store will store a 32 byte or 256 bit word to memory."
		},
		{
			"timestamps": {
				"from": "00:10:56,960",
				"to": "00:11:01,000"
			},
			"offsets": {
				"from": 656960,
				"to": 661000
			},
			"text": " Everything in the EVM operates on these 32 byte words."
		},
		{
			"timestamps": {
				"from": "00:11:01,000",
				"to": "00:11:03,240"
			},
			"offsets": {
				"from": 661000,
				"to": 663240
			},
			"text": " So we can store full 32 byte word."
		},
		{
			"timestamps": {
				"from": "00:11:03,240",
				"to": "00:11:09,080"
			},
			"offsets": {
				"from": 663240,
				"to": 669080
			},
			"text": " We can actually also store a single byte or 8 bit word to memory."
		},
		{
			"timestamps": {
				"from": "00:11:09,080",
				"to": "00:11:10,600"
			},
			"offsets": {
				"from": 669080,
				"to": 670600
			},
			"text": " And we can also M-Load."
		},
		{
			"timestamps": {
				"from": "00:11:10,600",
				"to": "00:11:14,720"
			},
			"offsets": {
				"from": 670600,
				"to": 674720
			},
			"text": " So what this does is loads a 32 byte word from memory,"
		},
		{
			"timestamps": {
				"from": "00:11:14,720",
				"to": "00:11:16,520"
			},
			"offsets": {
				"from": 674720,
				"to": 676520
			},
			"text": " given some index in that memory."
		},
		{
			"timestamps": {
				"from": "00:11:16,520",
				"to": "00:11:22,320"
			},
			"offsets": {
				"from": 676520,
				"to": 682320
			},
			"text": " So here we're going to push the number 1, then the number 0"
		},
		{
			"timestamps": {
				"from": "00:11:22,320",
				"to": "00:11:23,240"
			},
			"offsets": {
				"from": 682320,
				"to": 683240
			},
			"text": " to the stack."
		},
		{
			"timestamps": {
				"from": "00:11:23,240",
				"to": "00:11:25,920"
			},
			"offsets": {
				"from": 683240,
				"to": 685920
			},
			"text": " And what M-Store is going to do is consume these 2."
		},
		{
			"timestamps": {
				"from": "00:11:25,920",
				"to": "00:11:28,760"
			},
			"offsets": {
				"from": 685920,
				"to": 688760
			},
			"text": " And it's going to say, at position 0, we're"
		},
		{
			"timestamps": {
				"from": "00:11:28,760",
				"to": "00:11:30,240"
			},
			"offsets": {
				"from": 688760,
				"to": 690240
			},
			"text": " going to store the number 1."
		},
		{
			"timestamps": {
				"from": "00:11:30,240",
				"to": "00:11:34,680"
			},
			"offsets": {
				"from": 690240,
				"to": 694680
			},
			"text": " And it's going to be padded out to the full 32 bytes."
		},
		{
			"timestamps": {
				"from": "00:11:34,680",
				"to": "00:11:38,200"
			},
			"offsets": {
				"from": 694680,
				"to": 698200
			},
			"text": " And so if we basically-- after we've written to memory,"
		},
		{
			"timestamps": {
				"from": "00:11:38,200",
				"to": "00:11:42,400"
			},
			"offsets": {
				"from": 698200,
				"to": 702400
			},
			"text": " if we push a 0 to the stack or if we push any index"
		},
		{
			"timestamps": {
				"from": "00:11:42,400",
				"to": "00:11:44,680"
			},
			"offsets": {
				"from": 702400,
				"to": 704680
			},
			"text": " and memory to the stack, we can call M-Load."
		},
		{
			"timestamps": {
				"from": "00:11:44,680",
				"to": "00:11:47,520"
			},
			"offsets": {
				"from": 704680,
				"to": 707520
			},
			"text": " It's going to consume that index and then return to us"
		},
		{
			"timestamps": {
				"from": "00:11:47,520",
				"to": "00:11:48,400"
			},
			"offsets": {
				"from": 707520,
				"to": 708400
			},
			"text": " the value there."
		},
		{
			"timestamps": {
				"from": "00:11:48,400",
				"to": "00:11:51,000"
			},
			"offsets": {
				"from": 708400,
				"to": 711000
			},
			"text": " So in this case, pushing 0 and M-Load is actually"
		},
		{
			"timestamps": {
				"from": "00:11:51,000",
				"to": "00:11:52,600"
			},
			"offsets": {
				"from": 711000,
				"to": 712600
			},
			"text": " going to pull out this 1."
		},
		{
			"timestamps": {
				"from": "00:11:52,600",
				"to": "00:11:56,440"
			},
			"offsets": {
				"from": 712600,
				"to": 716440
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:11:56,440",
				"to": "00:11:58,440"
			},
			"offsets": {
				"from": 716440,
				"to": 718440
			},
			"text": " We'll go ahead and do an example for this one."
		},
		{
			"timestamps": {
				"from": "00:11:58,440",
				"to": "00:12:03,980"
			},
			"offsets": {
				"from": 718440,
				"to": 723980
			},
			"text": " Sumon."
		},
		{
			"timestamps": {
				"from": "00:12:03,980",
				"to": "00:12:08,440"
			},
			"offsets": {
				"from": 723980,
				"to": 728440
			},
			"text": " Is that better?"
		},
		{
			"timestamps": {
				"from": "00:12:08,440",
				"to": "00:12:09,760"
			},
			"offsets": {
				"from": 728440,
				"to": 729760
			},
			"text": " Cool."
		},
		{
			"timestamps": {
				"from": "00:12:09,760",
				"to": "00:12:11,160"
			},
			"offsets": {
				"from": 729760,
				"to": 731160
			},
			"text": " So we'll push the number 1 to the stack."
		},
		{
			"timestamps": {
				"from": "00:12:11,160",
				"to": "00:12:14,680"
			},
			"offsets": {
				"from": 731160,
				"to": 734680
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:12:14,680",
				"to": "00:12:18,680"
			},
			"offsets": {
				"from": 734680,
				"to": 738680
			},
			"text": " We'll push 1 to the stack, then we'll push 0 to the stack."
		},
		{
			"timestamps": {
				"from": "00:12:18,680",
				"to": "00:12:23,280"
			},
			"offsets": {
				"from": 738680,
				"to": 743280
			},
			"text": " And M-Store is going to treat the 0 as the index"
		},
		{
			"timestamps": {
				"from": "00:12:23,280",
				"to": "00:12:26,160"
			},
			"offsets": {
				"from": 743280,
				"to": 746160
			},
			"text": " and the 1 as the value."
		},
		{
			"timestamps": {
				"from": "00:12:26,160",
				"to": "00:12:30,320"
			},
			"offsets": {
				"from": 746160,
				"to": 750320
			},
			"text": " And when we want to retrieve this later, we can push 1--"
		},
		{
			"timestamps": {
				"from": "00:12:30,320",
				"to": "00:12:31,320"
			},
			"offsets": {
				"from": 750320,
				"to": 751320
			},
			"text": " oh, sorry."
		},
		{
			"timestamps": {
				"from": "00:12:31,320",
				"to": "00:12:34,600"
			},
			"offsets": {
				"from": 751320,
				"to": 754600
			},
			"text": " Push 0 and then M-Load."
		},
		{
			"timestamps": {
				"from": "00:12:34,600",
				"to": "00:12:38,960"
			},
			"offsets": {
				"from": 754600,
				"to": 758960
			},
			"text": " And so if we step through this, we'll see the stack has a 1,"
		},
		{
			"timestamps": {
				"from": "00:12:38,960",
				"to": "00:12:40,400"
			},
			"offsets": {
				"from": 758960,
				"to": 760400
			},
			"text": " then a 0."
		},
		{
			"timestamps": {
				"from": "00:12:40,400",
				"to": "00:12:42,560"
			},
			"offsets": {
				"from": 760400,
				"to": 762560
			},
			"text": " M-Store is going to put in memory."
		},
		{
			"timestamps": {
				"from": "00:12:42,560",
				"to": "00:12:45,880"
			},
			"offsets": {
				"from": 762560,
				"to": 765880
			},
			"text": " That first word is a 1."
		},
		{
			"timestamps": {
				"from": "00:12:45,880",
				"to": "00:12:47,160"
			},
			"offsets": {
				"from": 765880,
				"to": 767160
			},
			"text": " And whenever we want to load from this,"
		},
		{
			"timestamps": {
				"from": "00:12:47,160",
				"to": "00:12:49,040"
			},
			"offsets": {
				"from": 767160,
				"to": 769040
			},
			"text": " we start at index 0 and M-Load."
		},
		{
			"timestamps": {
				"from": "00:12:49,040",
				"to": "00:12:51,280"
			},
			"offsets": {
				"from": 769040,
				"to": 771280
			},
			"text": " And it's going to push that value back onto the stack."
		},
		{
			"timestamps": {
				"from": "00:12:51,280",
				"to": "00:12:58,840"
			},
			"offsets": {
				"from": 771280,
				"to": 778840
			},
			"text": " Now getting into context instructions, specifically"
		},
		{
			"timestamps": {
				"from": "00:12:58,840",
				"to": "00:13:02,480"
			},
			"offsets": {
				"from": 778840,
				"to": 782480
			},
			"text": " the ones that read from the local context."
		},
		{
			"timestamps": {
				"from": "00:13:02,480",
				"to": "00:13:04,040"
			},
			"offsets": {
				"from": 782480,
				"to": 784040
			},
			"text": " And this is not a comprehensive list."
		},
		{
			"timestamps": {
				"from": "00:13:04,040",
				"to": "00:13:05,280"
			},
			"offsets": {
				"from": 784040,
				"to": 785280
			},
			"text": " There are actually quite a few."
		},
		{
			"timestamps": {
				"from": "00:13:05,280",
				"to": "00:13:07,600"
			},
			"offsets": {
				"from": 785280,
				"to": 787600
			},
			"text": " But some of the important ones, caller,"
		},
		{
			"timestamps": {
				"from": "00:13:07,600",
				"to": "00:13:10,640"
			},
			"offsets": {
				"from": 787600,
				"to": 790640
			},
			"text": " pushes the address that called the current context."
		},
		{
			"timestamps": {
				"from": "00:13:10,640",
				"to": "00:13:12,160"
			},
			"offsets": {
				"from": 790640,
				"to": 792160
			},
			"text": " So if you're familiar with Solidity,"
		},
		{
			"timestamps": {
				"from": "00:13:12,160",
				"to": "00:13:14,640"
			},
			"offsets": {
				"from": 792160,
				"to": 794640
			},
			"text": " this is the same thing as message.sender."
		},
		{
			"timestamps": {
				"from": "00:13:14,640",
				"to": "00:13:16,880"
			},
			"offsets": {
				"from": 794640,
				"to": 796880
			},
			"text": " We have timestamp, which pushes the current blocks"
		},
		{
			"timestamps": {
				"from": "00:13:16,880",
				"to": "00:13:17,480"
			},
			"offsets": {
				"from": 796880,
				"to": 797480
			},
			"text": " timestamp."
		},
		{
			"timestamps": {
				"from": "00:13:17,480",
				"to": "00:13:20,040"
			},
			"offsets": {
				"from": 797480,
				"to": 800040
			},
			"text": " Again, same thing as block.time stamp."
		},
		{
			"timestamps": {
				"from": "00:13:20,040",
				"to": "00:13:21,920"
			},
			"offsets": {
				"from": 800040,
				"to": 801920
			},
			"text": " Then we have other things like static call,"
		},
		{
			"timestamps": {
				"from": "00:13:21,920",
				"to": "00:13:24,560"
			},
			"offsets": {
				"from": 801920,
				"to": 804560
			},
			"text": " which can make a read-only call to another contract."
		},
		{
			"timestamps": {
				"from": "00:13:24,560",
				"to": "00:13:26,840"
			},
			"offsets": {
				"from": 804560,
				"to": 806840
			},
			"text": " So if there's a function that sits on another contract,"
		},
		{
			"timestamps": {
				"from": "00:13:26,840",
				"to": "00:13:28,720"
			},
			"offsets": {
				"from": 806840,
				"to": 808720
			},
			"text": " we can call that through static call."
		},
		{
			"timestamps": {
				"from": "00:13:28,720",
				"to": "00:13:31,240"
			},
			"offsets": {
				"from": 808720,
				"to": 811240
			},
			"text": " And as long as it doesn't write to persistent storage"
		},
		{
			"timestamps": {
				"from": "00:13:31,240",
				"to": "00:13:33,800"
			},
			"offsets": {
				"from": 811240,
				"to": 813800
			},
			"text": " or doesn't update the state of the EVM,"
		},
		{
			"timestamps": {
				"from": "00:13:33,800",
				"to": "00:13:36,200"
			},
			"offsets": {
				"from": 813800,
				"to": 816200
			},
			"text": " then we can read from that."
		},
		{
			"timestamps": {
				"from": "00:13:36,200",
				"to": "00:13:39,160"
			},
			"offsets": {
				"from": 816200,
				"to": 819160
			},
			"text": " Call data load can load a chunk of call data"
		},
		{
			"timestamps": {
				"from": "00:13:39,160",
				"to": "00:13:40,280"
			},
			"offsets": {
				"from": 819160,
				"to": 820280
			},
			"text": " into the current context."
		},
		{
			"timestamps": {
				"from": "00:13:40,280",
				"to": "00:13:42,440"
			},
			"offsets": {
				"from": 820280,
				"to": 822440
			},
			"text": " And so what the call data is is basically"
		},
		{
			"timestamps": {
				"from": "00:13:42,440",
				"to": "00:13:44,840"
			},
			"offsets": {
				"from": 822440,
				"to": 824840
			},
			"text": " the data that is sent to your contract"
		},
		{
			"timestamps": {
				"from": "00:13:44,840",
				"to": "00:13:46,400"
			},
			"offsets": {
				"from": 824840,
				"to": 826400
			},
			"text": " to tell you a little bit about what function"
		},
		{
			"timestamps": {
				"from": "00:13:46,400",
				"to": "00:13:50,280"
			},
			"offsets": {
				"from": 826400,
				"to": 830280
			},
			"text": " to execute, what arguments it has, and things similar to this."
		},
		{
			"timestamps": {
				"from": "00:13:50,280",
				"to": "00:13:54,240"
			},
			"offsets": {
				"from": 830280,
				"to": 834240
			},
			"text": " So call data load can actually pull some of that data for you."
		},
		{
			"timestamps": {
				"from": "00:13:54,240",
				"to": "00:13:57,560"
			},
			"offsets": {
				"from": 834240,
				"to": 837560
			},
			"text": " S-load can read a piece of data from persistent storage"
		},
		{
			"timestamps": {
				"from": "00:13:57,560",
				"to": "00:13:58,880"
			},
			"offsets": {
				"from": 837560,
				"to": 838880
			},
			"text": " on the current contract."
		},
		{
			"timestamps": {
				"from": "00:13:58,880",
				"to": "00:14:01,440"
			},
			"offsets": {
				"from": 838880,
				"to": 841440
			},
			"text": " So contracts can only read their own storage."
		},
		{
			"timestamps": {
				"from": "00:14:01,440",
				"to": "00:14:04,400"
			},
			"offsets": {
				"from": 841440,
				"to": 844400
			},
			"text": " But basically, we can read any slot using S-load."
		},
		{
			"timestamps": {
				"from": "00:14:04,400",
				"to": "00:14:10,560"
			},
			"offsets": {
				"from": 844400,
				"to": 850560
			},
			"text": " So as a quick context example, we can use the caller"
		},
		{
			"timestamps": {
				"from": "00:14:10,560",
				"to": "00:14:14,440"
			},
			"offsets": {
				"from": 850560,
				"to": 854440
			},
			"text": " instruction, and it'll push that message sender to the stack."
		},
		{
			"timestamps": {
				"from": "00:14:14,440",
				"to": "00:14:17,120"
			},
			"offsets": {
				"from": 854440,
				"to": 857120
			},
			"text": " We can, for example, let's say we want"
		},
		{
			"timestamps": {
				"from": "00:14:17,120",
				"to": "00:14:20,840"
			},
			"offsets": {
				"from": 857120,
				"to": 860840
			},
			"text": " to see if the caller is an owner of a contract."
		},
		{
			"timestamps": {
				"from": "00:14:20,840",
				"to": "00:14:24,960"
			},
			"offsets": {
				"from": 860840,
				"to": 864960
			},
			"text": " And let's say the owner is stored at slot 0 in storage."
		},
		{
			"timestamps": {
				"from": "00:14:24,960",
				"to": "00:14:29,680"
			},
			"offsets": {
				"from": 864960,
				"to": 869680
			},
			"text": " What we can do then is we can use push 0 and then S-load."
		},
		{
			"timestamps": {
				"from": "00:14:29,680",
				"to": "00:14:32,320"
			},
			"offsets": {
				"from": 869680,
				"to": 872320
			},
			"text": " And that's going to load from the first slot, whatever data"
		},
		{
			"timestamps": {
				"from": "00:14:32,320",
				"to": "00:14:33,120"
			},
			"offsets": {
				"from": 872320,
				"to": 873120
			},
			"text": " is there in this case."
		},
		{
			"timestamps": {
				"from": "00:14:33,120",
				"to": "00:14:33,960"
			},
			"offsets": {
				"from": 873120,
				"to": 873960
			},
			"text": " It's our owner."
		},
		{
			"timestamps": {
				"from": "00:14:33,960",
				"to": "00:14:36,880"
			},
			"offsets": {
				"from": 873960,
				"to": 876880
			},
			"text": " And then we can compare them by using equal."
		},
		{
			"timestamps": {
				"from": "00:14:36,880",
				"to": "00:14:38,640"
			},
			"offsets": {
				"from": 876880,
				"to": 878640
			},
			"text": " So this is like the simplest representation"
		},
		{
			"timestamps": {
				"from": "00:14:38,640",
				"to": "00:14:41,160"
			},
			"offsets": {
				"from": 878640,
				"to": 881160
			},
			"text": " of how to check if a contract is owned by somebody."
		},
		{
			"timestamps": {
				"from": "00:14:44,280",
				"to": "00:14:48,280"
			},
			"offsets": {
				"from": 884280,
				"to": 888280
			},
			"text": " Next, we have the context instructions that can write."
		},
		{
			"timestamps": {
				"from": "00:14:48,280",
				"to": "00:14:50,800"
			},
			"offsets": {
				"from": 888280,
				"to": 890800
			},
			"text": " And again, non-comprehensive, lots of stuff going on here."
		},
		{
			"timestamps": {
				"from": "00:14:50,800",
				"to": "00:14:53,080"
			},
			"offsets": {
				"from": 890800,
				"to": 893080
			},
			"text": " But some of the really important ones, S-store,"
		},
		{
			"timestamps": {
				"from": "00:14:53,080",
				"to": "00:14:55,800"
			},
			"offsets": {
				"from": 893080,
				"to": 895800
			},
			"text": " can store data to persistent storage."
		},
		{
			"timestamps": {
				"from": "00:14:55,800",
				"to": "00:14:59,080"
			},
			"offsets": {
				"from": 895800,
				"to": 899080
			},
			"text": " Log in can append data to the current transactions logs,"
		},
		{
			"timestamps": {
				"from": "00:14:59,080",
				"to": "00:15:04,360"
			},
			"offsets": {
				"from": 899080,
				"to": 904360
			},
			"text": " wherein is the number of special indexed values in the log."
		},
		{
			"timestamps": {
				"from": "00:15:04,360",
				"to": "00:15:06,680"
			},
			"offsets": {
				"from": 904360,
				"to": 906680
			},
			"text": " So again, if you've written solidity, you see the events."
		},
		{
			"timestamps": {
				"from": "00:15:06,680",
				"to": "00:15:08,960"
			},
			"offsets": {
				"from": 906680,
				"to": 908960
			},
			"text": " You see sometimes that keyword indexed."
		},
		{
			"timestamps": {
				"from": "00:15:08,960",
				"to": "00:15:14,160"
			},
			"offsets": {
				"from": 908960,
				"to": 914160
			},
			"text": " All of these are actual indexed topics within this event."
		},
		{
			"timestamps": {
				"from": "00:15:14,160",
				"to": "00:15:17,160"
			},
			"offsets": {
				"from": 914160,
				"to": 917160
			},
			"text": " Now, something to note here is, in solidity,"
		},
		{
			"timestamps": {
				"from": "00:15:17,160",
				"to": "00:15:20,840"
			},
			"offsets": {
				"from": 917160,
				"to": 920840
			},
			"text": " you can only have three indexed arguments in an event."
		},
		{
			"timestamps": {
				"from": "00:15:20,840",
				"to": "00:15:22,920"
			},
			"offsets": {
				"from": 920840,
				"to": 922920
			},
			"text": " But you can actually have up to log 4."
		},
		{
			"timestamps": {
				"from": "00:15:22,920",
				"to": "00:15:27,000"
			},
			"offsets": {
				"from": 922920,
				"to": 927000
			},
			"text": " And the reason for this is the very first topic in any log"
		},
		{
			"timestamps": {
				"from": "00:15:27,000",
				"to": "00:15:29,720"
			},
			"offsets": {
				"from": 927000,
				"to": 929720
			},
			"text": " is actually the signature of an event."
		},
		{
			"timestamps": {
				"from": "00:15:29,720",
				"to": "00:15:32,920"
			},
			"offsets": {
				"from": 929720,
				"to": 932920
			},
			"text": " So it's basically just a shah three hash of this event"
		},
		{
			"timestamps": {
				"from": "00:15:32,920",
				"to": "00:15:35,480"
			},
			"offsets": {
				"from": 932920,
				"to": 935480
			},
			"text": " signature, which we'll get into a little bit more in a moment."
		},
		{
			"timestamps": {
				"from": "00:15:35,480",
				"to": "00:15:38,920"
			},
			"offsets": {
				"from": 935480,
				"to": 938920
			},
			"text": " And then the rest are the indexed topics that you specify."
		},
		{
			"timestamps": {
				"from": "00:15:38,920",
				"to": "00:15:40,120"
			},
			"offsets": {
				"from": 938920,
				"to": 940120
			},
			"text": " Next is going to be call."
		},
		{
			"timestamps": {
				"from": "00:15:40,120",
				"to": "00:15:43,600"
			},
			"offsets": {
				"from": 940120,
				"to": 943600
			},
			"text": " So it makes a call to an external contract or to external code."
		},
		{
			"timestamps": {
				"from": "00:15:43,600",
				"to": "00:15:46,600"
			},
			"offsets": {
				"from": 943600,
				"to": 946600
			},
			"text": " But this actually can update the global state."
		},
		{
			"timestamps": {
				"from": "00:15:46,600",
				"to": "00:15:50,040"
			},
			"offsets": {
				"from": 946600,
				"to": 950040
			},
			"text": " So there's no restrictions on solely reading or anything"
		},
		{
			"timestamps": {
				"from": "00:15:50,040",
				"to": "00:15:51,320"
			},
			"offsets": {
				"from": 950040,
				"to": 951320
			},
			"text": " like that."
		},
		{
			"timestamps": {
				"from": "00:15:51,320",
				"to": "00:15:53,200"
			},
			"offsets": {
				"from": 951320,
				"to": 953200
			},
			"text": " And then finally, I've create and create two."
		},
		{
			"timestamps": {
				"from": "00:15:53,200",
				"to": "00:15:55,360"
			},
			"offsets": {
				"from": 953200,
				"to": 955360
			},
			"text": " And so what these can do is actually deploy code"
		},
		{
			"timestamps": {
				"from": "00:15:55,360",
				"to": "00:15:57,760"
			},
			"offsets": {
				"from": 955360,
				"to": 957760
			},
			"text": " to a new address, creating a new contract."
		},
		{
			"timestamps": {
				"from": "00:15:57,760",
				"to": "00:16:03,040"
			},
			"offsets": {
				"from": 957760,
				"to": 963040
			},
			"text": " So it's just a quick example of what you can write."
		},
		{
			"timestamps": {
				"from": "00:16:03,040",
				"to": "00:16:05,480"
			},
			"offsets": {
				"from": 963040,
				"to": 965480
			},
			"text": " For example, maybe we want to store the last timestamp"
		},
		{
			"timestamps": {
				"from": "00:16:05,480",
				"to": "00:16:07,640"
			},
			"offsets": {
				"from": 965480,
				"to": 967640
			},
			"text": " that some specific thing happened."
		},
		{
			"timestamps": {
				"from": "00:16:07,640",
				"to": "00:16:10,560"
			},
			"offsets": {
				"from": 967640,
				"to": 970560
			},
			"text": " So we can use timestamp to push the block's timestamp"
		},
		{
			"timestamps": {
				"from": "00:16:10,560",
				"to": "00:16:11,560"
			},
			"offsets": {
				"from": 970560,
				"to": 971560
			},
			"text": " to the stack."
		},
		{
			"timestamps": {
				"from": "00:16:11,560",
				"to": "00:16:13,760"
			},
			"offsets": {
				"from": 971560,
				"to": 973760
			},
			"text": " We can push a 0 and an S store."
		},
		{
			"timestamps": {
				"from": "00:16:13,760",
				"to": "00:16:17,200"
			},
			"offsets": {
				"from": 973760,
				"to": 977200
			},
			"text": " And what that's going to do is store that timestamp at slot 0."
		},
		{
			"timestamps": {
				"from": "00:16:17,200",
				"to": "00:16:23,040"
			},
			"offsets": {
				"from": 977200,
				"to": 983040
			},
			"text": " So as a quick review, again, the EVM"
		},
		{
			"timestamps": {
				"from": "00:16:23,040",
				"to": "00:16:24,640"
			},
			"offsets": {
				"from": 983040,
				"to": 984640
			},
			"text": " has a fairly simple instruction set."
		},
		{
			"timestamps": {
				"from": "00:16:24,640",
				"to": "00:16:25,960"
			},
			"offsets": {
				"from": 984640,
				"to": 985960
			},
			"text": " Most of what we've gone through, this"
		},
		{
			"timestamps": {
				"from": "00:16:25,960",
				"to": "00:16:28,800"
			},
			"offsets": {
				"from": 985960,
				"to": 988800
			},
			"text": " is the bulk of what's actually going on under the hood."
		},
		{
			"timestamps": {
				"from": "00:16:28,800",
				"to": "00:16:31,040"
			},
			"offsets": {
				"from": 988800,
				"to": 991040
			},
			"text": " Of course, this section didn't cover every instruction,"
		},
		{
			"timestamps": {
				"from": "00:16:31,040",
				"to": "00:16:33,280"
			},
			"offsets": {
				"from": 991040,
				"to": 993280
			},
			"text": " but it serves as a foundational understanding"
		},
		{
			"timestamps": {
				"from": "00:16:33,280",
				"to": "00:16:35,600"
			},
			"offsets": {
				"from": 993280,
				"to": 995600
			},
			"text": " for Yule in the following sections."
		},
		{
			"timestamps": {
				"from": "00:16:35,600",
				"to": "00:16:39,640"
			},
			"offsets": {
				"from": 995600,
				"to": 999640
			},
			"text": " And so to the left, there's a simple contract"
		},
		{
			"timestamps": {
				"from": "00:16:39,640",
				"to": "00:16:42,520"
			},
			"offsets": {
				"from": 999640,
				"to": 1002520
			},
			"text": " that will store the caller's address and persistent storage"
		},
		{
			"timestamps": {
				"from": "00:16:42,520",
				"to": "00:16:46,440"
			},
			"offsets": {
				"from": 1002520,
				"to": 1006440
			},
			"text": " and then return true to indicate success."
		},
		{
			"timestamps": {
				"from": "00:16:46,440",
				"to": "00:16:49,360"
			},
			"offsets": {
				"from": 1006440,
				"to": 1009360
			},
			"text": " So stepping through this, we have the caller."
		},
		{
			"timestamps": {
				"from": "00:16:49,360",
				"to": "00:16:50,920"
			},
			"offsets": {
				"from": 1009360,
				"to": 1010920
			},
			"text": " We're pushing slot 0."
		},
		{
			"timestamps": {
				"from": "00:16:50,920",
				"to": "00:16:52,120"
			},
			"offsets": {
				"from": 1010920,
				"to": 1012120
			},
			"text": " We're calling S store."
		},
		{
			"timestamps": {
				"from": "00:16:52,120",
				"to": "00:16:56,640"
			},
			"offsets": {
				"from": 1012120,
				"to": 1016640
			},
			"text": " So that's going to store the caller address and storage."
		},
		{
			"timestamps": {
				"from": "00:16:56,640",
				"to": "00:17:00,680"
			},
			"offsets": {
				"from": 1016640,
				"to": 1020680
			},
			"text": " Next, we want to store true or one in memory."
		},
		{
			"timestamps": {
				"from": "00:17:00,680",
				"to": "00:17:02,440"
			},
			"offsets": {
				"from": 1020680,
				"to": 1022440
			},
			"text": " And we can store that in the very first slot."
		},
		{
			"timestamps": {
				"from": "00:17:02,440",
				"to": "00:17:04,360"
			},
			"offsets": {
				"from": 1022440,
				"to": 1024360
			},
			"text": " So we'll push 1, which is true."
		},
		{
			"timestamps": {
				"from": "00:17:04,360",
				"to": "00:17:06,400"
			},
			"offsets": {
				"from": 1024360,
				"to": 1026400
			},
			"text": " We'll push 0, which is a slot in memory."
		},
		{
			"timestamps": {
				"from": "00:17:06,400",
				"to": "00:17:09,400"
			},
			"offsets": {
				"from": 1026400,
				"to": 1029400
			},
			"text": " We'll call M store, which puts that in the memory."
		},
		{
			"timestamps": {
				"from": "00:17:09,400",
				"to": "00:17:12,160"
			},
			"offsets": {
				"from": 1029400,
				"to": 1032160
			},
			"text": " And then to return, we actually have to give it two arguments."
		},
		{
			"timestamps": {
				"from": "00:17:12,160",
				"to": "00:17:15,840"
			},
			"offsets": {
				"from": 1032160,
				"to": 1035840
			},
			"text": " One is the offset in memory, where we want to return data from."
		},
		{
			"timestamps": {
				"from": "00:17:15,840",
				"to": "00:17:19,440"
			},
			"offsets": {
				"from": 1035840,
				"to": 1039440
			},
			"text": " And then the second is the word size, or the memory size"
		},
		{
			"timestamps": {
				"from": "00:17:19,440",
				"to": "00:17:20,320"
			},
			"offsets": {
				"from": 1039440,
				"to": 1040320
			},
			"text": " that we want to return."
		},
		{
			"timestamps": {
				"from": "00:17:20,320",
				"to": "00:17:21,560"
			},
			"offsets": {
				"from": 1040320,
				"to": 1041560
			},
			"text": " In this case, it's actually just going"
		},
		{
			"timestamps": {
				"from": "00:17:21,560",
				"to": "00:17:23,000"
			},
			"offsets": {
				"from": 1041560,
				"to": 1043000
			},
			"text": " to be a single 32-byte word."
		},
		{
			"timestamps": {
				"from": "00:17:23,000",
				"to": "00:17:26,160"
			},
			"offsets": {
				"from": 1043000,
				"to": 1046160
			},
			"text": " So we'll push 0x20, push 0, and then return."
		},
		{
			"timestamps": {
				"from": "00:17:26,160",
				"to": "00:17:31,200"
			},
			"offsets": {
				"from": 1046160,
				"to": 1051200
			},
			"text": " So any questions so far on the instruction set?"
		},
		{
			"timestamps": {
				"from": "00:17:31,200",
				"to": "00:17:33,720"
			},
			"offsets": {
				"from": 1051200,
				"to": 1053720
			},
			"text": " Thank you."
		},
		{
			"timestamps": {
				"from": "00:17:33,720",
				"to": "00:17:36,000"
			},
			"offsets": {
				"from": 1053720,
				"to": 1056000
			},
			"text": " I know that I know that you will only"
		},
		{
			"timestamps": {
				"from": "00:17:36,000",
				"to": "00:17:39,800"
			},
			"offsets": {
				"from": 1056000,
				"to": 1059800
			},
			"text": " have a set of words, both with the code."
		},
		{
			"timestamps": {
				"from": "00:17:39,800",
				"to": "00:17:40,800"
			},
			"offsets": {
				"from": 1059800,
				"to": 1060800
			},
			"text": " Thank you."
		},
		{
			"timestamps": {
				"from": "00:17:40,800",
				"to": "00:17:41,800"
			},
			"offsets": {
				"from": 1060800,
				"to": 1061800
			},
			"text": " OK."
		},
		{
			"timestamps": {
				"from": "00:17:41,800",
				"to": "00:17:42,800"
			},
			"offsets": {
				"from": 1061800,
				"to": 1062800
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "00:17:42,800",
				"to": "00:17:43,800"
			},
			"offsets": {
				"from": 1062800,
				"to": 1063800
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:17:43,800",
				"to": "00:17:44,800"
			},
			"offsets": {
				"from": 1063800,
				"to": 1064800
			},
			"text": " Right here?"
		},
		{
			"timestamps": {
				"from": "00:17:44,800",
				"to": "00:17:45,300"
			},
			"offsets": {
				"from": 1064800,
				"to": 1065300
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:17:45,300",
				"to": "00:17:45,800"
			},
			"offsets": {
				"from": 1065300,
				"to": 1065800
			},
			"text": " Thank you."
		},
		{
			"timestamps": {
				"from": "00:17:45,800",
				"to": "00:17:46,800"
			},
			"offsets": {
				"from": 1065800,
				"to": 1066800
			},
			"text": " All good."
		},
		{
			"timestamps": {
				"from": "00:17:46,800",
				"to": "00:17:47,800"
			},
			"offsets": {
				"from": 1066800,
				"to": 1067800
			},
			"text": " Good."
		},
		{
			"timestamps": {
				"from": "00:17:47,800",
				"to": "00:17:48,800"
			},
			"offsets": {
				"from": 1067800,
				"to": 1068800
			},
			"text": " Good."
		},
		{
			"timestamps": {
				"from": "00:17:48,800",
				"to": "00:17:49,800"
			},
			"offsets": {
				"from": 1068800,
				"to": 1069800
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:17:49,800",
				"to": "00:17:53,400"
			},
			"offsets": {
				"from": 1069800,
				"to": 1073400
			},
			"text": " So these are the representations of the instructions here."
		},
		{
			"timestamps": {
				"from": "00:17:53,400",
				"to": "00:17:57,000"
			},
			"offsets": {
				"from": 1073400,
				"to": 1077000
			},
			"text": " So here we have like push 1, push 1, and store, et cetera."
		},
		{
			"timestamps": {
				"from": "00:17:57,000",
				"to": "00:17:59,400"
			},
			"offsets": {
				"from": 1077000,
				"to": 1079400
			},
			"text": " Whenever we run this, we can actually step through--"
		},
		{
			"timestamps": {
				"from": "00:17:59,400",
				"to": "00:18:03,200"
			},
			"offsets": {
				"from": 1079400,
				"to": 1083200
			},
			"text": " we can step through the instructions."
		},
		{
			"timestamps": {
				"from": "00:18:03,200",
				"to": "00:18:07,600"
			},
			"offsets": {
				"from": 1083200,
				"to": 1087600
			},
			"text": " And this is just a representation here."
		},
		{
			"timestamps": {
				"from": "00:18:07,600",
				"to": "00:18:08,600"
			},
			"offsets": {
				"from": 1087600,
				"to": 1088600
			},
			"text": " So we can--"
		},
		{
			"timestamps": {
				"from": "00:18:08,600",
				"to": "00:18:11,600"
			},
			"offsets": {
				"from": 1088600,
				"to": 1091600
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:18:11,600",
				"to": "00:18:12,600"
			},
			"offsets": {
				"from": 1091600,
				"to": 1092600
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:18:12,600",
				"to": "00:18:14,000"
			},
			"offsets": {
				"from": 1092600,
				"to": 1094000
			},
			"text": " So memory is here."
		},
		{
			"timestamps": {
				"from": "00:18:14,000",
				"to": "00:18:16,520"
			},
			"offsets": {
				"from": 1094000,
				"to": 1096520
			},
			"text": " Anything that's written-- the memory goes into here."
		},
		{
			"timestamps": {
				"from": "00:18:16,520",
				"to": "00:18:19,000"
			},
			"offsets": {
				"from": 1096520,
				"to": 1099000
			},
			"text": " Anything on the stack is going to be here."
		},
		{
			"timestamps": {
				"from": "00:18:19,000",
				"to": "00:18:21,600"
			},
			"offsets": {
				"from": 1099000,
				"to": 1101600
			},
			"text": " And then persistent storage, if any, is going to be down there."
		},
		{
			"timestamps": {
				"from": "00:18:21,600",
				"to": "00:18:23,000"
			},
			"offsets": {
				"from": 1101600,
				"to": 1103000
			},
			"text": " And then return value, if any."
		},
		{
			"timestamps": {
				"from": "00:18:23,000",
				"to": "00:18:24,000"
			},
			"offsets": {
				"from": 1103000,
				"to": 1104000
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:18:24,000",
				"to": "00:18:25,000"
			},
			"offsets": {
				"from": 1104000,
				"to": 1105000
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:18:25,000",
				"to": "00:18:26,000"
			},
			"offsets": {
				"from": 1105000,
				"to": 1106000
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:18:26,000",
				"to": "00:18:28,000"
			},
			"offsets": {
				"from": 1106000,
				"to": 1108000
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:18:28,000",
				"to": "00:18:30,000"
			},
			"offsets": {
				"from": 1108000,
				"to": 1110000
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:18:30,000",
				"to": "00:18:34,200"
			},
			"offsets": {
				"from": 1110000,
				"to": 1114200
			},
			"text": " The stack can be 1,024 items."
		},
		{
			"timestamps": {
				"from": "00:18:34,200",
				"to": "00:18:36,640"
			},
			"offsets": {
				"from": 1114200,
				"to": 1116640
			},
			"text": " Now you'll notice in Solidity, you'll get the stack too"
		},
		{
			"timestamps": {
				"from": "00:18:36,640",
				"to": "00:18:37,400"
			},
			"offsets": {
				"from": 1116640,
				"to": 1117400
			},
			"text": " deep error."
		},
		{
			"timestamps": {
				"from": "00:18:37,400",
				"to": "00:18:40,600"
			},
			"offsets": {
				"from": 1117400,
				"to": 1120600
			},
			"text": " And actually, the reason for this is you can only swap and"
		},
		{
			"timestamps": {
				"from": "00:18:40,600",
				"to": "00:18:43,400"
			},
			"offsets": {
				"from": 1120600,
				"to": 1123400
			},
			"text": " duplicate items 16 deep."
		},
		{
			"timestamps": {
				"from": "00:18:43,400",
				"to": "00:18:43,900"
			},
			"offsets": {
				"from": 1123400,
				"to": 1123900
			},
			"text": " Right?"
		},
		{
			"timestamps": {
				"from": "00:18:43,900",
				"to": "00:18:46,000"
			},
			"offsets": {
				"from": 1123900,
				"to": 1126000
			},
			"text": " So there's like a limit to how many local variables you can"
		},
		{
			"timestamps": {
				"from": "00:18:46,000",
				"to": "00:18:47,600"
			},
			"offsets": {
				"from": 1126000,
				"to": 1127600
			},
			"text": " have because Solidity actually stores these"
		},
		{
			"timestamps": {
				"from": "00:18:47,600",
				"to": "00:18:49,200"
			},
			"offsets": {
				"from": 1127600,
				"to": 1129200
			},
			"text": " variables on the stack."
		},
		{
			"timestamps": {
				"from": "00:18:49,200",
				"to": "00:18:51,800"
			},
			"offsets": {
				"from": 1129200,
				"to": 1131800
			},
			"text": " So once it gets beyond that, Solidity doesn't have an easy"
		},
		{
			"timestamps": {
				"from": "00:18:51,800",
				"to": "00:18:53,800"
			},
			"offsets": {
				"from": 1131800,
				"to": 1133800
			},
			"text": " way to access that without losing information."
		},
		{
			"timestamps": {
				"from": "00:18:53,800",
				"to": "00:18:57,000"
			},
			"offsets": {
				"from": 1133800,
				"to": 1137000
			},
			"text": " So that's why you see that a lot."
		},
		{
			"timestamps": {
				"from": "00:18:57,000",
				"to": "00:18:59,600"
			},
			"offsets": {
				"from": 1137000,
				"to": 1139600
			},
			"text": " But yeah, it actually can technically go way, way, way"
		},
		{
			"timestamps": {
				"from": "00:18:59,600",
				"to": "00:19:00,100"
			},
			"offsets": {
				"from": 1139600,
				"to": 1140100
			},
			"text": " deeper."
		},
		{
			"timestamps": {
				"from": "00:19:00,100",
				"to": "00:19:03,600"
			},
			"offsets": {
				"from": 1140100,
				"to": 1143600
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:19:03,600",
				"to": "00:19:05,600"
			},
			"offsets": {
				"from": 1143600,
				"to": 1145600
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:19:05,600",
				"to": "00:19:07,600"
			},
			"offsets": {
				"from": 1145600,
				"to": 1147600
			},
			"text": " You know what, we'll just go ahead and answer some of these"
		},
		{
			"timestamps": {
				"from": "00:19:07,600",
				"to": "00:19:09,600"
			},
			"offsets": {
				"from": 1147600,
				"to": 1149600
			},
			"text": " quick questions right now while they're getting a step back"
		},
		{
			"timestamps": {
				"from": "00:19:09,600",
				"to": "00:19:09,600"
			},
			"offsets": {
				"from": 1149600,
				"to": 1149600
			},
			"text": " up."
		},
		{
			"timestamps": {
				"from": "00:19:09,600",
				"to": "00:19:13,200"
			},
			"offsets": {
				"from": 1149600,
				"to": 1153200
			},
			"text": " So you mentioned like return data, right?"
		},
		{
			"timestamps": {
				"from": "00:19:13,200",
				"to": "00:19:16,100"
			},
			"offsets": {
				"from": 1153200,
				"to": 1156100
			},
			"text": " OK, so there are actually special instructions to handle"
		},
		{
			"timestamps": {
				"from": "00:19:16,100",
				"to": "00:19:16,800"
			},
			"offsets": {
				"from": 1156100,
				"to": 1156800
			},
			"text": " return data."
		},
		{
			"timestamps": {
				"from": "00:19:16,800",
				"to": "00:19:20,600"
			},
			"offsets": {
				"from": 1156800,
				"to": 1160600
			},
			"text": " You have return data size and return data copy."
		},
		{
			"timestamps": {
				"from": "00:19:20,600",
				"to": "00:19:24,200"
			},
			"offsets": {
				"from": 1160600,
				"to": 1164200
			},
			"text": " And so what you can do is whenever you actually make a call,"
		},
		{
			"timestamps": {
				"from": "00:19:24,200",
				"to": "00:19:25,700"
			},
			"offsets": {
				"from": 1164200,
				"to": 1165700
			},
			"text": " you're not actually getting all that stuff back."
		},
		{
			"timestamps": {
				"from": "00:19:25,700",
				"to": "00:19:28,600"
			},
			"offsets": {
				"from": 1165700,
				"to": 1168600
			},
			"text": " Solidity kind of does a little bit of magic for you there."
		},
		{
			"timestamps": {
				"from": "00:19:28,600",
				"to": "00:19:31,100"
			},
			"offsets": {
				"from": 1168600,
				"to": 1171100
			},
			"text": " But basically what you can do is use the return data size"
		},
		{
			"timestamps": {
				"from": "00:19:31,100",
				"to": "00:19:31,800"
			},
			"offsets": {
				"from": 1171100,
				"to": 1171800
			},
			"text": " instruction."
		},
		{
			"timestamps": {
				"from": "00:19:31,800",
				"to": "00:19:34,300"
			},
			"offsets": {
				"from": 1171800,
				"to": 1174300
			},
			"text": " It's going to give you the size of whatever was returned."
		},
		{
			"timestamps": {
				"from": "00:19:34,300",
				"to": "00:19:36,400"
			},
			"offsets": {
				"from": 1174300,
				"to": 1176400
			},
			"text": " And then you can use that to copy in the memory."
		},
		{
			"timestamps": {
				"from": "00:19:36,400",
				"to": "00:19:37,400"
			},
			"offsets": {
				"from": 1176400,
				"to": 1177400
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:19:37,400",
				"to": "00:19:44,800"
			},
			"offsets": {
				"from": 1177400,
				"to": 1184800
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:19:44,800",
				"to": "00:19:47,900"
			},
			"offsets": {
				"from": 1184800,
				"to": 1187900
			},
			"text": " Yeah, so it's not stored in memory per se."
		},
		{
			"timestamps": {
				"from": "00:19:47,900",
				"to": "00:19:49,600"
			},
			"offsets": {
				"from": 1187900,
				"to": 1189600
			},
			"text": " Like it's only stored in memory whenever you explicitly"
		},
		{
			"timestamps": {
				"from": "00:19:49,600",
				"to": "00:19:50,100"
			},
			"offsets": {
				"from": 1189600,
				"to": 1190100
			},
			"text": " do it."
		},
		{
			"timestamps": {
				"from": "00:19:50,100",
				"to": "00:19:50,600"
			},
			"offsets": {
				"from": 1190100,
				"to": 1190600
			},
			"text": " But yeah."
		},
		{
			"timestamps": {
				"from": "00:19:50,600",
				"to": "00:19:55,600"
			},
			"offsets": {
				"from": 1190600,
				"to": 1195600
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:19:55,600",
				"to": "00:19:56,600"
			},
			"offsets": {
				"from": 1195600,
				"to": 1196600
			},
			"text": " Of log 0."
		},
		{
			"timestamps": {
				"from": "00:19:56,600",
				"to": "00:19:59,900"
			},
			"offsets": {
				"from": 1196600,
				"to": 1199900
			},
			"text": " Oh, I guess we have to spec now."
		},
		{
			"timestamps": {
				"from": "00:19:59,900",
				"to": "00:20:06,400"
			},
			"offsets": {
				"from": 1199900,
				"to": 1206400
			},
			"text": " Yeah, actually I don't want to get too, too far ahead of myself"
		},
		{
			"timestamps": {
				"from": "00:20:06,400",
				"to": "00:20:08,100"
			},
			"offsets": {
				"from": 1206400,
				"to": 1208100
			},
			"text": " because we are going to do some more logging stuff."
		},
		{
			"timestamps": {
				"from": "00:20:08,100",
				"to": "00:20:09,800"
			},
			"offsets": {
				"from": 1208100,
				"to": 1209800
			},
			"text": " But I will go ahead and let you know."
		},
		{
			"timestamps": {
				"from": "00:20:09,800",
				"to": "00:20:12,600"
			},
			"offsets": {
				"from": 1209800,
				"to": 1212600
			},
			"text": " So basically every log instruction,"
		},
		{
			"timestamps": {
				"from": "00:20:12,600",
				"to": "00:20:15,300"
			},
			"offsets": {
				"from": 1212600,
				"to": 1215300
			},
			"text": " it takes up to the number of topics which are on the stack."
		},
		{
			"timestamps": {
				"from": "00:20:15,300",
				"to": "00:20:19,200"
			},
			"offsets": {
				"from": 1215300,
				"to": 1219200
			},
			"text": " And then it actually also takes a memory pointer and size."
		},
		{
			"timestamps": {
				"from": "00:20:19,200",
				"to": "00:20:21,500"
			},
			"offsets": {
				"from": 1219200,
				"to": 1221500
			},
			"text": " So even if we don't log any topics per se,"
		},
		{
			"timestamps": {
				"from": "00:20:21,500",
				"to": "00:20:23,800"
			},
			"offsets": {
				"from": 1221500,
				"to": 1223800
			},
			"text": " we can actually just log like a big chunk of memory."
		},
		{
			"timestamps": {
				"from": "00:20:23,800",
				"to": "00:20:26,200"
			},
			"offsets": {
				"from": 1223800,
				"to": 1226200
			},
			"text": " And so that's one way that we can push data"
		},
		{
			"timestamps": {
				"from": "00:20:26,200",
				"to": "00:20:27,900"
			},
			"offsets": {
				"from": 1226200,
				"to": 1227900
			},
			"text": " to that as an anonymous event."
		},
		{
			"timestamps": {
				"from": "00:20:27,900",
				"to": "00:20:38,700"
			},
			"offsets": {
				"from": 1227900,
				"to": 1238700
			},
			"text": " It should be within the event logs."
		},
		{
			"timestamps": {
				"from": "00:20:38,700",
				"to": "00:20:41,300"
			},
			"offsets": {
				"from": 1238700,
				"to": 1241300
			},
			"text": " I'm not exactly sure how the client libraries to code"
		},
		{
			"timestamps": {
				"from": "00:20:41,300",
				"to": "00:20:42,200"
			},
			"offsets": {
				"from": 1241300,
				"to": 1242200
			},
			"text": " anonymous events."
		},
		{
			"timestamps": {
				"from": "00:20:42,200",
				"to": "00:20:44,700"
			},
			"offsets": {
				"from": 1242200,
				"to": 1244700
			},
			"text": " Obviously it's a little unusual to see those nowadays."
		},
		{
			"timestamps": {
				"from": "00:20:44,700",
				"to": "00:20:46,800"
			},
			"offsets": {
				"from": 1244700,
				"to": 1246800
			},
			"text": " But yeah, we can-- if we have time at the end,"
		},
		{
			"timestamps": {
				"from": "00:20:46,800",
				"to": "00:20:50,600"
			},
			"offsets": {
				"from": 1246800,
				"to": 1250600
			},
			"text": " we can actually probably just break up in a remix,"
		},
		{
			"timestamps": {
				"from": "00:20:50,600",
				"to": "00:20:51,300"
			},
			"offsets": {
				"from": 1250600,
				"to": 1251300
			},
			"text": " see how it works."
		},
		{
			"timestamps": {
				"from": "00:20:51,300",
				"to": "00:20:54,900"
			},
			"offsets": {
				"from": 1251300,
				"to": 1254900
			},
			"text": " Are we good?"
		},
		{
			"timestamps": {
				"from": "00:20:54,900",
				"to": "00:21:01,900"
			},
			"offsets": {
				"from": 1254900,
				"to": 1261900
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:21:01,900",
				"to": "00:21:04,400"
			},
			"offsets": {
				"from": 1261900,
				"to": 1264400
			},
			"text": " I mentioned there were two of those or--"
		},
		{
			"timestamps": {
				"from": "00:21:04,400",
				"to": "00:21:08,400"
			},
			"offsets": {
				"from": 1264400,
				"to": 1268400
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:21:08,400",
				"to": "00:21:10,800"
			},
			"offsets": {
				"from": 1268400,
				"to": 1270800
			},
			"text": " Yes, so create two."
		},
		{
			"timestamps": {
				"from": "00:21:10,800",
				"to": "00:21:13,500"
			},
			"offsets": {
				"from": 1270800,
				"to": 1273500
			},
			"text": " One, it's, I believe, a bit more gas efficient."
		},
		{
			"timestamps": {
				"from": "00:21:13,500",
				"to": "00:21:17,100"
			},
			"offsets": {
				"from": 1273500,
				"to": 1277100
			},
			"text": " And there's actually a way to deterministically deploy"
		},
		{
			"timestamps": {
				"from": "00:21:17,100",
				"to": "00:21:20,500"
			},
			"offsets": {
				"from": 1277100,
				"to": 1280500
			},
			"text": " to specific addresses from on-chain using create two."
		},
		{
			"timestamps": {
				"from": "00:21:20,500",
				"to": "00:21:22,900"
			},
			"offsets": {
				"from": 1280500,
				"to": 1282900
			},
			"text": " So it's just kind of a choosing utility of exactly"
		},
		{
			"timestamps": {
				"from": "00:21:22,900",
				"to": "00:21:23,900"
			},
			"offsets": {
				"from": 1282900,
				"to": 1283900
			},
			"text": " which one you want to do."
		},
		{
			"timestamps": {
				"from": "00:21:23,900",
				"to": "00:21:35,400"
			},
			"offsets": {
				"from": 1283900,
				"to": 1295400
			},
			"text": " I hope this wasn't being live streamed."
		},
		{
			"timestamps": {
				"from": "00:21:35,400",
				"to": "00:21:43,400"
			},
			"offsets": {
				"from": 1295400,
				"to": 1303400
			},
			"text": " Are we good?"
		},
		{
			"timestamps": {
				"from": "00:21:43,400",
				"to": "00:21:44,900"
			},
			"offsets": {
				"from": 1303400,
				"to": 1304900
			},
			"text": " [INAUDIBLE]"
		},
		{
			"timestamps": {
				"from": "00:21:44,900",
				"to": "00:21:45,900"
			},
			"offsets": {
				"from": 1304900,
				"to": 1305900
			},
			"text": " OK, cool."
		},
		{
			"timestamps": {
				"from": "00:21:45,900",
				"to": "00:21:48,600"
			},
			"offsets": {
				"from": 1305900,
				"to": 1308600
			},
			"text": " Sorry, I didn't want to go too far and then we have to go back."
		},
		{
			"timestamps": {
				"from": "00:21:51,400",
				"to": "00:21:54,200"
			},
			"offsets": {
				"from": 1311400,
				"to": 1314200
			},
			"text": " Great, so the hardest part is over."
		},
		{
			"timestamps": {
				"from": "00:21:54,200",
				"to": "00:21:56,300"
			},
			"offsets": {
				"from": 1314200,
				"to": 1316300
			},
			"text": " That was all the really in-depth stuff"
		},
		{
			"timestamps": {
				"from": "00:21:56,300",
				"to": "00:21:58,700"
			},
			"offsets": {
				"from": 1316300,
				"to": 1318700
			},
			"text": " that will kind of give you this foundational knowledge"
		},
		{
			"timestamps": {
				"from": "00:21:58,700",
				"to": "00:21:59,800"
			},
			"offsets": {
				"from": 1318700,
				"to": 1319800
			},
			"text": " for how to write \"yule.\""
		},
		{
			"timestamps": {
				"from": "00:21:59,800",
				"to": "00:22:03,600"
			},
			"offsets": {
				"from": 1319800,
				"to": 1323600
			},
			"text": " \"yule,\" thankfully, has a much higher level syntax."
		},
		{
			"timestamps": {
				"from": "00:22:03,600",
				"to": "00:22:06,800"
			},
			"offsets": {
				"from": 1323600,
				"to": 1326800
			},
			"text": " So what \"yule\" is, is it's a low level language that"
		},
		{
			"timestamps": {
				"from": "00:22:06,800",
				"to": "00:22:09,000"
			},
			"offsets": {
				"from": 1326800,
				"to": 1329000
			},
			"text": " can be written in inline solidity,"
		},
		{
			"timestamps": {
				"from": "00:22:09,000",
				"to": "00:22:10,800"
			},
			"offsets": {
				"from": 1329000,
				"to": 1330800
			},
			"text": " or is a standalone language."
		},
		{
			"timestamps": {
				"from": "00:22:10,800",
				"to": "00:22:12,800"
			},
			"offsets": {
				"from": 1330800,
				"to": 1332800
			},
			"text": " You can write \"yule files\" by themselves."
		},
		{
			"timestamps": {
				"from": "00:22:12,800",
				"to": "00:22:14,800"
			},
			"offsets": {
				"from": 1332800,
				"to": 1334800
			},
			"text": " But you can also use it as a compilation target."
		},
		{
			"timestamps": {
				"from": "00:22:14,800",
				"to": "00:22:17,100"
			},
			"offsets": {
				"from": 1334800,
				"to": 1337100
			},
			"text": " So it also acts as an intermediate language"
		},
		{
			"timestamps": {
				"from": "00:22:17,100",
				"to": "00:22:20,200"
			},
			"offsets": {
				"from": 1337100,
				"to": 1340200
			},
			"text": " that you can compile other high level languages to."
		},
		{
			"timestamps": {
				"from": "00:22:20,200",
				"to": "00:22:23,100"
			},
			"offsets": {
				"from": 1340200,
				"to": 1343100
			},
			"text": " Built into the language are most EVM instructions."
		},
		{
			"timestamps": {
				"from": "00:22:23,100",
				"to": "00:22:24,800"
			},
			"offsets": {
				"from": 1343100,
				"to": 1344800
			},
			"text": " These are callable as functions."
		},
		{
			"timestamps": {
				"from": "00:22:24,800",
				"to": "00:22:27,900"
			},
			"offsets": {
				"from": 1344800,
				"to": 1347900
			},
			"text": " There's basic control flow support and functions."
		},
		{
			"timestamps": {
				"from": "00:22:27,900",
				"to": "00:22:31,000"
			},
			"offsets": {
				"from": 1347900,
				"to": 1351000
			},
			"text": " Well, user defined functions."
		},
		{
			"timestamps": {
				"from": "00:22:31,000",
				"to": "00:22:33,000"
			},
			"offsets": {
				"from": 1351000,
				"to": 1353000
			},
			"text": " Now you'll notice whenever we start looking at \"yule code\""
		},
		{
			"timestamps": {
				"from": "00:22:33,000",
				"to": "00:22:35,800"
			},
			"offsets": {
				"from": 1353000,
				"to": 1355800
			},
			"text": " that the stack is largely abstracted away"
		},
		{
			"timestamps": {
				"from": "00:22:35,800",
				"to": "00:22:38,200"
			},
			"offsets": {
				"from": 1355800,
				"to": 1358200
			},
			"text": " with the exception of a built-in pop function."
		},
		{
			"timestamps": {
				"from": "00:22:38,200",
				"to": "00:22:40,200"
			},
			"offsets": {
				"from": 1358200,
				"to": 1360200
			},
			"text": " So if there's some value that maybe you don't need"
		},
		{
			"timestamps": {
				"from": "00:22:40,200",
				"to": "00:22:41,800"
			},
			"offsets": {
				"from": 1360200,
				"to": 1361800
			},
			"text": " that's returned from a function,"
		},
		{
			"timestamps": {
				"from": "00:22:41,800",
				"to": "00:22:43,200"
			},
			"offsets": {
				"from": 1361800,
				"to": 1363200
			},
			"text": " you can just pop that immediately."
		},
		{
			"timestamps": {
				"from": "00:22:43,200",
				"to": "00:22:49,200"
			},
			"offsets": {
				"from": 1363200,
				"to": 1369200
			},
			"text": " So here we have the syntax overview."
		},
		{
			"timestamps": {
				"from": "00:22:49,200",
				"to": "00:22:52,600"
			},
			"offsets": {
				"from": 1369200,
				"to": 1372600
			},
			"text": " Now note that the keywords object and code are actually only"
		},
		{
			"timestamps": {
				"from": "00:22:52,600",
				"to": "00:22:54,600"
			},
			"offsets": {
				"from": 1372600,
				"to": 1374600
			},
			"text": " used in standalone \"yule files.\""
		},
		{
			"timestamps": {
				"from": "00:22:54,600",
				"to": "00:22:56,200"
			},
			"offsets": {
				"from": 1374600,
				"to": 1376200
			},
			"text": " So chances are you're not going to be touching this"
		},
		{
			"timestamps": {
				"from": "00:22:56,200",
				"to": "00:22:59,600"
			},
			"offsets": {
				"from": 1376200,
				"to": 1379600
			},
			"text": " if you're just writing inline assembly."
		},
		{
			"timestamps": {
				"from": "00:22:59,600",
				"to": "00:23:02,300"
			},
			"offsets": {
				"from": 1379600,
				"to": 1382300
			},
			"text": " One other thing to note here before we start stepping through,"
		},
		{
			"timestamps": {
				"from": "00:23:02,300",
				"to": "00:23:04,000"
			},
			"offsets": {
				"from": 1382300,
				"to": 1384000
			},
			"text": " \"yule\" does have the \"if\" statement,"
		},
		{
			"timestamps": {
				"from": "00:23:04,000",
				"to": "00:23:06,300"
			},
			"offsets": {
				"from": 1384000,
				"to": 1386300
			},
			"text": " but it does not have the \"else\" statement."
		},
		{
			"timestamps": {
				"from": "00:23:06,300",
				"to": "00:23:10,800"
			},
			"offsets": {
				"from": 1386300,
				"to": 1390800
			},
			"text": " So to handle multiple cases, we can actually just use a switch."
		},
		{
			"timestamps": {
				"from": "00:23:10,800",
				"to": "00:23:13,200"
			},
			"offsets": {
				"from": 1390800,
				"to": 1393200
			},
			"text": " And then the for loop functions very similar"
		},
		{
			"timestamps": {
				"from": "00:23:13,200",
				"to": "00:23:15,000"
			},
			"offsets": {
				"from": 1393200,
				"to": 1395000
			},
			"text": " to what you see in other high level languages."
		},
		{
			"timestamps": {
				"from": "00:23:15,000",
				"to": "00:23:17,000"
			},
			"offsets": {
				"from": 1395000,
				"to": 1397000
			},
			"text": " Obviously, the syntax is a little bit more funky,"
		},
		{
			"timestamps": {
				"from": "00:23:17,000",
				"to": "00:23:19,700"
			},
			"offsets": {
				"from": 1397000,
				"to": 1399700
			},
			"text": " but it still does the same thing."
		},
		{
			"timestamps": {
				"from": "00:23:19,700",
				"to": "00:23:22,100"
			},
			"offsets": {
				"from": 1399700,
				"to": 1402100
			},
			"text": " So stepping through, starting at the top,"
		},
		{
			"timestamps": {
				"from": "00:23:22,100",
				"to": "00:23:24,300"
			},
			"offsets": {
				"from": 1402100,
				"to": 1404300
			},
			"text": " we have the assignment syntax."
		},
		{
			"timestamps": {
				"from": "00:23:24,300",
				"to": "00:23:26,400"
			},
			"offsets": {
				"from": 1404300,
				"to": 1406400
			},
			"text": " As soon as we have a colon and equal sign,"
		},
		{
			"timestamps": {
				"from": "00:23:26,400",
				"to": "00:23:29,000"
			},
			"offsets": {
				"from": 1406400,
				"to": 1409000
			},
			"text": " so anything on the right side is assigned"
		},
		{
			"timestamps": {
				"from": "00:23:29,000",
				"to": "00:23:30,800"
			},
			"offsets": {
				"from": 1409000,
				"to": 1410800
			},
			"text": " to the left side variable."
		},
		{
			"timestamps": {
				"from": "00:23:30,800",
				"to": "00:23:32,500"
			},
			"offsets": {
				"from": 1410800,
				"to": 1412500
			},
			"text": " If the variable is being newly declared,"
		},
		{
			"timestamps": {
				"from": "00:23:32,500",
				"to": "00:23:36,200"
			},
			"offsets": {
				"from": 1412500,
				"to": 1416200
			},
			"text": " if we're not reassigning, then we need to use the keyword let."
		},
		{
			"timestamps": {
				"from": "00:23:36,200",
				"to": "00:23:38,500"
			},
			"offsets": {
				"from": 1416200,
				"to": 1418500
			},
			"text": " For the function syntax, we have the keyword function,"
		},
		{
			"timestamps": {
				"from": "00:23:38,500",
				"to": "00:23:40,500"
			},
			"offsets": {
				"from": 1418500,
				"to": 1420500
			},
			"text": " the name of your function, any arguments,"
		},
		{
			"timestamps": {
				"from": "00:23:40,500",
				"to": "00:23:43,200"
			},
			"offsets": {
				"from": 1420500,
				"to": 1423200
			},
			"text": " and then return variables from that."
		},
		{
			"timestamps": {
				"from": "00:23:43,200",
				"to": "00:23:46,300"
			},
			"offsets": {
				"from": 1423200,
				"to": 1426300
			},
			"text": " And so inside this function, you can see the letter \"c\""
		},
		{
			"timestamps": {
				"from": "00:23:46,300",
				"to": "00:23:48,400"
			},
			"offsets": {
				"from": 1426300,
				"to": 1428400
			},
			"text": " is our declared as a variable implicitly"
		},
		{
			"timestamps": {
				"from": "00:23:48,400",
				"to": "00:23:50,200"
			},
			"offsets": {
				"from": 1428400,
				"to": 1430200
			},
			"text": " by saying this is a return value."
		},
		{
			"timestamps": {
				"from": "00:23:50,200",
				"to": "00:23:55,000"
			},
			"offsets": {
				"from": 1430200,
				"to": 1435000
			},
			"text": " And then colon equals will assign the sum of a and b."
		},
		{
			"timestamps": {
				"from": "00:23:55,000",
				"to": "00:23:56,600"
			},
			"offsets": {
				"from": 1435000,
				"to": 1436600
			},
			"text": " So you can see this is a lot simpler to read"
		},
		{
			"timestamps": {
				"from": "00:23:56,600",
				"to": "00:24:00,700"
			},
			"offsets": {
				"from": 1436600,
				"to": 1440700
			},
			"text": " than just pushing things and adding and things like this."
		},
		{
			"timestamps": {
				"from": "00:24:00,700",
				"to": "00:24:03,700"
			},
			"offsets": {
				"from": 1440700,
				"to": 1443700
			},
			"text": " And another thing to note about these internal functions"
		},
		{
			"timestamps": {
				"from": "00:24:03,700",
				"to": "00:24:06,000"
			},
			"offsets": {
				"from": 1443700,
				"to": 1446000
			},
			"text": " is that the return is implicit,"
		},
		{
			"timestamps": {
				"from": "00:24:06,000",
				"to": "00:24:08,900"
			},
			"offsets": {
				"from": 1446000,
				"to": 1448900
			},
			"text": " because return itself is actually an instruction"
		},
		{
			"timestamps": {
				"from": "00:24:08,900",
				"to": "00:24:10,500"
			},
			"offsets": {
				"from": 1448900,
				"to": 1450500
			},
			"text": " that returns to the caller itself."
		},
		{
			"timestamps": {
				"from": "00:24:10,500",
				"to": "00:24:11,600"
			},
			"offsets": {
				"from": 1450500,
				"to": 1451600
			},
			"text": " That's not what this is doing."
		},
		{
			"timestamps": {
				"from": "00:24:11,600",
				"to": "00:24:14,600"
			},
			"offsets": {
				"from": 1451600,
				"to": 1454600
			},
			"text": " This is actually just manipulating some items,"
		},
		{
			"timestamps": {
				"from": "00:24:14,600",
				"to": "00:24:15,900"
			},
			"offsets": {
				"from": 1454600,
				"to": 1455900
			},
			"text": " leaving an item on the stack,"
		},
		{
			"timestamps": {
				"from": "00:24:15,900",
				"to": "00:24:18,300"
			},
			"offsets": {
				"from": 1455900,
				"to": 1458300
			},
			"text": " and then jumping back from wherever this function was called."
		},
		{
			"timestamps": {
				"from": "00:24:18,300",
				"to": "00:24:23,800"
			},
			"offsets": {
				"from": 1458300,
				"to": 1463800
			},
			"text": " So here we have the if statement."
		},
		{
			"timestamps": {
				"from": "00:24:23,800",
				"to": "00:24:26,800"
			},
			"offsets": {
				"from": 1463800,
				"to": 1466800
			},
			"text": " In this case, we're checking if a is equal to zero."
		},
		{
			"timestamps": {
				"from": "00:24:26,800",
				"to": "00:24:30,600"
			},
			"offsets": {
				"from": 1466800,
				"to": 1470600
			},
			"text": " And if this is true, then we can execute some code inside of that."
		},
		{
			"timestamps": {
				"from": "00:24:30,600",
				"to": "00:24:34,000"
			},
			"offsets": {
				"from": 1470600,
				"to": 1474000
			},
			"text": " In this case, we're just doing a revert."
		},
		{
			"timestamps": {
				"from": "00:24:34,000",
				"to": "00:24:35,800"
			},
			"offsets": {
				"from": 1474000,
				"to": 1475800
			},
			"text": " Below this, we have the switch."
		},
		{
			"timestamps": {
				"from": "00:24:35,800",
				"to": "00:24:38,900"
			},
			"offsets": {
				"from": 1475800,
				"to": 1478900
			},
			"text": " So the switch, we have a value that we want to compare against."
		},
		{
			"timestamps": {
				"from": "00:24:38,900",
				"to": "00:24:41,200"
			},
			"offsets": {
				"from": 1478900,
				"to": 1481200
			},
			"text": " And then each case is going to have the value"
		},
		{
			"timestamps": {
				"from": "00:24:41,200",
				"to": "00:24:44,000"
			},
			"offsets": {
				"from": 1481200,
				"to": 1484000
			},
			"text": " that this variable could be."
		},
		{
			"timestamps": {
				"from": "00:24:44,000",
				"to": "00:24:46,900"
			},
			"offsets": {
				"from": 1484000,
				"to": 1486900
			},
			"text": " So case one means if a is equal to one,"
		},
		{
			"timestamps": {
				"from": "00:24:46,900",
				"to": "00:24:48,600"
			},
			"offsets": {
				"from": 1486900,
				"to": 1488600
			},
			"text": " and we'll handle that."
		},
		{
			"timestamps": {
				"from": "00:24:48,600",
				"to": "00:24:51,800"
			},
			"offsets": {
				"from": 1488600,
				"to": 1491800
			},
			"text": " Yeah, comments are wrong here."
		},
		{
			"timestamps": {
				"from": "00:24:51,800",
				"to": "00:24:54,000"
			},
			"offsets": {
				"from": 1491800,
				"to": 1494000
			},
			"text": " Case two is if a is equal to two,"
		},
		{
			"timestamps": {
				"from": "00:24:54,000",
				"to": "00:24:55,900"
			},
			"offsets": {
				"from": 1494000,
				"to": 1495900
			},
			"text": " and then default is our fallback, right?"
		},
		{
			"timestamps": {
				"from": "00:24:55,900",
				"to": "00:24:57,200"
			},
			"offsets": {
				"from": 1495900,
				"to": 1497200
			},
			"text": " So if nothing else matches,"
		},
		{
			"timestamps": {
				"from": "00:24:57,200",
				"to": "00:24:59,400"
			},
			"offsets": {
				"from": 1497200,
				"to": 1499400
			},
			"text": " if we need to just do some logic to handle the rest,"
		},
		{
			"timestamps": {
				"from": "00:24:59,400",
				"to": "00:25:01,100"
			},
			"offsets": {
				"from": 1499400,
				"to": 1501100
			},
			"text": " we use default."
		},
		{
			"timestamps": {
				"from": "00:25:01,100",
				"to": "00:25:02,700"
			},
			"offsets": {
				"from": 1501100,
				"to": 1502700
			},
			"text": " And then finally, we have the for loop."
		},
		{
			"timestamps": {
				"from": "00:25:02,700",
				"to": "00:25:05,200"
			},
			"offsets": {
				"from": 1502700,
				"to": 1505200
			},
			"text": " Right, so first we have let I."
		},
		{
			"timestamps": {
				"from": "00:25:05,200",
				"to": "00:25:06,600"
			},
			"offsets": {
				"from": 1505200,
				"to": 1506600
			},
			"text": " We're assigning it zero."
		},
		{
			"timestamps": {
				"from": "00:25:06,600",
				"to": "00:25:09,900"
			},
			"offsets": {
				"from": 1506600,
				"to": 1509900
			},
			"text": " So this is your I equals zero part in the middle."
		},
		{
			"timestamps": {
				"from": "00:25:09,900",
				"to": "00:25:11,000"
			},
			"offsets": {
				"from": 1509900,
				"to": 1511000
			},
			"text": " We have that comparison."
		},
		{
			"timestamps": {
				"from": "00:25:11,000",
				"to": "00:25:12,800"
			},
			"offsets": {
				"from": 1511000,
				"to": 1512800
			},
			"text": " So it's less than I and a."
		},
		{
			"timestamps": {
				"from": "00:25:12,800",
				"to": "00:25:15,000"
			},
			"offsets": {
				"from": 1512800,
				"to": 1515000
			},
			"text": " So as long as I is less than a,"
		},
		{
			"timestamps": {
				"from": "00:25:15,000",
				"to": "00:25:17,000"
			},
			"offsets": {
				"from": 1515000,
				"to": 1517000
			},
			"text": " we're going to continue iterating."
		},
		{
			"timestamps": {
				"from": "00:25:17,000",
				"to": "00:25:22,400"
			},
			"offsets": {
				"from": 1517000,
				"to": 1522400
			},
			"text": " And then next we have I being assigned basically the sum of itself and one."
		},
		{
			"timestamps": {
				"from": "00:25:22,400",
				"to": "00:25:24,400"
			},
			"offsets": {
				"from": 1522400,
				"to": 1524400
			},
			"text": " Right, so we're basically incrementing it."
		},
		{
			"timestamps": {
				"from": "00:25:24,400",
				"to": "00:25:27,000"
			},
			"offsets": {
				"from": 1524400,
				"to": 1527000
			},
			"text": " And then inside of there, we can iterate and do our looping logic."
		},
		{
			"timestamps": {
				"from": "00:25:27,000",
				"to": "00:25:32,800"
			},
			"offsets": {
				"from": 1527000,
				"to": 1532800
			},
			"text": " So as a quick comparison to mnemonic bytecode,"
		},
		{
			"timestamps": {
				"from": "00:25:32,800",
				"to": "00:25:36,800"
			},
			"offsets": {
				"from": 1532800,
				"to": 1536800
			},
			"text": " over here on the left, that was the code that we wrote a moment ago to,"
		},
		{
			"timestamps": {
				"from": "00:25:36,800",
				"to": "00:25:41,200"
			},
			"offsets": {
				"from": 1536800,
				"to": 1541200
			},
			"text": " you know, store the caller in storage, store true in memory,"
		},
		{
			"timestamps": {
				"from": "00:25:41,200",
				"to": "00:25:42,400"
			},
			"offsets": {
				"from": 1541200,
				"to": 1542400
			},
			"text": " and then return that from memory."
		},
		{
			"timestamps": {
				"from": "00:25:42,400",
				"to": "00:25:45,600"
			},
			"offsets": {
				"from": 1542400,
				"to": 1545600
			},
			"text": " And then over on the right side is how we do it in you'll so a lot less,"
		},
		{
			"timestamps": {
				"from": "00:25:45,600",
				"to": "00:25:47,000"
			},
			"offsets": {
				"from": 1545600,
				"to": 1547000
			},
			"text": " a lot less for both."
		},
		{
			"timestamps": {
				"from": "00:25:47,000",
				"to": "00:25:52,100"
			},
			"offsets": {
				"from": 1547000,
				"to": 1552100
			},
			"text": " And so now we're going to jump into you'll in solidity."
		},
		{
			"timestamps": {
				"from": "00:25:52,100",
				"to": "00:25:55,500"
			},
			"offsets": {
				"from": 1552100,
				"to": 1555500
			},
			"text": " And this is really important because not very many people write standalone"
		},
		{
			"timestamps": {
				"from": "00:25:55,500",
				"to": "00:25:57,000"
			},
			"offsets": {
				"from": 1555500,
				"to": 1557000
			},
			"text": " assembly files these days."
		},
		{
			"timestamps": {
				"from": "00:25:57,000",
				"to": "00:26:01,200"
			},
			"offsets": {
				"from": 1557000,
				"to": 1561200
			},
			"text": " Most of the time you're going to be operating within the bounds of a solidity file."
		},
		{
			"timestamps": {
				"from": "00:26:01,200",
				"to": "00:26:05,700"
			},
			"offsets": {
				"from": 1561200,
				"to": 1565700
			},
			"text": " So you need to understand what standards and abstraction salinity has created."
		},
		{
			"timestamps": {
				"from": "00:26:05,700",
				"to": "00:26:08,200"
			},
			"offsets": {
				"from": 1565700,
				"to": 1568200
			},
			"text": " So some of these include the call data layout,"
		},
		{
			"timestamps": {
				"from": "00:26:08,200",
				"to": "00:26:10,700"
			},
			"offsets": {
				"from": 1568200,
				"to": 1570700
			},
			"text": " which is a layout of that data that gets sent to your contract."
		},
		{
			"timestamps": {
				"from": "00:26:10,700",
				"to": "00:26:15,100"
			},
			"offsets": {
				"from": 1570700,
				"to": 1575100
			},
			"text": " The memory layout, the storage layout, event logging and errors."
		},
		{
			"timestamps": {
				"from": "00:26:15,100",
				"to": "00:26:22,900"
			},
			"offsets": {
				"from": 1575100,
				"to": 1582900
			},
			"text": " So call data layout per the application binary interface or ABI standard."
		},
		{
			"timestamps": {
				"from": "00:26:22,900",
				"to": "00:26:25,500"
			},
			"offsets": {
				"from": 1582900,
				"to": 1585500
			},
			"text": " The call data layout is as follows."
		},
		{
			"timestamps": {
				"from": "00:26:25,500",
				"to": "00:26:29,100"
			},
			"offsets": {
				"from": 1585500,
				"to": 1589100
			},
			"text": " So first, the first four bytes are the selector of a function."
		},
		{
			"timestamps": {
				"from": "00:26:29,100",
				"to": "00:26:32,400"
			},
			"offsets": {
				"from": 1589100,
				"to": 1592400
			},
			"text": " And basically this is the SHA3 hash of a function signature."
		},
		{
			"timestamps": {
				"from": "00:26:32,400",
				"to": "00:26:36,200"
			},
			"offsets": {
				"from": 1592400,
				"to": 1596200
			},
			"text": " And that includes the name and then any argument types within that."
		},
		{
			"timestamps": {
				"from": "00:26:37,600",
				"to": "00:26:42,500"
			},
			"offsets": {
				"from": 1597600,
				"to": 1602500
			},
			"text": " Next, after the first four bytes, each argument is padded to 32 bytes no matter"
		},
		{
			"timestamps": {
				"from": "00:26:42,500",
				"to": "00:26:45,200"
			},
			"offsets": {
				"from": 1602500,
				"to": 1605200
			},
			"text": " what, even if it's a UN8, it's always up to 32 bytes."
		},
		{
			"timestamps": {
				"from": "00:26:45,200",
				"to": "00:26:51,300"
			},
			"offsets": {
				"from": 1605200,
				"to": 1611300
			},
			"text": " If an argument is of dynamic size, then the slot where it should be is actually"
		},
		{
			"timestamps": {
				"from": "00:26:51,300",
				"to": "00:26:54,900"
			},
			"offsets": {
				"from": 1611300,
				"to": 1614900
			},
			"text": " going to hold a pointer to a place and call data where the rest of the data is."
		},
		{
			"timestamps": {
				"from": "00:26:54,900",
				"to": "00:26:57,500"
			},
			"offsets": {
				"from": 1614900,
				"to": 1617500
			},
			"text": " So if we have let's say a string that's over 32 characters,"
		},
		{
			"timestamps": {
				"from": "00:26:57,500",
				"to": "00:26:59,000"
			},
			"offsets": {
				"from": 1617500,
				"to": 1619000
			},
			"text": " it's not going to fit in a single slot."
		},
		{
			"timestamps": {
				"from": "00:26:59,000",
				"to": "00:27:02,500"
			},
			"offsets": {
				"from": 1619000,
				"to": 1622500
			},
			"text": " What we have is a pointer that says, okay, after everything else,"
		},
		{
			"timestamps": {
				"from": "00:27:02,500",
				"to": "00:27:05,900"
			},
			"offsets": {
				"from": 1622500,
				"to": 1625900
			},
			"text": " here's where the string starts and it's just going to go and there are other ways"
		},
		{
			"timestamps": {
				"from": "00:27:05,900",
				"to": "00:27:07,600"
			},
			"offsets": {
				"from": 1625900,
				"to": 1627600
			},
			"text": " to determine how long the string is."
		},
		{
			"timestamps": {
				"from": "00:27:07,600",
				"to": "00:27:13,900"
			},
			"offsets": {
				"from": 1627600,
				"to": 1633900
			},
			"text": " So as a quick visual representation, here we have the transfer function,"
		},
		{
			"timestamps": {
				"from": "00:27:13,900",
				"to": "00:27:15,900"
			},
			"offsets": {
				"from": 1633900,
				"to": 1635900
			},
			"text": " which this comes from the ERC20 standard."
		},
		{
			"timestamps": {
				"from": "00:27:15,900",
				"to": "00:27:18,100"
			},
			"offsets": {
				"from": 1635900,
				"to": 1638100
			},
			"text": " So first up, we have the signature."
		},
		{
			"timestamps": {
				"from": "00:27:18,100",
				"to": "00:27:19,200"
			},
			"offsets": {
				"from": 1638100,
				"to": 1639200
			},
			"text": " So that's transfer."
		},
		{
			"timestamps": {
				"from": "00:27:19,200",
				"to": "00:27:21,100"
			},
			"offsets": {
				"from": 1639200,
				"to": 1641100
			},
			"text": " It has address UN256."
		},
		{
			"timestamps": {
				"from": "00:27:21,100",
				"to": "00:27:26,800"
			},
			"offsets": {
				"from": 1641100,
				"to": 1646800
			},
			"text": " Now we're actually hashing here is transfer parentheses address UN256."
		},
		{
			"timestamps": {
				"from": "00:27:26,800",
				"to": "00:27:28,400"
			},
			"offsets": {
				"from": 1646800,
				"to": 1648400
			},
			"text": " That's the only part that we're hashing here."
		},
		{
			"timestamps": {
				"from": "00:27:28,400",
				"to": "00:27:31,800"
			},
			"offsets": {
				"from": 1648400,
				"to": 1651800
			},
			"text": " So we can see the hash full hash digest here."
		},
		{
			"timestamps": {
				"from": "00:27:32,200",
				"to": "00:27:37,200"
			},
			"offsets": {
				"from": 1652200,
				"to": 1657200
			},
			"text": " We're actually going to clip that to the left most four bytes and then the actual call"
		},
		{
			"timestamps": {
				"from": "00:27:37,200",
				"to": "00:27:42,900"
			},
			"offsets": {
				"from": 1657200,
				"to": 1662900
			},
			"text": " data layout of one of these is going to be those four bytes followed by an address."
		},
		{
			"timestamps": {
				"from": "00:27:42,900",
				"to": "00:27:46,100"
			},
			"offsets": {
				"from": 1662900,
				"to": 1666100
			},
			"text": " In this case, it's going to be the target to whom we're sending the ERC20."
		},
		{
			"timestamps": {
				"from": "00:27:46,100",
				"to": "00:27:49,500"
			},
			"offsets": {
				"from": 1666100,
				"to": 1669500
			},
			"text": " And then the next is going to be the value, right?"
		},
		{
			"timestamps": {
				"from": "00:27:49,500",
				"to": "00:27:52,800"
			},
			"offsets": {
				"from": 1669500,
				"to": 1672800
			},
			"text": " So even though these, you know, like an address is not a full 32 bytes,"
		},
		{
			"timestamps": {
				"from": "00:27:52,800",
				"to": "00:27:54,200"
			},
			"offsets": {
				"from": 1672800,
				"to": 1674200
			},
			"text": " we're still padding it all the way."
		},
		{
			"timestamps": {
				"from": "00:27:54,200",
				"to": "00:27:58,600"
			},
			"offsets": {
				"from": 1674200,
				"to": 1678600
			},
			"text": " Next is going to be the memory layout."
		},
		{
			"timestamps": {
				"from": "00:27:58,600",
				"to": "00:28:01,200"
			},
			"offsets": {
				"from": 1678600,
				"to": 1681200
			},
			"text": " Now this one is really, really important because per the solidity"
		},
		{
			"timestamps": {
				"from": "00:28:01,200",
				"to": "00:28:05,100"
			},
			"offsets": {
				"from": 1681200,
				"to": 1685100
			},
			"text": " documentation, the first four slots of memory are reserved."
		},
		{
			"timestamps": {
				"from": "00:28:05,100",
				"to": "00:28:07,300"
			},
			"offsets": {
				"from": 1685100,
				"to": 1687300
			},
			"text": " Now slot zero and slot."
		},
		{
			"timestamps": {
				"from": "00:28:07,300",
				"to": "00:28:09,400"
			},
			"offsets": {
				"from": 1687300,
				"to": 1689400
			},
			"text": " Oh, X 20 or slot 32."
		},
		{
			"timestamps": {
				"from": "00:28:09,400",
				"to": "00:28:10,800"
			},
			"offsets": {
				"from": 1689400,
				"to": 1690800
			},
			"text": " These are actually scratch space."
		},
		{
			"timestamps": {
				"from": "00:28:10,800",
				"to": "00:28:13,800"
			},
			"offsets": {
				"from": 1690800,
				"to": 1693800
			},
			"text": " So you can use these, you know, whenever you're doing things in inline assembly."
		},
		{
			"timestamps": {
				"from": "00:28:13,800",
				"to": "00:28:17,400"
			},
			"offsets": {
				"from": 1693800,
				"to": 1697400
			},
			"text": " The OX 40 though is the free memory pointer."
		},
		{
			"timestamps": {
				"from": "00:28:17,400",
				"to": "00:28:20,000"
			},
			"offsets": {
				"from": 1697400,
				"to": 1700000
			},
			"text": " So basically what this does is as memory is expanding,"
		},
		{
			"timestamps": {
				"from": "00:28:20,000",
				"to": "00:28:25,000"
			},
			"offsets": {
				"from": 1700000,
				"to": 1705000
			},
			"text": " solidity will actually track how big memory is and when you can start adding new things"
		},
		{
			"timestamps": {
				"from": "00:28:25,000",
				"to": "00:28:25,600"
			},
			"offsets": {
				"from": 1705000,
				"to": 1705600
			},
			"text": " to memory."
		},
		{
			"timestamps": {
				"from": "00:28:25,600",
				"to": "00:28:29,500"
			},
			"offsets": {
				"from": 1705600,
				"to": 1709500
			},
			"text": " And so what we'll actually do in some of this in some of this you'll code is we'll actually"
		},
		{
			"timestamps": {
				"from": "00:28:29,500",
				"to": "00:28:32,400"
			},
			"offsets": {
				"from": 1709500,
				"to": 1712400
			},
			"text": " load from that to figure out where we can start storing things in memory."
		},
		{
			"timestamps": {
				"from": "00:28:32,400",
				"to": "00:28:36,900"
			},
			"offsets": {
				"from": 1712400,
				"to": 1716900
			},
			"text": " So it's really important if this does get overwritten, you have to make sure that you have"
		},
		{
			"timestamps": {
				"from": "00:28:36,900",
				"to": "00:28:38,600"
			},
			"offsets": {
				"from": 1716900,
				"to": 1718600
			},
			"text": " that variable on hand, right?"
		},
		{
			"timestamps": {
				"from": "00:28:38,600",
				"to": "00:28:41,400"
			},
			"offsets": {
				"from": 1718600,
				"to": 1721400
			},
			"text": " So you can increment it if you store more things in memory, et cetera, et cetera."
		},
		{
			"timestamps": {
				"from": "00:28:41,400",
				"to": "00:28:44,200"
			},
			"offsets": {
				"from": 1721400,
				"to": 1724200
			},
			"text": " And then OX 60 is a zero slot."
		},
		{
			"timestamps": {
				"from": "00:28:44,200",
				"to": "00:28:51,100"
			},
			"offsets": {
				"from": 1724200,
				"to": 1731100
			},
			"text": " So the zero slot is reserved specifically for whenever you're allocating new arrays,"
		},
		{
			"timestamps": {
				"from": "00:28:51,100",
				"to": "00:28:51,600"
			},
			"offsets": {
				"from": 1731100,
				"to": 1731600
			},
			"text": " I believe."
		},
		{
			"timestamps": {
				"from": "00:28:51,600",
				"to": "00:28:55,200"
			},
			"offsets": {
				"from": 1731600,
				"to": 1735200
			},
			"text": " This is like basically a big, big no-no zone."
		},
		{
			"timestamps": {
				"from": "00:28:55,200",
				"to": "00:28:59,400"
			},
			"offsets": {
				"from": 1735200,
				"to": 1739400
			},
			"text": " Anytime people start overriding this, you know, it is not a very good"
		},
		{
			"timestamps": {
				"from": "00:28:59,400",
				"to": "00:29:00,200"
			},
			"offsets": {
				"from": 1739400,
				"to": 1740200
			},
			"text": " security practice."
		},
		{
			"timestamps": {
				"from": "00:29:00,200",
				"to": "00:29:01,500"
			},
			"offsets": {
				"from": 1740200,
				"to": 1741500
			},
			"text": " You have to be very, very careful about it."
		},
		{
			"timestamps": {
				"from": "00:29:01,500",
				"to": "00:29:04,200"
			},
			"offsets": {
				"from": 1741500,
				"to": 1744200
			},
			"text": " So I'm not going to recommend it, but we have seen it before."
		},
		{
			"timestamps": {
				"from": "00:29:04,200",
				"to": "00:29:07,400"
			},
			"offsets": {
				"from": 1744200,
				"to": 1747400
			},
			"text": " We'll probably take a look at somebody who does that a little bit later."
		},
		{
			"timestamps": {
				"from": "00:29:07,400",
				"to": "00:29:14,000"
			},
			"offsets": {
				"from": 1747400,
				"to": 1754000
			},
			"text": " Now dynamically sized arrays will occupy one slot, which holds that pointer to where the"
		},
		{
			"timestamps": {
				"from": "00:29:14,000",
				"to": "00:29:15,600"
			},
			"offsets": {
				"from": 1754000,
				"to": 1755600
			},
			"text": " actual value is in memory."
		},
		{
			"timestamps": {
				"from": "00:29:15,600",
				"to": "00:29:22,200"
			},
			"offsets": {
				"from": 1755600,
				"to": 1762200
			},
			"text": " There's another slot that indicates the length and then every slot after that is reserved"
		},
		{
			"timestamps": {
				"from": "00:29:22,200",
				"to": "00:29:23,100"
			},
			"offsets": {
				"from": 1762200,
				"to": 1763100
			},
			"text": " for a single element."
		},
		{
			"timestamps": {
				"from": "00:29:23,100",
				"to": "00:29:27,900"
			},
			"offsets": {
				"from": 1763100,
				"to": 1767900
			},
			"text": " So if you have five elements, even if there's small values, they're going to occupy five"
		},
		{
			"timestamps": {
				"from": "00:29:27,900",
				"to": "00:29:28,900"
			},
			"offsets": {
				"from": 1767900,
				"to": 1768900
			},
			"text": " full slots."
		},
		{
			"timestamps": {
				"from": "00:29:28,900",
				"to": "00:29:33,600"
			},
			"offsets": {
				"from": 1768900,
				"to": 1773600
			},
			"text": " Now byte arrays and strings are similar with the exception that their elements are tightly"
		},
		{
			"timestamps": {
				"from": "00:29:33,600",
				"to": "00:29:35,600"
			},
			"offsets": {
				"from": 1773600,
				"to": 1775600
			},
			"text": " packed and aligned to the left."
		},
		{
			"timestamps": {
				"from": "00:29:35,600",
				"to": "00:29:42,400"
			},
			"offsets": {
				"from": 1775600,
				"to": 1782400
			},
			"text": " So for strings, you're basically using a single byte value to represent a character."
		},
		{
			"timestamps": {
				"from": "00:29:42,400",
				"to": "00:29:45,900"
			},
			"offsets": {
				"from": 1782400,
				"to": 1785900
			},
			"text": " So in this case, on the byte level, it is equivalent to byte arrays."
		},
		{
			"timestamps": {
				"from": "00:29:45,900",
				"to": "00:29:47,900"
			},
			"offsets": {
				"from": 1785900,
				"to": 1787900
			},
			"text": " We're going to pack those as tightly as possible."
		},
		{
			"timestamps": {
				"from": "00:29:47,900",
				"to": "00:29:56,000"
			},
			"offsets": {
				"from": 1787900,
				"to": 1796000
			},
			"text": " So as a quick memory example, we're going to step through this."
		},
		{
			"timestamps": {
				"from": "00:29:56,000",
				"to": "00:29:57,000"
			},
			"offsets": {
				"from": 1796000,
				"to": 1797000
			},
			"text": " And that's a function."
		},
		{
			"timestamps": {
				"from": "00:29:57,000",
				"to": "00:29:58,200"
			},
			"offsets": {
				"from": 1797000,
				"to": 1798200
			},
			"text": " It's pure."
		},
		{
			"timestamps": {
				"from": "00:29:58,200",
				"to": "00:30:00,600"
			},
			"offsets": {
				"from": 1798200,
				"to": 1800600
			},
			"text": " It's going to return some bytes."
		},
		{
			"timestamps": {
				"from": "00:30:00,600",
				"to": "00:30:01,200"
			},
			"offsets": {
				"from": 1800600,
				"to": 1801200
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:30:01,200",
				"to": "00:30:04,000"
			},
			"offsets": {
				"from": 1801200,
				"to": 1804000
			},
			"text": " And so what we're going to do in here is first load the free memory pointer."
		},
		{
			"timestamps": {
				"from": "00:30:04,000",
				"to": "00:30:06,000"
			},
			"offsets": {
				"from": 1804000,
				"to": 1806000
			},
			"text": " So again, we're going to load from OX 40."
		},
		{
			"timestamps": {
				"from": "00:30:06,000",
				"to": "00:30:13,600"
			},
			"offsets": {
				"from": 1806000,
				"to": 1813600
			},
			"text": " We're going to declare this or assign this variable data because remember anything that's declared"
		},
		{
			"timestamps": {
				"from": "00:30:13,600",
				"to": "00:30:14,400"
			},
			"offsets": {
				"from": 1813600,
				"to": 1814400
			},
			"text": " bytes memory."
		},
		{
			"timestamps": {
				"from": "00:30:14,400",
				"to": "00:30:15,400"
			},
			"offsets": {
				"from": 1814400,
				"to": 1815400
			},
			"text": " Good."
		},
		{
			"timestamps": {
				"from": "00:30:15,400",
				"to": "00:30:17,700"
			},
			"offsets": {
				"from": 1815400,
				"to": 1817700
			},
			"text": " So men, oh, yeah."
		},
		{
			"timestamps": {
				"from": "00:30:17,700",
				"to": "00:30:21,100"
			},
			"offsets": {
				"from": 1817700,
				"to": 1821100
			},
			"text": " I thought so."
		},
		{
			"timestamps": {
				"from": "00:30:21,100",
				"to": "00:30:24,700"
			},
			"offsets": {
				"from": 1821100,
				"to": 1824700
			},
			"text": " It is not letting me zoom in."
		},
		{
			"timestamps": {
				"from": "00:30:24,700",
				"to": "00:30:34,900"
			},
			"offsets": {
				"from": 1824700,
				"to": 1834900
			},
			"text": " Yeah, sorry, this is not going to let me zoom in here."
		},
		{
			"timestamps": {
				"from": "00:30:34,900",
				"to": "00:30:38,900"
			},
			"offsets": {
				"from": 1834900,
				"to": 1838900
			},
			"text": " But I'll go over basically every line."
		},
		{
			"timestamps": {
				"from": "00:30:38,900",
				"to": "00:30:39,700"
			},
			"offsets": {
				"from": 1838900,
				"to": 1839700
			},
			"text": " So we'll step through here."
		},
		{
			"timestamps": {
				"from": "00:30:39,700",
				"to": "00:30:48,200"
			},
			"offsets": {
				"from": 1839700,
				"to": 1848200
			},
			"text": " So yeah, the data, basically what we're doing is storing that pointer to where the bytes are going to be restoring that next."
		},
		{
			"timestamps": {
				"from": "00:30:48,200",
				"to": "00:30:53,700"
			},
			"offsets": {
				"from": 1848200,
				"to": 1853700
			},
			"text": " We're going to store the length, you know, the length of the byte array at this pointer."
		},
		{
			"timestamps": {
				"from": "00:30:54,300",
				"to": "00:30:56,800"
			},
			"offsets": {
				"from": 1854300,
				"to": 1856800
			},
			"text": " So at the free memory pointer, we're going to store bytes length."
		},
		{
			"timestamps": {
				"from": "00:30:56,800",
				"to": "00:30:58,500"
			},
			"offsets": {
				"from": 1856800,
				"to": 1858500
			},
			"text": " In this case, we're just going to store four bytes."
		},
		{
			"timestamps": {
				"from": "00:30:58,500",
				"to": "00:31:00,500"
			},
			"offsets": {
				"from": 1858500,
				"to": 1860500
			},
			"text": " It's going to be one, one, two, two, three, four, four."
		},
		{
			"timestamps": {
				"from": "00:31:00,500",
				"to": "00:31:02,500"
			},
			"offsets": {
				"from": 1860500,
				"to": 1862500
			},
			"text": " We're going to store that."
		},
		{
			"timestamps": {
				"from": "00:31:02,500",
				"to": "00:31:08,400"
			},
			"offsets": {
				"from": 1862500,
				"to": 1868400
			},
			"text": " Then in the next slide, we're going to, oh, sorry, first we're going to increment the free memory pointer."
		},
		{
			"timestamps": {
				"from": "00:31:08,400",
				"to": "00:31:08,700"
			},
			"offsets": {
				"from": 1868400,
				"to": 1868700
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:31:08,700",
				"to": "00:31:09,900"
			},
			"offsets": {
				"from": 1868700,
				"to": 1869900
			},
			"text": " So we're keeping track of this."
		},
		{
			"timestamps": {
				"from": "00:31:09,900",
				"to": "00:31:14,700"
			},
			"offsets": {
				"from": 1869900,
				"to": 1874700
			},
			"text": " We're keeping track of how much, you know, how much memory is being used here, how much memory is being written to."
		},
		{
			"timestamps": {
				"from": "00:31:14,700",
				"to": "00:31:18,600"
			},
			"offsets": {
				"from": 1874700,
				"to": 1878600
			},
			"text": " So we're going to increment that by 32 bytes or by a single word."
		},
		{
			"timestamps": {
				"from": "00:31:19,300",
				"to": "00:31:24,500"
			},
			"offsets": {
				"from": 1879300,
				"to": 1884500
			},
			"text": " Then we're going to store at this new location, the bytes that are going to be padded."
		},
		{
			"timestamps": {
				"from": "00:31:24,500",
				"to": "00:31:26,500"
			},
			"offsets": {
				"from": 1884500,
				"to": 1886500
			},
			"text": " They're going to be packed to the left."
		},
		{
			"timestamps": {
				"from": "00:31:26,500",
				"to": "00:31:30,400"
			},
			"offsets": {
				"from": 1886500,
				"to": 1890400
			},
			"text": " After this, we're going to increment the free memory pointer one more time."
		},
		{
			"timestamps": {
				"from": "00:31:30,400",
				"to": "00:31:35,700"
			},
			"offsets": {
				"from": 1890400,
				"to": 1895700
			},
			"text": " And we're going to store the basically in the free memory pointer slot."
		},
		{
			"timestamps": {
				"from": "00:31:35,700",
				"to": "00:31:38,100"
			},
			"offsets": {
				"from": 1895700,
				"to": 1898100
			},
			"text": " We're going to store this updated free memory pointer."
		},
		{
			"timestamps": {
				"from": "00:31:38,100",
				"to": "00:31:38,300"
			},
			"offsets": {
				"from": 1898100,
				"to": 1898300
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:31:38,300",
				"to": "00:31:42,400"
			},
			"offsets": {
				"from": 1898300,
				"to": 1902400
			},
			"text": " So basically as we're incrementing this, we're keeping track of where the new free memory is."
		},
		{
			"timestamps": {
				"from": "00:31:42,400",
				"to": "00:31:46,500"
			},
			"offsets": {
				"from": 1902400,
				"to": 1906500
			},
			"text": " And then once we're finished with all of this, we're going to store it at the OX40 slot."
		},
		{
			"timestamps": {
				"from": "00:31:46,500",
				"to": "00:31:51,400"
			},
			"offsets": {
				"from": 1906500,
				"to": 1911400
			},
			"text": " Any questions?"
		},
		{
			"timestamps": {
				"from": "00:31:51,400",
				"to": "00:31:57,700"
			},
			"offsets": {
				"from": 1911400,
				"to": 1917700
			},
			"text": " >> When you have control, when you resize the dynamic OX moves in memory, you just have to move it."
		},
		{
			"timestamps": {
				"from": "00:31:57,700",
				"to": "00:31:58,900"
			},
			"offsets": {
				"from": 1917700,
				"to": 1918900
			},
			"text": " >> Right."
		},
		{
			"timestamps": {
				"from": "00:31:58,900",
				"to": "00:32:03,800"
			},
			"offsets": {
				"from": 1918900,
				"to": 1923800
			},
			"text": " So it's going to, I get, let's say you append an extra byte to the end of this."
		},
		{
			"timestamps": {
				"from": "00:32:03,800",
				"to": "00:32:05,500"
			},
			"offsets": {
				"from": 1923800,
				"to": 1925500
			},
			"text": " It's going to store that extra byte at the end."
		},
		{
			"timestamps": {
				"from": "00:32:05,500",
				"to": "00:32:06,500"
			},
			"offsets": {
				"from": 1925500,
				"to": 1926500
			},
			"text": " It's going to keep it packed."
		},
		{
			"timestamps": {
				"from": "00:32:06,500",
				"to": "00:32:08,900"
			},
			"offsets": {
				"from": 1926500,
				"to": 1928900
			},
			"text": " And then it's going to increase the."
		},
		{
			"timestamps": {
				"from": "00:32:08,900",
				"to": "00:32:12,900"
			},
			"offsets": {
				"from": 1928900,
				"to": 1932900
			},
			"text": " >> Let's say you have something else in the room between before pushing."
		},
		{
			"timestamps": {
				"from": "00:32:12,900",
				"to": "00:32:17,100"
			},
			"offsets": {
				"from": 1932900,
				"to": 1937100
			},
			"text": " >> That would be a few, there's something that's going to add right after that array."
		},
		{
			"timestamps": {
				"from": "00:32:17,100",
				"to": "00:32:18,100"
			},
			"offsets": {
				"from": 1937100,
				"to": 1938100
			},
			"text": " And then you push."
		},
		{
			"timestamps": {
				"from": "00:32:18,100",
				"to": "00:32:19,400"
			},
			"offsets": {
				"from": 1938100,
				"to": 1939400
			},
			"text": " It will move as well, right?"
		},
		{
			"timestamps": {
				"from": "00:32:19,400",
				"to": "00:32:20,400"
			},
			"offsets": {
				"from": 1939400,
				"to": 1940400
			},
			"text": " All of it."
		},
		{
			"timestamps": {
				"from": "00:32:20,400",
				"to": "00:32:22,100"
			},
			"offsets": {
				"from": 1940400,
				"to": 1942100
			},
			"text": " >> It should."
		},
		{
			"timestamps": {
				"from": "00:32:22,100",
				"to": "00:32:22,600"
			},
			"offsets": {
				"from": 1942100,
				"to": 1942600
			},
			"text": " I haven't tried that."
		},
		{
			"timestamps": {
				"from": "00:32:22,600",
				"to": "00:32:23,700"
			},
			"offsets": {
				"from": 1942600,
				"to": 1943700
			},
			"text": " We can actually try that as well."
		},
		{
			"timestamps": {
				"from": "00:32:23,700",
				"to": "00:32:25,600"
			},
			"offsets": {
				"from": 1943700,
				"to": 1945600
			},
			"text": " We can hop over to remix and try that."
		},
		{
			"timestamps": {
				"from": "00:32:25,600",
				"to": "00:32:28,400"
			},
			"offsets": {
				"from": 1945600,
				"to": 1948400
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "00:32:28,400",
				"to": "00:32:31,100"
			},
			"offsets": {
				"from": 1948400,
				"to": 1951100
			},
			"text": " It would make sense if it would, right?"
		},
		{
			"timestamps": {
				"from": "00:32:31,100",
				"to": "00:32:33,000"
			},
			"offsets": {
				"from": 1951100,
				"to": 1953000
			},
			"text": " Because then it would just get really, really confusing, right?"
		},
		{
			"timestamps": {
				"from": "00:32:33,000",
				"to": "00:32:38,500"
			},
			"offsets": {
				"from": 1953000,
				"to": 1958500
			},
			"text": " >> [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:32:38,500",
				"to": "00:32:39,500"
			},
			"offsets": {
				"from": 1958500,
				"to": 1959500
			},
			"text": " >> Right, right."
		},
		{
			"timestamps": {
				"from": "00:32:39,500",
				"to": "00:32:40,000"
			},
			"offsets": {
				"from": 1959500,
				"to": 1960000
			},
			"text": " You're right."
		},
		{
			"timestamps": {
				"from": "00:32:40,000",
				"to": "00:32:40,300"
			},
			"offsets": {
				"from": 1960000,
				"to": 1960300
			},
			"text": " Sorry."
		},
		{
			"timestamps": {
				"from": "00:32:40,300",
				"to": "00:32:40,800"
			},
			"offsets": {
				"from": 1960300,
				"to": 1960800
			},
			"text": " Thank you."
		},
		{
			"timestamps": {
				"from": "00:32:40,800",
				"to": "00:32:41,400"
			},
			"offsets": {
				"from": 1960800,
				"to": 1961400
			},
			"text": " Storage."
		},
		{
			"timestamps": {
				"from": "00:32:41,400",
				"to": "00:32:44,400"
			},
			"offsets": {
				"from": 1961400,
				"to": 1964400
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "00:32:44,400",
				"to": "00:32:48,100"
			},
			"offsets": {
				"from": 1964400,
				"to": 1968100
			},
			"text": " So in salinity, you do have to specify the length ahead of time."
		},
		{
			"timestamps": {
				"from": "00:32:48,100",
				"to": "00:32:49,200"
			},
			"offsets": {
				"from": 1968100,
				"to": 1969200
			},
			"text": " Thank you."
		},
		{
			"timestamps": {
				"from": "00:32:49,200",
				"to": "00:32:57,200"
			},
			"offsets": {
				"from": 1969200,
				"to": 1977200
			},
			"text": " >> You have said that the dynamic side array, right?"
		},
		{
			"timestamps": {
				"from": "00:32:57,200",
				"to": "00:33:00,200"
			},
			"offsets": {
				"from": 1977200,
				"to": 1980200
			},
			"text": " What's going on?"
		},
		{
			"timestamps": {
				"from": "00:33:00,200",
				"to": "00:33:01,200"
			},
			"offsets": {
				"from": 1980200,
				"to": 1981200
			},
			"text": " >> Right."
		},
		{
			"timestamps": {
				"from": "00:33:01,200",
				"to": "00:33:02,200"
			},
			"offsets": {
				"from": 1981200,
				"to": 1982200
			},
			"text": " >> Right."
		},
		{
			"timestamps": {
				"from": "00:33:02,200",
				"to": "00:33:10,200"
			},
			"offsets": {
				"from": 1982200,
				"to": 1990200
			},
			"text": " >> I have time for the structure of the file and the array."
		},
		{
			"timestamps": {
				"from": "00:33:10,200",
				"to": "00:33:13,400"
			},
			"offsets": {
				"from": 1990200,
				"to": 1993400
			},
			"text": " And they don't do them on one block."
		},
		{
			"timestamps": {
				"from": "00:33:13,400",
				"to": "00:33:18,000"
			},
			"offsets": {
				"from": 1993400,
				"to": 1998000
			},
			"text": " >> So like a struct, like a memory struct."
		},
		{
			"timestamps": {
				"from": "00:33:18,000",
				"to": "00:33:24,000"
			},
			"offsets": {
				"from": 1998000,
				"to": 2004000
			},
			"text": " So memory struct, so struct actually acts similar to a dynamically sized value."
		},
		{
			"timestamps": {
				"from": "00:33:24,000",
				"to": "00:33:26,200"
			},
			"offsets": {
				"from": 2004000,
				"to": 2006200
			},
			"text": " So it's actually going to be a pointer to that as well."
		},
		{
			"timestamps": {
				"from": "00:33:26,200",
				"to": "00:33:27,200"
			},
			"offsets": {
				"from": 2006200,
				"to": 2007200
			},
			"text": " >> [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:33:27,200",
				"to": "00:33:28,200"
			},
			"offsets": {
				"from": 2007200,
				"to": 2008200
			},
			"text": " >> Right."
		},
		{
			"timestamps": {
				"from": "00:33:28,200",
				"to": "00:33:33,200"
			},
			"offsets": {
				"from": 2008200,
				"to": 2013200
			},
			"text": " >> [inaudible]"
		},
		{
			"timestamps": {
				"from": "00:33:33,200",
				"to": "00:33:34,700"
			},
			"offsets": {
				"from": 2013200,
				"to": 2014700
			},
			"text": " >> Right."
		},
		{
			"timestamps": {
				"from": "00:33:34,700",
				"to": "00:33:39,200"
			},
			"offsets": {
				"from": 2014700,
				"to": 2019200
			},
			"text": " So whenever we store, to the first one, we're storing the bytes length, right?"
		},
		{
			"timestamps": {
				"from": "00:33:39,200",
				"to": "00:33:40,800"
			},
			"offsets": {
				"from": 2019200,
				"to": 2020800
			},
			"text": " We're storing the number four."
		},
		{
			"timestamps": {
				"from": "00:33:40,800",
				"to": "00:33:45,000"
			},
			"offsets": {
				"from": 2020800,
				"to": 2025000
			},
			"text": " Even though it's just a single value, that's actually occupying the full 32 bytes."
		},
		{
			"timestamps": {
				"from": "00:33:45,000",
				"to": "00:33:47,200"
			},
			"offsets": {
				"from": 2025000,
				"to": 2027200
			},
			"text": " So we want to increment it by the full 32."
		},
		{
			"timestamps": {
				"from": "00:33:47,200",
				"to": "00:33:50,800"
			},
			"offsets": {
				"from": 2027200,
				"to": 2030800
			},
			"text": " Any other questions?"
		},
		{
			"timestamps": {
				"from": "00:33:50,800",
				"to": "00:33:54,400"
			},
			"offsets": {
				"from": 2030800,
				"to": 2034400
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "00:33:54,400",
				"to": "00:33:56,200"
			},
			"offsets": {
				"from": 2034400,
				"to": 2036200
			},
			"text": " So next, we're going to have storage."
		},
		{
			"timestamps": {
				"from": "00:33:56,200",
				"to": "00:33:58,600"
			},
			"offsets": {
				"from": 2036200,
				"to": 2038600
			},
			"text": " Now storage is actually going to be a few different cases here."
		},
		{
			"timestamps": {
				"from": "00:33:58,600",
				"to": "00:34:01,500"
			},
			"offsets": {
				"from": 2038600,
				"to": 2041500
			},
			"text": " First, we'll start with statically sized variables."
		},
		{
			"timestamps": {
				"from": "00:34:01,500",
				"to": "00:34:06,000"
			},
			"offsets": {
				"from": 2041500,
				"to": 2046000
			},
			"text": " So, Personalities documentation, storage layout starts at slot zero."
		},
		{
			"timestamps": {
				"from": "00:34:06,000",
				"to": "00:34:10,000"
			},
			"offsets": {
				"from": 2046000,
				"to": 2050000
			},
			"text": " The data is stored in the rightmost bytes of that slot."
		},
		{
			"timestamps": {
				"from": "00:34:10,000",
				"to": "00:34:13,500"
			},
			"offsets": {
				"from": 2050000,
				"to": 2053500
			},
			"text": " Now if the next value can fit into the same slot,"
		},
		{
			"timestamps": {
				"from": "00:34:13,500",
				"to": "00:34:16,000"
			},
			"offsets": {
				"from": 2053500,
				"to": 2056000
			},
			"text": " obviously this is determined by type and the maximum value,"
		},
		{
			"timestamps": {
				"from": "00:34:16,000",
				"to": "00:34:19,000"
			},
			"offsets": {
				"from": 2056000,
				"to": 2059000
			},
			"text": " it will actually be right aligned into the same slot."
		},
		{
			"timestamps": {
				"from": "00:34:19,000",
				"to": "00:34:21,500"
			},
			"offsets": {
				"from": 2059000,
				"to": 2061500
			},
			"text": " So you can actually pack variables into storage."
		},
		{
			"timestamps": {
				"from": "00:34:21,500",
				"to": "00:34:23,500"
			},
			"offsets": {
				"from": 2061500,
				"to": 2063500
			},
			"text": " You do the same thing with storage structs."
		},
		{
			"timestamps": {
				"from": "00:34:23,500",
				"to": "00:34:29,500"
			},
			"offsets": {
				"from": 2063500,
				"to": 2069500
			},
			"text": " And then immutable and constant values that you see in the contracts,"
		},
		{
			"timestamps": {
				"from": "00:34:29,500",
				"to": "00:34:32,000"
			},
			"offsets": {
				"from": 2069500,
				"to": 2072000
			},
			"text": " they're actually not stored in storage at all."
		},
		{
			"timestamps": {
				"from": "00:34:32,000",
				"to": "00:34:36,000"
			},
			"offsets": {
				"from": 2072000,
				"to": 2076000
			},
			"text": " So basically what these are is they're replaced at compile time"
		},
		{
			"timestamps": {
				"from": "00:34:36,000",
				"to": "00:34:38,000"
			},
			"offsets": {
				"from": 2076000,
				"to": 2078000
			},
			"text": " with the exception of immutable's."
		},
		{
			"timestamps": {
				"from": "00:34:38,000",
				"to": "00:34:40,500"
			},
			"offsets": {
				"from": 2078000,
				"to": 2080500
			},
			"text": " So if you have it immutable that can only be determined at the ploy time"
		},
		{
			"timestamps": {
				"from": "00:34:40,500",
				"to": "00:34:42,000"
			},
			"offsets": {
				"from": 2080500,
				"to": 2082000
			},
			"text": " whenever it runs to the constructor,"
		},
		{
			"timestamps": {
				"from": "00:34:42,000",
				"to": "00:34:45,000"
			},
			"offsets": {
				"from": 2082000,
				"to": 2085000
			},
			"text": " it'll actually replace every instance of that in the bytecode."
		},
		{
			"timestamps": {
				"from": "00:34:45,000",
				"to": "00:34:50,500"
			},
			"offsets": {
				"from": 2085000,
				"to": 2090500
			},
			"text": " So as a quick example, we have a contract."
		},
		{
			"timestamps": {
				"from": "00:34:50,500",
				"to": "00:34:53,000"
			},
			"offsets": {
				"from": 2090500,
				"to": 2093000
			},
			"text": " It's got five values in it."
		},
		{
			"timestamps": {
				"from": "00:34:53,000",
				"to": "00:34:55,000"
			},
			"offsets": {
				"from": 2093000,
				"to": 2095000
			},
			"text": " First, it's going to be a full Uint 256."
		},
		{
			"timestamps": {
				"from": "00:34:55,000",
				"to": "00:34:58,000"
			},
			"offsets": {
				"from": 2095000,
				"to": 2098000
			},
			"text": " So we want to occupy an entire 32 byte slot with this."
		},
		{
			"timestamps": {
				"from": "00:34:58,000",
				"to": "00:35:04,500"
			},
			"offsets": {
				"from": 2098000,
				"to": 2104500
			},
			"text": " Next, we have two values of 128 bits, so basically 16 bytes each."
		},
		{
			"timestamps": {
				"from": "00:35:04,500",
				"to": "00:35:07,000"
			},
			"offsets": {
				"from": 2104500,
				"to": 2107000
			},
			"text": " So these can actually be packed into a single slot"
		},
		{
			"timestamps": {
				"from": "00:35:07,000",
				"to": "00:35:08,000"
			},
			"offsets": {
				"from": 2107000,
				"to": 2108000
			},
			"text": " and we'll see that they are."
		},
		{
			"timestamps": {
				"from": "00:35:08,000",
				"to": "00:35:12,000"
			},
			"offsets": {
				"from": 2108000,
				"to": 2112000
			},
			"text": " So B is two, it's here in the rightmost bit."
		},
		{
			"timestamps": {
				"from": "00:35:12,000",
				"to": "00:35:18,000"
			},
			"offsets": {
				"from": 2112000,
				"to": 2118000
			},
			"text": " And C is packed in the next rightmost place in that slot."
		},
		{
			"timestamps": {
				"from": "00:35:18,000",
				"to": "00:35:23,000"
			},
			"offsets": {
				"from": 2118000,
				"to": 2123000
			},
			"text": " And then we have finally two Uint eights, which are stored here."
		},
		{
			"timestamps": {
				"from": "00:35:23,000",
				"to": "00:35:26,000"
			},
			"offsets": {
				"from": 2123000,
				"to": 2126000
			},
			"text": " So everything is packed as tightly as possible in storage"
		},
		{
			"timestamps": {
				"from": "00:35:26,000",
				"to": "00:35:28,000"
			},
			"offsets": {
				"from": 2126000,
				"to": 2128000
			},
			"text": " whenever we're doing this layout."
		},
		{
			"timestamps": {
				"from": "00:35:28,000",
				"to": "00:35:34,000"
			},
			"offsets": {
				"from": 2128000,
				"to": 2134000
			},
			"text": " Next, for dynamically sized variables, again,"
		},
		{
			"timestamps": {
				"from": "00:35:34,000",
				"to": "00:35:39,000"
			},
			"offsets": {
				"from": 2134000,
				"to": 2139000
			},
			"text": " per the documentation and solidity, a mapping slot is the hash"
		},
		{
			"timestamps": {
				"from": "00:35:39,000",
				"to": "00:35:43,000"
			},
			"offsets": {
				"from": 2139000,
				"to": 2143000
			},
			"text": " of the key value concatenated with the storage slot."
		},
		{
			"timestamps": {
				"from": "00:35:43,000",
				"to": "00:35:46,000"
			},
			"offsets": {
				"from": 2143000,
				"to": 2146000
			},
			"text": " So let's say, for example, in a balanced mapping in an ERC20,"
		},
		{
			"timestamps": {
				"from": "00:35:46,000",
				"to": "00:35:49,000"
			},
			"offsets": {
				"from": 2146000,
				"to": 2149000
			},
			"text": " it maps an address to a Uint 256."
		},
		{
			"timestamps": {
				"from": "00:35:49,000",
				"to": "00:35:51,000"
			},
			"offsets": {
				"from": 2149000,
				"to": 2151000
			},
			"text": " Let's say it's in slot zero."
		},
		{
			"timestamps": {
				"from": "00:35:51,000",
				"to": "00:35:54,000"
			},
			"offsets": {
				"from": 2151000,
				"to": 2154000
			},
			"text": " What it's going to do is whenever you need to read or write to this,"
		},
		{
			"timestamps": {
				"from": "00:35:54,000",
				"to": "00:35:57,000"
			},
			"offsets": {
				"from": 2154000,
				"to": 2157000
			},
			"text": " we're going to take that address, pad it to 32 bytes,"
		},
		{
			"timestamps": {
				"from": "00:35:57,000",
				"to": "00:36:00,000"
			},
			"offsets": {
				"from": 2157000,
				"to": 2160000
			},
			"text": " concatenate that with another 32 bytes, which is the slot,"
		},
		{
			"timestamps": {
				"from": "00:36:00,000",
				"to": "00:36:01,000"
			},
			"offsets": {
				"from": 2160000,
				"to": 2161000
			},
			"text": " it's going to be zero."
		},
		{
			"timestamps": {
				"from": "00:36:01,000",
				"to": "00:36:03,000"
			},
			"offsets": {
				"from": 2161000,
				"to": 2163000
			},
			"text": " And then we hash all of that, and that's"
		},
		{
			"timestamps": {
				"from": "00:36:03,000",
				"to": "00:36:06,000"
			},
			"offsets": {
				"from": 2163000,
				"to": 2166000
			},
			"text": " where the actual value is stored."
		},
		{
			"timestamps": {
				"from": "00:36:06,000",
				"to": "00:36:10,000"
			},
			"offsets": {
				"from": 2166000,
				"to": 2170000
			},
			"text": " Now, dynamically sized arrays, it stores the current length"
		},
		{
			"timestamps": {
				"from": "00:36:10,000",
				"to": "00:36:14,000"
			},
			"offsets": {
				"from": 2170000,
				"to": 2174000
			},
			"text": " in whatever slot it occupies, and then its elements are stored"
		},
		{
			"timestamps": {
				"from": "00:36:14,000",
				"to": "00:36:19,000"
			},
			"offsets": {
				"from": 2174000,
				"to": 2179000
			},
			"text": " sequentially starting at the SHA-3 hash of that slot number."
		},
		{
			"timestamps": {
				"from": "00:36:19,000",
				"to": "00:36:23,000"
			},
			"offsets": {
				"from": 2179000,
				"to": 2183000
			},
			"text": " Bite arrays and strings are stored the same way as other dynamic arrays"
		},
		{
			"timestamps": {
				"from": "00:36:23,000",
				"to": "00:36:27,000"
			},
			"offsets": {
				"from": 2183000,
				"to": 2187000
			},
			"text": " unless the length is 31 or less."
		},
		{
			"timestamps": {
				"from": "00:36:27,000",
				"to": "00:36:30,000"
			},
			"offsets": {
				"from": 2187000,
				"to": 2190000
			},
			"text": " If this is the case, then what's going to happen is all of that's going"
		},
		{
			"timestamps": {
				"from": "00:36:30,000",
				"to": "00:36:35,000"
			},
			"offsets": {
				"from": 2190000,
				"to": 2195000
			},
			"text": " to be packed into a single slot, left aligned, and then the length"
		},
		{
			"timestamps": {
				"from": "00:36:35,000",
				"to": "00:36:40,000"
			},
			"offsets": {
				"from": 2195000,
				"to": 2200000
			},
			"text": " of that is going to be placed at the rightmost byte."
		},
		{
			"timestamps": {
				"from": "00:36:40,000",
				"to": "00:36:43,000"
			},
			"offsets": {
				"from": 2200000,
				"to": 2203000
			},
			"text": " And it's going to be 2x the length."
		},
		{
			"timestamps": {
				"from": "00:36:43,000",
				"to": "00:36:45,000"
			},
			"offsets": {
				"from": 2203000,
				"to": 2205000
			},
			"text": " So looking at this one, we have three storage variables."
		},
		{
			"timestamps": {
				"from": "00:36:45,000",
				"to": "00:36:50,000"
			},
			"offsets": {
				"from": 2205000,
				"to": 2210000
			},
			"text": " We have a string array and a mapping."
		},
		{
			"timestamps": {
				"from": "00:36:50,000",
				"to": "00:36:54,000"
			},
			"offsets": {
				"from": 2210000,
				"to": 2214000
			},
			"text": " So looking to the storage layout, first, over to the left,"
		},
		{
			"timestamps": {
				"from": "00:36:54,000",
				"to": "00:36:56,000"
			},
			"offsets": {
				"from": 2214000,
				"to": 2216000
			},
			"text": " we have 61616161."
		},
		{
			"timestamps": {
				"from": "00:36:56,000",
				"to": "00:36:58,000"
			},
			"offsets": {
				"from": 2216000,
				"to": 2218000
			},
			"text": " These are the four As."
		},
		{
			"timestamps": {
				"from": "00:36:58,000",
				"to": "00:37:03,000"
			},
			"offsets": {
				"from": 2218000,
				"to": 2223000
			},
			"text": " And then over on the right, we have eight, which is 2 times the length."
		},
		{
			"timestamps": {
				"from": "00:37:03,000",
				"to": "00:37:08,000"
			},
			"offsets": {
				"from": 2223000,
				"to": 2228000
			},
			"text": " In the next slot, we're going to store the length of this data value."
		},
		{
			"timestamps": {
				"from": "00:37:08,000",
				"to": "00:37:10,000"
			},
			"offsets": {
				"from": 2228000,
				"to": 2230000
			},
			"text": " It's going to store 1 and 2, right?"
		},
		{
			"timestamps": {
				"from": "00:37:10,000",
				"to": "00:37:14,000"
			},
			"offsets": {
				"from": 2230000,
				"to": 2234000
			},
			"text": " So what's going to happen here is whenever the code is executed,"
		},
		{
			"timestamps": {
				"from": "00:37:14,000",
				"to": "00:37:17,000"
			},
			"offsets": {
				"from": 2234000,
				"to": 2237000
			},
			"text": " it's going to see that the length is 2 here at slot 1,"
		},
		{
			"timestamps": {
				"from": "00:37:17,000",
				"to": "00:37:21,000"
			},
			"offsets": {
				"from": 2237000,
				"to": 2241000
			},
			"text": " and whenever it wants to access these values, it's going to hash slot 1."
		},
		{
			"timestamps": {
				"from": "00:37:21,000",
				"to": "00:37:25,000"
			},
			"offsets": {
				"from": 2241000,
				"to": 2245000
			},
			"text": " And that's going to point down here to 0xv1, et cetera, et cetera."
		},
		{
			"timestamps": {
				"from": "00:37:25,000",
				"to": "00:37:30,000"
			},
			"offsets": {
				"from": 2245000,
				"to": 2250000
			},
			"text": " And then we can see here's the first value, and here's the second value."
		},
		{
			"timestamps": {
				"from": "00:37:30,000",
				"to": "00:37:32,000"
			},
			"offsets": {
				"from": 2250000,
				"to": 2252000
			},
			"text": " And then finally, we have the mapping."
		},
		{
			"timestamps": {
				"from": "00:37:32,000",
				"to": "00:37:34,000"
			},
			"offsets": {
				"from": 2252000,
				"to": 2254000
			},
			"text": " It's mapping an address to a unit 256."
		},
		{
			"timestamps": {
				"from": "00:37:34,000",
				"to": "00:37:38,000"
			},
			"offsets": {
				"from": 2254000,
				"to": 2258000
			},
			"text": " The actual storage slot of a mapping is always 0."
		},
		{
			"timestamps": {
				"from": "00:37:38,000",
				"to": "00:37:40,000"
			},
			"offsets": {
				"from": 2258000,
				"to": 2260000
			},
			"text": " That doesn't mean that it's not incremented."
		},
		{
			"timestamps": {
				"from": "00:37:40,000",
				"to": "00:37:43,000"
			},
			"offsets": {
				"from": 2260000,
				"to": 2263000
			},
			"text": " The storage is still incremented, but this slot is always going to be 0."
		},
		{
			"timestamps": {
				"from": "00:37:43,000",
				"to": "00:37:49,000"
			},
			"offsets": {
				"from": 2263000,
				"to": 2269000
			},
			"text": " And then any addresses that are mapped to, of course, will be that hash, right?"
		},
		{
			"timestamps": {
				"from": "00:37:49,000",
				"to": "00:37:51,000"
			},
			"offsets": {
				"from": 2269000,
				"to": 2271000
			},
			"text": " So 0xv9, et cetera, et cetera."
		},
		{
			"timestamps": {
				"from": "00:37:51,000",
				"to": "00:37:56,000"
			},
			"offsets": {
				"from": 2271000,
				"to": 2276000
			},
			"text": " So one more thing to mention, something that's really important to note,"
		},
		{
			"timestamps": {
				"from": "00:37:56,000",
				"to": "00:37:59,000"
			},
			"offsets": {
				"from": 2276000,
				"to": 2279000
			},
			"text": " is storage in regards to inheritance."
		},
		{
			"timestamps": {
				"from": "00:37:59,000",
				"to": "00:38:02,000"
			},
			"offsets": {
				"from": 2279000,
				"to": 2282000
			},
			"text": " So Solidity uses C3 linearization."
		},
		{
			"timestamps": {
				"from": "00:38:02,000",
				"to": "00:38:06,000"
			},
			"offsets": {
				"from": 2282000,
				"to": 2286000
			},
			"text": " So basically, in the context of storage, what this means is storage slots"
		},
		{
			"timestamps": {
				"from": "00:38:06,000",
				"to": "00:38:11,000"
			},
			"offsets": {
				"from": 2286000,
				"to": 2291000
			},
			"text": " in a parent contract precede the child contract storage."
		},
		{
			"timestamps": {
				"from": "00:38:11,000",
				"to": "00:38:15,000"
			},
			"offsets": {
				"from": 2291000,
				"to": 2295000
			},
			"text": " When a child has multiple parents, the order of the parent's storage is set"
		},
		{
			"timestamps": {
				"from": "00:38:15,000",
				"to": "00:38:17,000"
			},
			"offsets": {
				"from": 2295000,
				"to": 2297000
			},
			"text": " by the order of inheritance."
		},
		{
			"timestamps": {
				"from": "00:38:17,000",
				"to": "00:38:20,000"
			},
			"offsets": {
				"from": 2297000,
				"to": 2300000
			},
			"text": " And this processor is repeated recursively."
		},
		{
			"timestamps": {
				"from": "00:38:20,000",
				"to": "00:38:25,000"
			},
			"offsets": {
				"from": 2300000,
				"to": 2305000
			},
			"text": " And storage packing rules are still in play when applicable."
		},
		{
			"timestamps": {
				"from": "00:38:25,000",
				"to": "00:38:29,000"
			},
			"offsets": {
				"from": 2305000,
				"to": 2309000
			},
			"text": " So here we have basic inheritance example."
		},
		{
			"timestamps": {
				"from": "00:38:29,000",
				"to": "00:38:33,000"
			},
			"offsets": {
				"from": 2309000,
				"to": 2313000
			},
			"text": " We have parent 0, it's going to store a, it's going to be 1."
		},
		{
			"timestamps": {
				"from": "00:38:33,000",
				"to": "00:38:36,000"
			},
			"offsets": {
				"from": 2313000,
				"to": 2316000
			},
			"text": " Parent 1 is going to store b at a value of 2."
		},
		{
			"timestamps": {
				"from": "00:38:36,000",
				"to": "00:38:40,000"
			},
			"offsets": {
				"from": 2316000,
				"to": 2320000
			},
			"text": " And then finally, we have child, which is going to inherit parent 0 and parent 1."
		},
		{
			"timestamps": {
				"from": "00:38:40,000",
				"to": "00:38:42,000"
			},
			"offsets": {
				"from": 2320000,
				"to": 2322000
			},
			"text": " And it's going to have its own value C."
		},
		{
			"timestamps": {
				"from": "00:38:42,000",
				"to": "00:38:43,000"
			},
			"offsets": {
				"from": 2322000,
				"to": 2323000
			},
			"text": " And that's going to be 3."
		},
		{
			"timestamps": {
				"from": "00:38:43,000",
				"to": "00:38:46,000"
			},
			"offsets": {
				"from": 2323000,
				"to": 2326000
			},
			"text": " And looking through the storage layout, first we have parent 0 storage,"
		},
		{
			"timestamps": {
				"from": "00:38:46,000",
				"to": "00:38:49,000"
			},
			"offsets": {
				"from": 2326000,
				"to": 2329000
			},
			"text": " then parent 1 storage, then child storage."
		},
		{
			"timestamps": {
				"from": "00:38:49,000",
				"to": "00:38:52,000"
			},
			"offsets": {
				"from": 2329000,
				"to": 2332000
			},
			"text": " This is really important to note, especially with things like proxy contracts."
		},
		{
			"timestamps": {
				"from": "00:38:52,000",
				"to": "00:38:56,000"
			},
			"offsets": {
				"from": 2332000,
				"to": 2336000
			},
			"text": " You'll see in some of the Open Zeppelin implementations these storage"
		},
		{
			"timestamps": {
				"from": "00:38:56,000",
				"to": "00:38:58,000"
			},
			"offsets": {
				"from": 2336000,
				"to": 2338000
			},
			"text": " paddings and things like this for upgradability."
		},
		{
			"timestamps": {
				"from": "00:38:58,000",
				"to": "00:39:02,000"
			},
			"offsets": {
				"from": 2338000,
				"to": 2342000
			},
			"text": " So next up we have event logs."
		},
		{
			"timestamps": {
				"from": "00:39:02,000",
				"to": "00:39:07,000"
			},
			"offsets": {
				"from": 2342000,
				"to": 2347000
			},
			"text": " So per the standardization, event logs follow the following rules."
		},
		{
			"timestamps": {
				"from": "00:39:07,000",
				"to": "00:39:09,000"
			},
			"offsets": {
				"from": 2347000,
				"to": 2349000
			},
			"text": " They can have up to four topics."
		},
		{
			"timestamps": {
				"from": "00:39:09,000",
				"to": "00:39:12,000"
			},
			"offsets": {
				"from": 2349000,
				"to": 2352000
			},
			"text": " The first topic is always that hash of the event signature."
		},
		{
			"timestamps": {
				"from": "00:39:12,000",
				"to": "00:39:15,000"
			},
			"offsets": {
				"from": 2352000,
				"to": 2355000
			},
			"text": " So it's going to be the event name, parenthesis, and any types."
		},
		{
			"timestamps": {
				"from": "00:39:15,000",
				"to": "00:39:19,000"
			},
			"offsets": {
				"from": 2355000,
				"to": 2359000
			},
			"text": " And then non-indexed topics are logged by storing them in memory"
		},
		{
			"timestamps": {
				"from": "00:39:19,000",
				"to": "00:39:23,000"
			},
			"offsets": {
				"from": 2359000,
				"to": 2363000
			},
			"text": " and then passing to that log instruction a pointer to where that memory starts"
		},
		{
			"timestamps": {
				"from": "00:39:23,000",
				"to": "00:39:27,000"
			},
			"offsets": {
				"from": 2363000,
				"to": 2367000
			},
			"text": " and how big that memory is."
		},
		{
			"timestamps": {
				"from": "00:39:27,000",
				"to": "00:39:31,000"
			},
			"offsets": {
				"from": 2367000,
				"to": 2371000
			},
			"text": " So as an event log example, at the top we have hash."
		},
		{
			"timestamps": {
				"from": "00:39:31,000",
				"to": "00:39:34,000"
			},
			"offsets": {
				"from": 2371000,
				"to": 2374000
			},
			"text": " And that's going to be the event signature hash."
		},
		{
			"timestamps": {
				"from": "00:39:34,000",
				"to": "00:39:38,000"
			},
			"offsets": {
				"from": 2374000,
				"to": 2378000
			},
			"text": " Next we're just going to have, you know, a and b, simple constants."
		},
		{
			"timestamps": {
				"from": "00:39:38,000",
				"to": "00:39:42,000"
			},
			"offsets": {
				"from": 2378000,
				"to": 2382000
			},
			"text": " Now in Solidity, this first function is how we'll log this, right?"
		},
		{
			"timestamps": {
				"from": "00:39:42,000",
				"to": "00:39:46,000"
			},
			"offsets": {
				"from": 2382000,
				"to": 2386000
			},
			"text": " We say emit the name of the event and then any arguments that go to that event."
		},
		{
			"timestamps": {
				"from": "00:39:46,000",
				"to": "00:39:49,000"
			},
			"offsets": {
				"from": 2386000,
				"to": 2389000
			},
			"text": " Next we have log in yule."
		},
		{
			"timestamps": {
				"from": "00:39:49,000",
				"to": "00:39:53,000"
			},
			"offsets": {
				"from": 2389000,
				"to": 2393000
			},
			"text": " So this is actually what's happening under the hood whenever you do this in Solidity."
		},
		{
			"timestamps": {
				"from": "00:39:53,000",
				"to": "00:39:59,000"
			},
			"offsets": {
				"from": 2393000,
				"to": 2399000
			},
			"text": " So first we want to store, note that b is not indexed, so we want to store that in memory."
		},
		{
			"timestamps": {
				"from": "00:39:59,000",
				"to": "00:40:03,000"
			},
			"offsets": {
				"from": 2399000,
				"to": 2403000
			},
			"text": " And then a is indexed, so we're going to have that, you know, on the stack, right?"
		},
		{
			"timestamps": {
				"from": "00:40:03,000",
				"to": "00:40:04,000"
			},
			"offsets": {
				"from": 2403000,
				"to": 2404000
			},
			"text": " It doesn't have to go into memory."
		},
		{
			"timestamps": {
				"from": "00:40:04,000",
				"to": "00:40:08,000"
			},
			"offsets": {
				"from": 2404000,
				"to": 2408000
			},
			"text": " So first thing we do is we're going to store b, we can just store it at slot 0."
		},
		{
			"timestamps": {
				"from": "00:40:08,000",
				"to": "00:40:10,000"
			},
			"offsets": {
				"from": 2408000,
				"to": 2410000
			},
			"text": " We're not going to be dealing with memory after this, right?"
		},
		{
			"timestamps": {
				"from": "00:40:10,000",
				"to": "00:40:12,000"
			},
			"offsets": {
				"from": 2410000,
				"to": 2412000
			},
			"text": " The function is going to end."
		},
		{
			"timestamps": {
				"from": "00:40:12,000",
				"to": "00:40:16,000"
			},
			"offsets": {
				"from": 2412000,
				"to": 2416000
			},
			"text": " So we store at slot 0, b, and then we call the log 2 instruction."
		},
		{
			"timestamps": {
				"from": "00:40:16,000",
				"to": "00:40:21,000"
			},
			"offsets": {
				"from": 2416000,
				"to": 2421000
			},
			"text": " And what we're going to pass to it is a memory pointer, in this case, slot 0 of memory."
		},
		{
			"timestamps": {
				"from": "00:40:21,000",
				"to": "00:40:24,000"
			},
			"offsets": {
				"from": 2421000,
				"to": 2424000
			},
			"text": " The size of memory, which is going to be 32 bytes."
		},
		{
			"timestamps": {
				"from": "00:40:24,000",
				"to": "00:40:30,000"
			},
			"offsets": {
				"from": 2424000,
				"to": 2430000
			},
			"text": " The event hash, which is going to be topic 1, and then the index topic a,"
		},
		{
			"timestamps": {
				"from": "00:40:30,000",
				"to": "00:40:33,000"
			},
			"offsets": {
				"from": 2430000,
				"to": 2433000
			},
			"text": " which is going to be topic 2."
		},
		{
			"timestamps": {
				"from": "00:40:33,000",
				"to": "00:40:37,000"
			},
			"offsets": {
				"from": 2433000,
				"to": 2437000
			},
			"text": " So next we have errors."
		},
		{
			"timestamps": {
				"from": "00:40:37,000",
				"to": "00:40:43,000"
			},
			"offsets": {
				"from": 2437000,
				"to": 2443000
			},
			"text": " So per the standardization, an error consists of a 4 byte selector and some error data."
		},
		{
			"timestamps": {
				"from": "00:40:43,000",
				"to": "00:40:46,000"
			},
			"offsets": {
				"from": 2443000,
				"to": 2446000
			},
			"text": " Now Solidity actually has two predefined errors."
		},
		{
			"timestamps": {
				"from": "00:40:46,000",
				"to": "00:40:48,000"
			},
			"offsets": {
				"from": 2446000,
				"to": 2448000
			},
			"text": " This is error and panic."
		},
		{
			"timestamps": {
				"from": "00:40:48,000",
				"to": "00:40:53,000"
			},
			"offsets": {
				"from": 2448000,
				"to": 2453000
			},
			"text": " But since Solidity 0.8.4, developers can actually define custom error types,"
		},
		{
			"timestamps": {
				"from": "00:40:53,000",
				"to": "00:40:56,000"
			},
			"offsets": {
				"from": 2453000,
				"to": 2456000
			},
			"text": " where you can have names and arguments, and it's actually a bit more efficient"
		},
		{
			"timestamps": {
				"from": "00:40:56,000",
				"to": "00:40:59,000"
			},
			"offsets": {
				"from": 2456000,
				"to": 2459000
			},
			"text": " than the standard require Boolean string."
		},
		{
			"timestamps": {
				"from": "00:40:59,000",
				"to": "00:41:05,000"
			},
			"offsets": {
				"from": 2459000,
				"to": 2465000
			},
			"text": " The reason for this is the Solidity defined errors first is panic,"
		},
		{
			"timestamps": {
				"from": "00:41:05,000",
				"to": "00:41:07,000"
			},
			"offsets": {
				"from": 2465000,
				"to": 2467000
			},
			"text": " and it's got a Uint 256."
		},
		{
			"timestamps": {
				"from": "00:41:07,000",
				"to": "00:41:11,000"
			},
			"offsets": {
				"from": 2467000,
				"to": 2471000
			},
			"text": " So this is things like divide by 0, overflow, underflow."
		},
		{
			"timestamps": {
				"from": "00:41:11,000",
				"to": "00:41:13,000"
			},
			"offsets": {
				"from": 2471000,
				"to": 2473000
			},
			"text": " That's when the panic comes into play."
		},
		{
			"timestamps": {
				"from": "00:41:13,000",
				"to": "00:41:15,000"
			},
			"offsets": {
				"from": 2473000,
				"to": 2475000
			},
			"text": " Each one has its own code, it's in the documentation."
		},
		{
			"timestamps": {
				"from": "00:41:15,000",
				"to": "00:41:18,000"
			},
			"offsets": {
				"from": 2475000,
				"to": 2478000
			},
			"text": " And the next is the actual error."
		},
		{
			"timestamps": {
				"from": "00:41:18,000",
				"to": "00:41:21,000"
			},
			"offsets": {
				"from": 2478000,
				"to": 2481000
			},
			"text": " This takes a string in memory."
		},
		{
			"timestamps": {
				"from": "00:41:21,000",
				"to": "00:41:24,000"
			},
			"offsets": {
				"from": 2481000,
				"to": 2484000
			},
			"text": " And you can see, so first is a panic code."
		},
		{
			"timestamps": {
				"from": "00:41:24,000",
				"to": "00:41:28,000"
			},
			"offsets": {
				"from": 2484000,
				"to": 2488000
			},
			"text": " So we have these 4 bytes, which is the panic selector."
		},
		{
			"timestamps": {
				"from": "00:41:28,000",
				"to": "00:41:32,000"
			},
			"offsets": {
				"from": 2488000,
				"to": 2492000
			},
			"text": " And then the next 32 bytes is going to be the actual panic code."
		},
		{
			"timestamps": {
				"from": "00:41:32,000",
				"to": "00:41:36,000"
			},
			"offsets": {
				"from": 2492000,
				"to": 2496000
			},
			"text": " In this case it's 1."
		},
		{
			"timestamps": {
				"from": "00:41:36,000",
				"to": "00:41:40,000"
			},
			"offsets": {
				"from": 2496000,
				"to": 2500000
			},
			"text": " Then the next one is going to be require, or what is standard with require."
		},
		{
			"timestamps": {
				"from": "00:41:40,000",
				"to": "00:41:41,000"
			},
			"offsets": {
				"from": 2500000,
				"to": 2501000
			},
			"text": " We pass it a Boolean."
		},
		{
			"timestamps": {
				"from": "00:41:41,000",
				"to": "00:41:44,000"
			},
			"offsets": {
				"from": 2501000,
				"to": 2504000
			},
			"text": " If it's false, it's going to throw this error with a string in it."
		},
		{
			"timestamps": {
				"from": "00:41:44,000",
				"to": "00:41:48,000"
			},
			"offsets": {
				"from": 2504000,
				"to": 2508000
			},
			"text": " Note this actually takes up a lot more memory, because we have the error selector."
		},
		{
			"timestamps": {
				"from": "00:41:48,000",
				"to": "00:41:53,000"
			},
			"offsets": {
				"from": 2508000,
				"to": 2513000
			},
			"text": " And remember per the standards of strings, we first have to have a pointer to the string"
		},
		{
			"timestamps": {
				"from": "00:41:53,000",
				"to": "00:41:55,000"
			},
			"offsets": {
				"from": 2513000,
				"to": 2515000
			},
			"text": " and then the actual string itself."
		},
		{
			"timestamps": {
				"from": "00:41:55,000",
				"to": "00:41:59,000"
			},
			"offsets": {
				"from": 2515000,
				"to": 2519000
			},
			"text": " So that's going to occupy extra data."
		},
		{
			"timestamps": {
				"from": "00:41:59,000",
				"to": "00:42:08,000"
			},
			"offsets": {
				"from": 2519000,
				"to": 2528000
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "00:42:08,000",
				"to": "00:42:13,000"
			},
			"offsets": {
				"from": 2528000,
				"to": 2533000
			},
			"text": " Right, so basically because the error selector is only an offset of 4 bytes,"
		},
		{
			"timestamps": {
				"from": "00:42:13,000",
				"to": "00:42:15,000"
			},
			"offsets": {
				"from": 2533000,
				"to": 2535000
			},
			"text": " that's actually not padded to the full 32."
		},
		{
			"timestamps": {
				"from": "00:42:15,000",
				"to": "00:42:19,000"
			},
			"offsets": {
				"from": 2535000,
				"to": 2539000
			},
			"text": " So right after those 4 bytes, we're going to start putting other data."
		},
		{
			"timestamps": {
				"from": "00:42:19,000",
				"to": "00:42:22,000"
			},
			"offsets": {
				"from": 2539000,
				"to": 2542000
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "00:42:22,000",
				"to": "00:42:26,000"
			},
			"offsets": {
				"from": 2542000,
				"to": 2546000
			},
			"text": " Any other questions?"
		},
		{
			"timestamps": {
				"from": "00:42:26,000",
				"to": "00:42:27,000"
			},
			"offsets": {
				"from": 2546000,
				"to": 2547000
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "00:42:27,000",
				"to": "00:42:30,000"
			},
			"offsets": {
				"from": 2547000,
				"to": 2550000
			},
			"text": " All right, so next we're going to do applied Yule+ solidity."
		},
		{
			"timestamps": {
				"from": "00:42:30,000",
				"to": "00:42:35,000"
			},
			"offsets": {
				"from": 2550000,
				"to": 2555000
			},
			"text": " So we're actually going to hop over to remix."
		},
		{
			"timestamps": {
				"from": "00:42:35,000",
				"to": "00:42:40,000"
			},
			"offsets": {
				"from": 2555000,
				"to": 2560000
			},
			"text": " And that's remix.etherium.org."
		},
		{
			"timestamps": {
				"from": "00:42:40,000",
				"to": "00:42:44,000"
			},
			"offsets": {
				"from": 2560000,
				"to": 2564000
			},
			"text": " And from that link tree earlier, we actually have some boilerplate code here."
		},
		{
			"timestamps": {
				"from": "00:42:44,000",
				"to": "00:42:48,000"
			},
			"offsets": {
				"from": 2564000,
				"to": 2568000
			},
			"text": " Make sure this is big enough to see."
		},
		{
			"timestamps": {
				"from": "00:42:48,000",
				"to": "00:42:51,000"
			},
			"offsets": {
				"from": 2568000,
				"to": 2571000
			},
			"text": " So you might want to just copy paste this from that link if you're going to be following along,"
		},
		{
			"timestamps": {
				"from": "00:42:51,000",
				"to": "00:42:55,000"
			},
			"offsets": {
				"from": 2571000,
				"to": 2575000
			},
			"text": " because lots of already pre-encoded data and all that kind of stuff."
		},
		{
			"timestamps": {
				"from": "00:42:55,000",
				"to": "00:43:00,000"
			},
			"offsets": {
				"from": 2575000,
				"to": 2580000
			},
			"text": " So I'll give you guys a minute to get that pulled up, copy-pasted, all that good stuff."
		},
		{
			"timestamps": {
				"from": "00:43:00,000",
				"to": "00:43:29,000"
			},
			"offsets": {
				"from": 2580000,
				"to": 2609000
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "00:43:29,000",
				"to": "00:43:44,000"
			},
			"offsets": {
				"from": 2609000,
				"to": 2624000
			},
			"text": " Okay, we'll give it just another second."
		},
		{
			"timestamps": {
				"from": "00:43:44,000",
				"to": "00:43:57,000"
			},
			"offsets": {
				"from": 2624000,
				"to": 2637000
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "00:43:57,000",
				"to": "00:43:59,000"
			},
			"offsets": {
				"from": 2637000,
				"to": 2639000
			},
			"text": " Yep, so that's going to have the code."
		},
		{
			"timestamps": {
				"from": "00:43:59,000",
				"to": "00:44:04,000"
			},
			"offsets": {
				"from": 2639000,
				"to": 2644000
			},
			"text": " It's going to be an adjust, but you can just copy-paste that."
		},
		{
			"timestamps": {
				"from": "00:44:04,000",
				"to": "00:44:17,000"
			},
			"offsets": {
				"from": 2644000,
				"to": 2657000
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "00:44:17,000",
				"to": "00:44:24,000"
			},
			"offsets": {
				"from": 2657000,
				"to": 2664000
			},
			"text": " Yes, one moment."
		},
		{
			"timestamps": {
				"from": "00:44:24,000",
				"to": "00:44:37,000"
			},
			"offsets": {
				"from": 2664000,
				"to": 2677000
			},
			"text": " Maybe not. I'm going to write it right here."
		},
		{
			"timestamps": {
				"from": "00:44:37,000",
				"to": "00:45:02,000"
			},
			"offsets": {
				"from": 2677000,
				"to": 2702000
			},
			"text": " It's going to be the link, linktr.oe/etheriumassembly."
		},
		{
			"timestamps": {
				"from": "00:45:02,000",
				"to": "00:45:19,000"
			},
			"offsets": {
				"from": 2702000,
				"to": 2719000
			},
			"text": " Hopefully, Internet doesn't rug pull us here."
		},
		{
			"timestamps": {
				"from": "00:45:19,000",
				"to": "00:45:24,000"
			},
			"offsets": {
				"from": 2719000,
				"to": 2724000
			},
			"text": " All right, we'll go ahead and jump into it."
		},
		{
			"timestamps": {
				"from": "00:45:24,000",
				"to": "00:45:29,000"
			},
			"offsets": {
				"from": 2724000,
				"to": 2729000
			},
			"text": " So everything here that's predefined, this is just for the sake of us not having to go"
		},
		{
			"timestamps": {
				"from": "00:45:29,000",
				"to": "00:45:33,000"
			},
			"offsets": {
				"from": 2729000,
				"to": 2733000
			},
			"text": " and encode stuff in hexadecimal and all of that in the middle of the workshop."
		},
		{
			"timestamps": {
				"from": "00:45:33,000",
				"to": "00:45:37,000"
			},
			"offsets": {
				"from": 2733000,
				"to": 2737000
			},
			"text": " Just looking through these constants really quick, we have the length of the name."
		},
		{
			"timestamps": {
				"from": "00:45:37,000",
				"to": "00:45:43,000"
			},
			"offsets": {
				"from": 2737000,
				"to": 2743000
			},
			"text": " In this case, the name is actually going to be \"yule token\"."
		},
		{
			"timestamps": {
				"from": "00:45:43,000",
				"to": "00:45:45,000"
			},
			"offsets": {
				"from": 2743000,
				"to": 2745000
			},
			"text": " So the length is going to be nine characters."
		},
		{
			"timestamps": {
				"from": "00:45:45,000",
				"to": "00:45:52,000"
			},
			"offsets": {
				"from": 2745000,
				"to": 2752000
			},
			"text": " And then here we have padded over to the left the string."
		},
		{
			"timestamps": {
				"from": "00:45:52,000",
				"to": "00:45:53,000"
			},
			"offsets": {
				"from": 2752000,
				"to": 2753000
			},
			"text": " Next we have the symbol."
		},
		{
			"timestamps": {
				"from": "00:45:53,000",
				"to": "00:45:57,000"
			},
			"offsets": {
				"from": 2753000,
				"to": 2757000
			},
			"text": " That's going to just be \"yule\", \"yule\", all caps."
		},
		{
			"timestamps": {
				"from": "00:45:57,000",
				"to": "00:46:04,000"
			},
			"offsets": {
				"from": 2757000,
				"to": 2764000
			},
			"text": " And so here we can see the length is three, and these are the three characters for that string."
		},
		{
			"timestamps": {
				"from": "00:46:04,000",
				"to": "00:46:10,000"
			},
			"offsets": {
				"from": 2764000,
				"to": 2770000
			},
			"text": " After this, I went ahead and hashed the selectors for two custom areas that we're defining here."
		},
		{
			"timestamps": {
				"from": "00:46:10,000",
				"to": "00:46:14,000"
			},
			"offsets": {
				"from": 2770000,
				"to": 2774000
			},
			"text": " One is going to be insufficient balance, and the other is going to be insufficient allowance."
		},
		{
			"timestamps": {
				"from": "00:46:14,000",
				"to": "00:46:19,000"
			},
			"offsets": {
				"from": 2774000,
				"to": 2779000
			},
			"text": " And though insufficient allowance, we're actually going to pass an address of the owner and the"
		},
		{
			"timestamps": {
				"from": "00:46:19,000",
				"to": "00:46:26,000"
			},
			"offsets": {
				"from": 2779000,
				"to": 2786000
			},
			"text": " owner and the owner are going to be able to get a little bit more information."
		},
		{
			"timestamps": {
				"from": "00:46:26,000",
				"to": "00:46:32,000"
			},
			"offsets": {
				"from": 2786000,
				"to": 2792000
			},
			"text": " So we're going to go ahead and put this in here, and this is going to give better error messages"
		},
		{
			"timestamps": {
				"from": "00:46:32,000",
				"to": "00:46:34,000"
			},
			"offsets": {
				"from": 2792000,
				"to": 2794000
			},
			"text": " for client libraries and for users."
		},
		{
			"timestamps": {
				"from": "00:46:34,000",
				"to": "00:46:41,000"
			},
			"offsets": {
				"from": 2794000,
				"to": 2801000
			},
			"text": " So hopping into this, first thing we're going to do is we're going to define the name function."
		},
		{
			"timestamps": {
				"from": "00:46:41,000",
				"to": "00:46:43,000"
			},
			"offsets": {
				"from": 2801000,
				"to": 2803000
			},
			"text": " Now we're going to make this pure."
		},
		{
			"timestamps": {
				"from": "00:46:43,000",
				"to": "00:46:45,000"
			},
			"offsets": {
				"from": 2803000,
				"to": 2805000
			},
			"text": " We're not storing anything in storage."
		},
		{
			"timestamps": {
				"from": "00:46:45,000",
				"to": "00:46:52,000"
			},
			"offsets": {
				"from": 2805000,
				"to": 2812000
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "00:46:52,000",
				"to": "00:47:01,000"
			},
			"offsets": {
				"from": 2812000,
				"to": 2821000
			},
			"text": " Now what we're going to do, if we remember the standard for storing strings and memory,"
		},
		{
			"timestamps": {
				"from": "00:47:01,000",
				"to": "00:47:07,000"
			},
			"offsets": {
				"from": 2821000,
				"to": 2827000
			},
			"text": " first is going to be the pointer, then the next slot is going to be the length, and then the slot"
		},
		{
			"timestamps": {
				"from": "00:47:07,000",
				"to": "00:47:09,000"
			},
			"offsets": {
				"from": 2827000,
				"to": 2829000
			},
			"text": " after that is going to be the actual data itself."
		},
		{
			"timestamps": {
				"from": "00:47:09,000",
				"to": "00:47:16,000"
			},
			"offsets": {
				"from": 2829000,
				"to": 2836000
			},
			"text": " So we're going to do three memory writes, and then we're going to return from that."
		},
		{
			"timestamps": {
				"from": "00:47:16,000",
				"to": "00:47:19,000"
			},
			"offsets": {
				"from": 2836000,
				"to": 2839000
			},
			"text": " So first we're going to m-store at slot zero."
		},
		{
			"timestamps": {
				"from": "00:47:19,000",
				"to": "00:47:25,000"
			},
			"offsets": {
				"from": 2839000,
				"to": 2845000
			},
			"text": " We're going to store OX20, and that's where the actual data is going to be."
		},
		{
			"timestamps": {
				"from": "00:47:25,000",
				"to": "00:47:30,000"
			},
			"offsets": {
				"from": 2845000,
				"to": 2850000
			},
			"text": " It's going to be a 32 byte offset."
		},
		{
			"timestamps": {
				"from": "00:47:30,000",
				"to": "00:47:38,000"
			},
			"offsets": {
				"from": 2850000,
				"to": 2858000
			},
			"text": " Next, we're going to store, oh, nope, hold on, safety, memory pointer."
		},
		{
			"timestamps": {
				"from": "00:47:38,000",
				"to": "00:47:45,000"
			},
			"offsets": {
				"from": 2858000,
				"to": 2865000
			},
			"text": " We want to load from memory."
		},
		{
			"timestamps": {
				"from": "00:47:45,000",
				"to": "00:47:47,000"
			},
			"offsets": {
				"from": 2865000,
				"to": 2867000
			},
			"text": " So we load that."
		},
		{
			"timestamps": {
				"from": "00:47:47,000",
				"to": "00:47:50,000"
			},
			"offsets": {
				"from": 2867000,
				"to": 2870000
			},
			"text": " Now, this actually should be fine in this case, like we know exactly where it is because nothing's"
		},
		{
			"timestamps": {
				"from": "00:47:50,000",
				"to": "00:47:55,000"
			},
			"offsets": {
				"from": 2870000,
				"to": 2875000
			},
			"text": " been written in the memory, but it is good practice as often as possible to use this free memory pointer."
		},
		{
			"timestamps": {
				"from": "00:47:55,000",
				"to": "00:48:04,000"
			},
			"offsets": {
				"from": 2875000,
				"to": 2884000
			},
			"text": " So we're going to load from OX40."
		},
		{
			"timestamps": {
				"from": "00:48:04,000",
				"to": "00:48:09,000"
			},
			"offsets": {
				"from": 2884000,
				"to": 2889000
			},
			"text": " Sure, yeah, so let's say, so I mean if you just start writing to the zero slot,"
		},
		{
			"timestamps": {
				"from": "00:48:09,000",
				"to": "00:48:14,000"
			},
			"offsets": {
				"from": 2889000,
				"to": 2894000
			},
			"text": " and in this case, we're going to occupy three slots, that's going to take slot zero, OX20, and OX40."
		},
		{
			"timestamps": {
				"from": "00:48:14,000",
				"to": "00:48:17,000"
			},
			"offsets": {
				"from": 2894000,
				"to": 2897000
			},
			"text": " So it's actually going to overwrite the free memory pointer."
		},
		{
			"timestamps": {
				"from": "00:48:17,000",
				"to": "00:48:21,000"
			},
			"offsets": {
				"from": 2897000,
				"to": 2901000
			},
			"text": " Now in this case, we're actually returning from assembly, so we are safe here."
		},
		{
			"timestamps": {
				"from": "00:48:21,000",
				"to": "00:48:26,000"
			},
			"offsets": {
				"from": 2901000,
				"to": 2906000
			},
			"text": " But the problem is, if we're doing some assembly, let's say within a function and maybe there's stuff"
		},
		{
			"timestamps": {
				"from": "00:48:26,000",
				"to": "00:48:31,000"
			},
			"offsets": {
				"from": 2906000,
				"to": 2911000
			},
			"text": " that's happening after that, Solidity is going to trust that whatever value is in OX40 is the right value."
		},
		{
			"timestamps": {
				"from": "00:48:31,000",
				"to": "00:48:35,000"
			},
			"offsets": {
				"from": 2911000,
				"to": 2915000
			},
			"text": " So if we overwrite this to something strange, in this case, you know, it would be the string"
		},
		{
			"timestamps": {
				"from": "00:48:35,000",
				"to": "00:48:38,000"
			},
			"offsets": {
				"from": 2915000,
				"to": 2918000
			},
			"text": " padded over the left, which is actually technically a massive number."
		},
		{
			"timestamps": {
				"from": "00:48:38,000",
				"to": "00:48:43,000"
			},
			"offsets": {
				"from": 2918000,
				"to": 2923000
			},
			"text": " This would actually consume a massive amount of gas and realistically probably revert."
		},
		{
			"timestamps": {
				"from": "00:48:43,000",
				"to": "00:48:51,000"
			},
			"offsets": {
				"from": 2923000,
				"to": 2931000
			},
			"text": " But yeah, so basically, as much as possible, we want to use, yeah, basically load whatever is at OX40."
		},
		{
			"timestamps": {
				"from": "00:48:51,000",
				"to": "00:48:56,000"
			},
			"offsets": {
				"from": 2931000,
				"to": 2936000
			},
			"text": " That's going to point, normally it starts at OX80, so that's after the four reserve slots."
		},
		{
			"timestamps": {
				"from": "00:48:56,000",
				"to": "00:49:00,000"
			},
			"offsets": {
				"from": 2936000,
				"to": 2940000
			},
			"text": " But again, for the sake of keeping it safe, we're going to do it like this."
		},
		{
			"timestamps": {
				"from": "00:49:00,000",
				"to": "00:49:08,000"
			},
			"offsets": {
				"from": 2940000,
				"to": 2948000
			},
			"text": " So we mStore at the mem pointer, we're going to store the length, sorry, not the length, the OX20 pointer."
		},
		{
			"timestamps": {
				"from": "00:49:08,000",
				"to": "00:49:17,000"
			},
			"offsets": {
				"from": 2948000,
				"to": 2957000
			},
			"text": " After this, we're going to store 32 bytes later, we're going to store the actual length."
		},
		{
			"timestamps": {
				"from": "00:49:17,000",
				"to": "00:49:24,000"
			},
			"offsets": {
				"from": 2957000,
				"to": 2964000
			},
			"text": " So we're going to add the mem pointer and OX20, so we're increasing, you know, by a single word size,"
		},
		{
			"timestamps": {
				"from": "00:49:24,000",
				"to": "00:49:33,000"
			},
			"offsets": {
				"from": 2964000,
				"to": 2973000
			},
			"text": " we're going to store the name length."
		},
		{
			"timestamps": {
				"from": "00:49:33,000",
				"to": "00:49:42,000"
			},
			"offsets": {
				"from": 2973000,
				"to": 2982000
			},
			"text": " Next, we're going to store at an OX40 byte offset."
		},
		{
			"timestamps": {
				"from": "00:49:42,000",
				"to": "00:49:49,000"
			},
			"offsets": {
				"from": 2982000,
				"to": 2989000
			},
			"text": " So this is actually an offset from this value itself."
		},
		{
			"timestamps": {
				"from": "00:49:49,000",
				"to": "00:50:08,000"
			},
			"offsets": {
				"from": 2989000,
				"to": 3008000
			},
			"text": " So yeah, so the OX20 offset is just pointing to the actual length itself."
		},
		{
			"timestamps": {
				"from": "00:50:08,000",
				"to": "00:50:20,000"
			},
			"offsets": {
				"from": 3008000,
				"to": 3020000
			},
			"text": " So we stored the pointer, restoring the length, and now finally we're actually going to store the data."
		},
		{
			"timestamps": {
				"from": "00:50:20,000",
				"to": "00:50:24,000"
			},
			"offsets": {
				"from": 3020000,
				"to": 3024000
			},
			"text": " And so what memory should look like right now is starting at the free memory pointer."
		},
		{
			"timestamps": {
				"from": "00:50:24,000",
				"to": "00:50:28,000"
			},
			"offsets": {
				"from": 3024000,
				"to": 3028000
			},
			"text": " We have the string pointer, the string length, and then the actual string."
		},
		{
			"timestamps": {
				"from": "00:50:28,000",
				"to": "00:50:33,000"
			},
			"offsets": {
				"from": 3028000,
				"to": 3033000
			},
			"text": " And so this is going to occupy three slots, which is OX60."
		},
		{
			"timestamps": {
				"from": "00:50:33,000",
				"to": "00:50:44,000"
			},
			"offsets": {
				"from": 3033000,
				"to": 3044000
			},
			"text": " So what we can do is return, starting at the mem pointer, we can return OX60 bytes."
		},
		{
			"timestamps": {
				"from": "00:50:44,000",
				"to": "00:50:46,000"
			},
			"offsets": {
				"from": 3044000,
				"to": 3046000
			},
			"text": " So very quickly we're going to compile this."
		},
		{
			"timestamps": {
				"from": "00:50:46,000",
				"to": "00:50:50,000"
			},
			"offsets": {
				"from": 3046000,
				"to": 3050000
			},
			"text": " I'm on Solidity 0.8.17."
		},
		{
			"timestamps": {
				"from": "00:50:50,000",
				"to": "00:50:56,000"
			},
			"offsets": {
				"from": 3050000,
				"to": 3056000
			},
			"text": " We'll check to the Compilers of 0.8.17."
		},
		{
			"timestamps": {
				"from": "00:50:56,000",
				"to": "00:50:59,000"
			},
			"offsets": {
				"from": 3056000,
				"to": 3059000
			},
			"text": " Everything's all good."
		},
		{
			"timestamps": {
				"from": "00:50:59,000",
				"to": "00:51:03,000"
			},
			"offsets": {
				"from": 3059000,
				"to": 3063000
			},
			"text": " So now we're just going to deploy this to a local virtual machine."
		},
		{
			"timestamps": {
				"from": "00:51:03,000",
				"to": "00:51:05,000"
			},
			"offsets": {
				"from": 3063000,
				"to": 3065000
			},
			"text": " And here we have the name function."
		},
		{
			"timestamps": {
				"from": "00:51:05,000",
				"to": "00:51:14,000"
			},
			"offsets": {
				"from": 3065000,
				"to": 3074000
			},
			"text": " Whenever we hit it, it's going to return Yule token for us."
		},
		{
			"timestamps": {
				"from": "00:51:14,000",
				"to": "00:51:16,000"
			},
			"offsets": {
				"from": 3074000,
				"to": 3076000
			},
			"text": " All right, so next we have the symbol function."
		},
		{
			"timestamps": {
				"from": "00:51:16,000",
				"to": "00:51:18,000"
			},
			"offsets": {
				"from": 3076000,
				"to": 3078000
			},
			"text": " It's going to do basically the same thing."
		},
		{
			"timestamps": {
				"from": "00:51:18,000",
				"to": "00:51:28,000"
			},
			"offsets": {
				"from": 3078000,
				"to": 3088000
			},
			"text": " The only difference being we need to store the symbol length and the symbol data."
		},
		{
			"timestamps": {
				"from": "00:51:28,000",
				"to": "00:51:44,000"
			},
			"offsets": {
				"from": 3088000,
				"to": 3104000
			},
			"text": " So first we load our mem pointer."
		},
		{
			"timestamps": {
				"from": "00:51:44,000",
				"to": "00:51:56,000"
			},
			"offsets": {
				"from": 3104000,
				"to": 3116000
			},
			"text": " Then we store in memory at the mem pointer, the string pointer, and an offset of OX20."
		},
		{
			"timestamps": {
				"from": "00:51:56,000",
				"to": "00:52:11,000"
			},
			"offsets": {
				"from": 3116000,
				"to": 3131000
			},
			"text": " We'll store the symbol length and add an offset of OX40."
		},
		{
			"timestamps": {
				"from": "00:52:11,000",
				"to": "00:52:14,000"
			},
			"offsets": {
				"from": 3131000,
				"to": 3134000
			},
			"text": " Or we'll store the symbol data."
		},
		{
			"timestamps": {
				"from": "00:52:14,000",
				"to": "00:52:15,000"
			},
			"offsets": {
				"from": 3134000,
				"to": 3135000
			},
			"text": " And then same thing as before."
		},
		{
			"timestamps": {
				"from": "00:52:15,000",
				"to": "00:52:18,000"
			},
			"offsets": {
				"from": 3135000,
				"to": 3138000
			},
			"text": " It occupies the same number of slots because everything is padded."
		},
		{
			"timestamps": {
				"from": "00:52:18,000",
				"to": "00:52:23,000"
			},
			"offsets": {
				"from": 3138000,
				"to": 3143000
			},
			"text": " We'll return mem pointer OX60."
		},
		{
			"timestamps": {
				"from": "00:52:23,000",
				"to": "00:52:27,000"
			},
			"offsets": {
				"from": 3143000,
				"to": 3147000
			},
			"text": " Now note in this case we're actually not incrementing the free memory pointer."
		},
		{
			"timestamps": {
				"from": "00:52:27,000",
				"to": "00:52:30,000"
			},
			"offsets": {
				"from": 3147000,
				"to": 3150000
			},
			"text": " And that's because we actually are returning from the assembly itself."
		},
		{
			"timestamps": {
				"from": "00:52:30,000",
				"to": "00:52:35,000"
			},
			"offsets": {
				"from": 3150000,
				"to": 3155000
			},
			"text": " If we were to break out and continue doing things, we would actually want to actually store"
		},
		{
			"timestamps": {
				"from": "00:52:35,000",
				"to": "00:52:37,000"
			},
			"offsets": {
				"from": 3155000,
				"to": 3157000
			},
			"text": " what the new free memory pointer is."
		},
		{
			"timestamps": {
				"from": "00:52:37,000",
				"to": "00:52:44,000"
			},
			"offsets": {
				"from": 3157000,
				"to": 3164000
			},
			"text": " In this case we would increment it by OX60."
		},
		{
			"timestamps": {
				"from": "00:52:44,000",
				"to": "00:52:52,000"
			},
			"offsets": {
				"from": 3164000,
				"to": 3172000
			},
			"text": " Next up we're going to do decimals."
		},
		{
			"timestamps": {
				"from": "00:52:52,000",
				"to": "00:52:58,000"
			},
			"offsets": {
				"from": 3172000,
				"to": 3178000
			},
			"text": " It's going to return a UN8."
		},
		{
			"timestamps": {
				"from": "00:52:58,000",
				"to": "00:53:05,000"
			},
			"offsets": {
				"from": 3178000,
				"to": 3185000
			},
			"text": " So first, now in this case we're actually not occupying very much memory at all."
		},
		{
			"timestamps": {
				"from": "00:53:05,000",
				"to": "00:53:06,000"
			},
			"offsets": {
				"from": 3185000,
				"to": 3186000
			},
			"text": " We're actually only occupying a single slot."
		},
		{
			"timestamps": {
				"from": "00:53:06,000",
				"to": "00:53:09,000"
			},
			"offsets": {
				"from": 3186000,
				"to": 3189000
			},
			"text": " So we can't actually just write to the very first slot."
		},
		{
			"timestamps": {
				"from": "00:53:09,000",
				"to": "00:53:13,000"
			},
			"offsets": {
				"from": 3189000,
				"to": 3193000
			},
			"text": " It's mostly whenever you need the right three or more slots that you want to actually do"
		},
		{
			"timestamps": {
				"from": "00:53:13,000",
				"to": "00:53:14,000"
			},
			"offsets": {
				"from": 3193000,
				"to": 3194000
			},
			"text": " it at the memory pointer."
		},
		{
			"timestamps": {
				"from": "00:53:14,000",
				"to": "00:53:18,000"
			},
			"offsets": {
				"from": 3194000,
				"to": 3198000
			},
			"text": " In this case we're going to do a little bit of a hack there to keep that in the lowest"
		},
		{
			"timestamps": {
				"from": "00:53:18,000",
				"to": "00:53:19,000"
			},
			"offsets": {
				"from": 3198000,
				"to": 3199000
			},
			"text": " slot."
		},
		{
			"timestamps": {
				"from": "00:53:19,000",
				"to": "00:53:28,000"
			},
			"offsets": {
				"from": 3199000,
				"to": 3208000
			},
			"text": " At zero, the number 18 because we're not bad people and use six as decimals."
		},
		{
			"timestamps": {
				"from": "00:53:28,000",
				"to": "00:53:33,000"
			},
			"offsets": {
				"from": 3208000,
				"to": 3213000
			},
			"text": " And then from there we're going to return from slot zero in memory."
		},
		{
			"timestamps": {
				"from": "00:53:33,000",
				"to": "00:53:35,000"
			},
			"offsets": {
				"from": 3213000,
				"to": 3215000
			},
			"text": " We're going to return OX20."
		},
		{
			"timestamps": {
				"from": "00:53:35,000",
				"to": "00:53:38,000"
			},
			"offsets": {
				"from": 3215000,
				"to": 3218000
			},
			"text": " Even though it's a UN8 it's stored at the rightmost bytes so we need to return that"
		},
		{
			"timestamps": {
				"from": "00:53:38,000",
				"to": "00:53:46,000"
			},
			"offsets": {
				"from": 3218000,
				"to": 3226000
			},
			"text": " full 32 byte word."
		},
		{
			"timestamps": {
				"from": "00:53:46,000",
				"to": "00:53:55,000"
			},
			"offsets": {
				"from": 3226000,
				"to": 3235000
			},
			"text": " All right, now that we're done with all of that basic boilerplate stuff, let's go ahead"
		},
		{
			"timestamps": {
				"from": "00:53:55,000",
				"to": "00:53:56,000"
			},
			"offsets": {
				"from": 3235000,
				"to": 3236000
			},
			"text": " and set up a mapping."
		},
		{
			"timestamps": {
				"from": "00:53:56,000",
				"to": "00:54:06,000"
			},
			"offsets": {
				"from": 3236000,
				"to": 3246000
			},
			"text": " This is going to be mapping an address to UN256."
		},
		{
			"timestamps": {
				"from": "00:54:06,000",
				"to": "00:54:10,000"
			},
			"offsets": {
				"from": 3246000,
				"to": 3250000
			},
			"text": " We're going to make this internal in this case because I want us to actually do it in"
		},
		{
			"timestamps": {
				"from": "00:54:10,000",
				"to": "00:54:12,000"
			},
			"offsets": {
				"from": 3250000,
				"to": 3252000
			},
			"text": " assembly and see exactly what's happening."
		},
		{
			"timestamps": {
				"from": "00:54:12,000",
				"to": "00:54:17,600"
			},
			"offsets": {
				"from": 3252000,
				"to": 3257600
			},
			"text": " Obviously we can just make this public and make it a lot easier but we'll say internal"
		},
		{
			"timestamps": {
				"from": "00:54:17,600",
				"to": "00:54:21,600"
			},
			"offsets": {
				"from": 3257600,
				"to": 3261600
			},
			"text": " underscore balances."
		},
		{
			"timestamps": {
				"from": "00:54:21,600",
				"to": "00:54:25,760"
			},
			"offsets": {
				"from": 3261600,
				"to": 3265760
			},
			"text": " Next storage slot we're going to need after that is going to be the allowances."
		},
		{
			"timestamps": {
				"from": "00:54:25,760",
				"to": "00:54:38,000"
			},
			"offsets": {
				"from": 3265760,
				"to": 3278000
			},
			"text": " So we're going to map an address to a nested mapping which maps an address to a UN256."
		},
		{
			"timestamps": {
				"from": "00:54:38,000",
				"to": "00:54:54,000"
			},
			"offsets": {
				"from": 3278000,
				"to": 3294000
			},
			"text": " I'm just going to comment here what this is actually mapping to."
		},
		{
			"timestamps": {
				"from": "00:54:54,000",
				"to": "00:54:56,000"
			},
			"offsets": {
				"from": 3294000,
				"to": 3296000
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "00:54:56,000",
				"to": "00:55:01,000"
			},
			"offsets": {
				"from": 3296000,
				"to": 3301000
			},
			"text": " All right, so next we're going to do the balance of function."
		},
		{
			"timestamps": {
				"from": "00:55:01,000",
				"to": "00:55:04,000"
			},
			"offsets": {
				"from": 3301000,
				"to": 3304000
			},
			"text": " It's going to take an address."
		},
		{
			"timestamps": {
				"from": "00:55:04,000",
				"to": "00:55:10,000"
			},
			"offsets": {
				"from": 3304000,
				"to": 3310000
			},
			"text": " We're not going to name this variable because we're going to manually load it from call"
		},
		{
			"timestamps": {
				"from": "00:55:10,000",
				"to": "00:55:14,000"
			},
			"offsets": {
				"from": 3310000,
				"to": 3314000
			},
			"text": " data so we can see how call data is working but it is going to take an address."
		},
		{
			"timestamps": {
				"from": "00:55:14,000",
				"to": "00:55:19,000"
			},
			"offsets": {
				"from": 3314000,
				"to": 3319000
			},
			"text": " It's going to be a public view function because we are going to read from state and it's going"
		},
		{
			"timestamps": {
				"from": "00:55:19,000",
				"to": "00:55:26,000"
			},
			"offsets": {
				"from": 3319000,
				"to": 3326000
			},
			"text": " to return a UN256."
		},
		{
			"timestamps": {
				"from": "00:55:26,000",
				"to": "00:55:36,000"
			},
			"offsets": {
				"from": 3326000,
				"to": 3336000
			},
			"text": " All right, quick time check."
		},
		{
			"timestamps": {
				"from": "00:55:36,000",
				"to": "00:55:37,000"
			},
			"offsets": {
				"from": 3336000,
				"to": 3337000
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "00:55:37,000",
				"to": "00:55:39,000"
			},
			"offsets": {
				"from": 3337000,
				"to": 3339000
			},
			"text": " Okay, so this is where it's going to get weird."
		},
		{
			"timestamps": {
				"from": "00:55:39,000",
				"to": "00:55:44,700"
			},
			"offsets": {
				"from": 3339000,
				"to": 3344700
			},
			"text": " Remember we're mapping an address to a balance and per the standard what we need to do is"
		},
		{
			"timestamps": {
				"from": "00:55:44,700",
				"to": "00:55:50,240"
			},
			"offsets": {
				"from": 3344700,
				"to": 3350240
			},
			"text": " we need to hash the address and then the slot and remember or a slot and storage in this"
		},
		{
			"timestamps": {
				"from": "00:55:50,240",
				"to": "00:55:54,640"
			},
			"offsets": {
				"from": 3350240,
				"to": 3354640
			},
			"text": " case at zero so we're going to pad an address and then we're going to put zero and then"
		},
		{
			"timestamps": {
				"from": "00:55:54,640",
				"to": "00:55:58,560"
			},
			"offsets": {
				"from": 3354640,
				"to": 3358560
			},
			"text": " we're going to hash it but the hashing function actually reads from memory so we're going"
		},
		{
			"timestamps": {
				"from": "00:55:58,560",
				"to": "00:56:03,000"
			},
			"offsets": {
				"from": 3358560,
				"to": 3363000
			},
			"text": " to use the memory to do this."
		},
		{
			"timestamps": {
				"from": "00:56:03,000",
				"to": "00:56:06,160"
			},
			"offsets": {
				"from": 3363000,
				"to": 3366160
			},
			"text": " The first thing we do is we're going to imstore actually no."
		},
		{
			"timestamps": {
				"from": "00:56:06,160",
				"to": "00:56:08,720"
			},
			"offsets": {
				"from": 3366160,
				"to": 3368720
			},
			"text": " We're going to assign this variable for readability."
		},
		{
			"timestamps": {
				"from": "00:56:08,720",
				"to": "00:56:11,280"
			},
			"offsets": {
				"from": 3368720,
				"to": 3371280
			},
			"text": " We'll optimize a little bit in a moment."
		},
		{
			"timestamps": {
				"from": "00:56:11,280",
				"to": "00:56:17,840"
			},
			"offsets": {
				"from": 3371280,
				"to": 3377840
			},
			"text": " So first thing we want to do is get the let's say account and so what we need to do is"
		},
		{
			"timestamps": {
				"from": "00:56:17,840",
				"to": "00:56:19,680"
			},
			"offsets": {
				"from": 3377840,
				"to": 3379680
			},
			"text": " load the address from call data."
		},
		{
			"timestamps": {
				"from": "00:56:19,680",
				"to": "00:56:24,080"
			},
			"offsets": {
				"from": 3379680,
				"to": 3384080
			},
			"text": " Now if you remember the first four bytes are the function selector and then the next 32"
		},
		{
			"timestamps": {
				"from": "00:56:24,080",
				"to": "00:56:28,840"
			},
			"offsets": {
				"from": 3384080,
				"to": 3388840
			},
			"text": " bytes are the first argument in this case are address."
		},
		{
			"timestamps": {
				"from": "00:56:28,840",
				"to": "00:56:34,720"
			},
			"offsets": {
				"from": 3388840,
				"to": 3394720
			},
			"text": " So what we'll do is we'll call data load and we're going to do that at an index of four."
		},
		{
			"timestamps": {
				"from": "00:56:34,720",
				"to": "00:56:43,560"
			},
			"offsets": {
				"from": 3394720,
				"to": 3403560
			},
			"text": " So it's going to take the next 32 bytes and put that into the account variable."
		},
		{
			"timestamps": {
				"from": "00:56:43,560",
				"to": "00:56:48,320"
			},
			"offsets": {
				"from": 3403560,
				"to": 3408320
			},
			"text": " Next we're going to store this in memory."
		},
		{
			"timestamps": {
				"from": "00:56:48,320",
				"to": "00:56:57,400"
			},
			"offsets": {
				"from": 3408320,
				"to": 3417400
			},
			"text": " At slot zero we're going to store account and then at slot OX20 or at the 32 byte slot"
		},
		{
			"timestamps": {
				"from": "00:56:57,400",
				"to": "00:57:06,520"
			},
			"offsets": {
				"from": 3417400,
				"to": 3426520
			},
			"text": " we're going to store just zero."
		},
		{
			"timestamps": {
				"from": "00:57:06,520",
				"to": "00:57:13,840"
			},
			"offsets": {
				"from": 3426520,
				"to": 3433840
			},
			"text": " Next we're going to get the hash which is going to be Kekak256 and what this is going"
		},
		{
			"timestamps": {
				"from": "00:57:13,840",
				"to": "00:57:18,120"
			},
			"offsets": {
				"from": 3433840,
				"to": 3438120
			},
			"text": " to take in assembly, in high level solidity what this is going to take is like a string"
		},
		{
			"timestamps": {
				"from": "00:57:18,120",
				"to": "00:57:24,200"
			},
			"offsets": {
				"from": 3438120,
				"to": 3444200
			},
			"text": " or bytes but in low level you will it's actually going to take a pointer in memory and the size"
		},
		{
			"timestamps": {
				"from": "00:57:24,200",
				"to": "00:57:25,200"
			},
			"offsets": {
				"from": 3444200,
				"to": 3445200
			},
			"text": " in memory."
		},
		{
			"timestamps": {
				"from": "00:57:25,200",
				"to": "00:57:29,440"
			},
			"offsets": {
				"from": 3445200,
				"to": 3449440
			},
			"text": " So in this case we're going to start at slot zero and we're going to consume two different"
		},
		{
			"timestamps": {
				"from": "00:57:29,440",
				"to": "00:57:30,440"
			},
			"offsets": {
				"from": 3449440,
				"to": 3450440
			},
			"text": " slots."
		},
		{
			"timestamps": {
				"from": "00:57:30,440",
				"to": "00:57:34,440"
			},
			"offsets": {
				"from": 3450440,
				"to": 3454440
			},
			"text": " So OX40."
		},
		{
			"timestamps": {
				"from": "00:57:34,440",
				"to": "00:57:38,200"
			},
			"offsets": {
				"from": 3454440,
				"to": 3458200
			},
			"text": " So this should actually be the key to this person's balance."
		},
		{
			"timestamps": {
				"from": "00:57:38,200",
				"to": "00:57:48,080"
			},
			"offsets": {
				"from": 3458200,
				"to": 3468080
			},
			"text": " So what we can do from here is we'll say balance and that's going to be S."
		},
		{
			"timestamps": {
				"from": "00:57:48,080",
				"to": "00:57:52,640"
			},
			"offsets": {
				"from": 3468080,
				"to": 3472640
			},
			"text": " Load, oh no, balance is a reserved word, hold on."
		},
		{
			"timestamps": {
				"from": "00:57:52,640",
				"to": "00:57:58,200"
			},
			"offsets": {
				"from": 3472640,
				"to": 3478200
			},
			"text": " There we go, account balance is going to be S load at that hash, right?"
		},
		{
			"timestamps": {
				"from": "00:57:58,200",
				"to": "00:58:04,560"
			},
			"offsets": {
				"from": 3478200,
				"to": 3484560
			},
			"text": " So we're loading from persistent storage this slot."
		},
		{
			"timestamps": {
				"from": "00:58:04,560",
				"to": "00:58:07,880"
			},
			"offsets": {
				"from": 3484560,
				"to": 3487880
			},
			"text": " Next thing we want to do from here is we want to M store."
		},
		{
			"timestamps": {
				"from": "00:58:07,880",
				"to": "00:58:12,960"
			},
			"offsets": {
				"from": 3487880,
				"to": 3492960
			},
			"text": " Now at this point we're not actually going to need what's in slot zero and slot, well"
		},
		{
			"timestamps": {
				"from": "00:58:12,960",
				"to": "00:58:18,840"
			},
			"offsets": {
				"from": 3492960,
				"to": 3498840
			},
			"text": " slot one, like zero and 32 here so we can actually just overwrite that with the account"
		},
		{
			"timestamps": {
				"from": "00:58:18,840",
				"to": "00:58:21,000"
			},
			"offsets": {
				"from": 3498840,
				"to": 3501000
			},
			"text": " balance."
		},
		{
			"timestamps": {
				"from": "00:58:21,000",
				"to": "00:58:28,520"
			},
			"offsets": {
				"from": 3501000,
				"to": 3508520
			},
			"text": " Okay, and then finally we're going to return."
		},
		{
			"timestamps": {
				"from": "00:58:28,520",
				"to": "00:58:35,400"
			},
			"offsets": {
				"from": 3508520,
				"to": 3515400
			},
			"text": " And so that's going to start at slot zero and it's going to be OX20 bytes."
		},
		{
			"timestamps": {
				"from": "00:58:35,400",
				"to": "00:58:38,680"
			},
			"offsets": {
				"from": 3515400,
				"to": 3518680
			},
			"text": " So this is kind of like a more verbose version so we can see exactly what's going on with"
		},
		{
			"timestamps": {
				"from": "00:58:38,680",
				"to": "00:58:45,440"
			},
			"offsets": {
				"from": 3518680,
				"to": 3525440
			},
			"text": " variable names and things like that but let's go ahead and do just a little bit of optimization"
		},
		{
			"timestamps": {
				"from": "00:58:45,440",
				"to": "00:58:49,200"
			},
			"offsets": {
				"from": 3525440,
				"to": 3529200
			},
			"text": " and seeing like what you might actually see in production, right?"
		},
		{
			"timestamps": {
				"from": "00:58:49,200",
				"to": "00:58:54,280"
			},
			"offsets": {
				"from": 3529200,
				"to": 3534280
			},
			"text": " So account is only used once and that's loading here from call data so we can actually just"
		},
		{
			"timestamps": {
				"from": "00:58:54,280",
				"to": "00:58:57,320"
			},
			"offsets": {
				"from": 3534280,
				"to": 3537320
			},
			"text": " remove that and put that here, right?"
		},
		{
			"timestamps": {
				"from": "00:58:57,320",
				"to": "00:59:03,960"
			},
			"offsets": {
				"from": 3537320,
				"to": 3543960
			},
			"text": " So we're storing in memory at slot zero whatever's in call data starting at four."
		},
		{
			"timestamps": {
				"from": "00:59:03,960",
				"to": "00:59:09,200"
			},
			"offsets": {
				"from": 3543960,
				"to": 3549200
			},
			"text": " Here we have this hash instead of declaring a new variable we can actually just load that"
		},
		{
			"timestamps": {
				"from": "00:59:09,200",
				"to": "00:59:14,400"
			},
			"offsets": {
				"from": 3549200,
				"to": 3554400
			},
			"text": " straight from storage and then instead of declaring an account balance variable we can"
		},
		{
			"timestamps": {
				"from": "00:59:14,400",
				"to": "00:59:18,280"
			},
			"offsets": {
				"from": 3554400,
				"to": 3558280
			},
			"text": " actually just replace that as well."
		},
		{
			"timestamps": {
				"from": "00:59:18,280",
				"to": "00:59:24,360"
			},
			"offsets": {
				"from": 3558280,
				"to": 3564360
			},
			"text": " Right, and so now it should be functionally exactly the same."
		},
		{
			"timestamps": {
				"from": "00:59:24,360",
				"to": "00:59:28,400"
			},
			"offsets": {
				"from": 3564360,
				"to": 3568400
			},
			"text": " We're storing the first argument in memory at slot zero."
		},
		{
			"timestamps": {
				"from": "00:59:28,400",
				"to": "00:59:33,800"
			},
			"offsets": {
				"from": 3568400,
				"to": 3573800
			},
			"text": " We're storing the slot number in slot OX20 and then we're hashing that, loading from"
		},
		{
			"timestamps": {
				"from": "00:59:33,800",
				"to": "00:59:38,280"
			},
			"offsets": {
				"from": 3573800,
				"to": 3578280
			},
			"text": " storage, putting that value in the memory and then returning from memory."
		},
		{
			"timestamps": {
				"from": "00:59:38,280",
				"to": "00:59:46,400"
			},
			"offsets": {
				"from": 3578280,
				"to": 3586400
			},
			"text": " And so this is the full process of what a balance of function is doing."
		},
		{
			"timestamps": {
				"from": "00:59:46,400",
				"to": "00:59:52,680"
			},
			"offsets": {
				"from": 3586400,
				"to": 3592680
			},
			"text": " That's the length of memory so far so these two slots."
		},
		{
			"timestamps": {
				"from": "00:59:52,680",
				"to": "00:59:53,680"
			},
			"offsets": {
				"from": 3592680,
				"to": 3593680
			},
			"text": " Sorry?"
		},
		{
			"timestamps": {
				"from": "00:59:53,680",
				"to": "00:59:56,680"
			},
			"offsets": {
				"from": 3593680,
				"to": 3596680
			},
			"text": " Exactly, yeah."
		},
		{
			"timestamps": {
				"from": "00:59:56,680",
				"to": "01:00:11,800"
			},
			"offsets": {
				"from": 3596680,
				"to": 3611800
			},
			"text": " Exactly, because it's in the first storage slot we can do that at zero."
		},
		{
			"timestamps": {
				"from": "01:00:11,800",
				"to": "01:00:15,720"
			},
			"offsets": {
				"from": 3611800,
				"to": 3615720
			},
			"text": " Actually something else we can do here since this is already implicitly zero."
		},
		{
			"timestamps": {
				"from": "01:00:15,720",
				"to": "01:00:19,840"
			},
			"offsets": {
				"from": 3615720,
				"to": 3619840
			},
			"text": " We could remove that but again for the sake of safety we'll just leave that for now."
		},
		{
			"timestamps": {
				"from": "01:00:19,840",
				"to": "01:00:26,840"
			},
			"offsets": {
				"from": 3619840,
				"to": 3626840
			},
			"text": " I think I just think that the percent weight on the empty will not be the error."
		},
		{
			"timestamps": {
				"from": "01:00:26,840",
				"to": "01:00:32,760"
			},
			"offsets": {
				"from": 3626840,
				"to": 3632760
			},
			"text": " What then will return zero?"
		},
		{
			"timestamps": {
				"from": "01:00:32,760",
				"to": "01:00:34,240"
			},
			"offsets": {
				"from": 3632760,
				"to": 3634240
			},
			"text": " Return with like just parentheses."
		},
		{
			"timestamps": {
				"from": "01:00:34,240",
				"to": "01:00:36,240"
			},
			"offsets": {
				"from": 3634240,
				"to": 3636240
			},
			"text": " Yeah, it's pretty good."
		},
		{
			"timestamps": {
				"from": "01:00:36,240",
				"to": "01:00:40,760"
			},
			"offsets": {
				"from": 3636240,
				"to": 3640760
			},
			"text": " Right, so in this case it's actually going to give us an error because it actually is"
		},
		{
			"timestamps": {
				"from": "01:00:40,760",
				"to": "01:00:53,760"
			},
			"offsets": {
				"from": 3640760,
				"to": 3653760
			},
			"text": " the whole percent weight."
		},
		{
			"timestamps": {
				"from": "01:00:53,760",
				"to": "01:00:54,760"
			},
			"offsets": {
				"from": 3653760,
				"to": 3654760
			},
			"text": " Oh right, right."
		},
		{
			"timestamps": {
				"from": "01:00:54,760",
				"to": "01:00:57,880"
			},
			"offsets": {
				"from": 3654760,
				"to": 3657880
			},
			"text": " So basically if we don't say like return down here."
		},
		{
			"timestamps": {
				"from": "01:00:57,880",
				"to": "01:00:59,400"
			},
			"offsets": {
				"from": 3657880,
				"to": 3659400
			},
			"text": " No return enter."
		},
		{
			"timestamps": {
				"from": "01:00:59,400",
				"to": "01:01:02,400"
			},
			"offsets": {
				"from": 3659400,
				"to": 3662400
			},
			"text": " Oh, yeah, so in that case it's actually not going to return anything."
		},
		{
			"timestamps": {
				"from": "01:01:02,400",
				"to": "01:01:05,840"
			},
			"offsets": {
				"from": 3662400,
				"to": 3665840
			},
			"text": " If we did this it would actually load from call data load from storage, put it in the"
		},
		{
			"timestamps": {
				"from": "01:01:05,840",
				"to": "01:01:08,840"
			},
			"offsets": {
				"from": 3665840,
				"to": 3668840
			},
			"text": " memory but it wouldn't actually return anything to the caller."
		},
		{
			"timestamps": {
				"from": "01:01:08,840",
				"to": "01:01:21,000"
			},
			"offsets": {
				"from": 3668840,
				"to": 3681000
			},
			"text": " Right, so I mean you can see here it gives us compiler warning."
		},
		{
			"timestamps": {
				"from": "01:01:21,000",
				"to": "01:01:27,360"
			},
			"offsets": {
				"from": 3681000,
				"to": 3687360
			},
			"text": " Let's see unnamed return variable can remain assigned."
		},
		{
			"timestamps": {
				"from": "01:01:27,360",
				"to": "01:01:28,360"
			},
			"offsets": {
				"from": 3687360,
				"to": 3688360
			},
			"text": " That's actually a weird one."
		},
		{
			"timestamps": {
				"from": "01:01:28,360",
				"to": "01:01:29,360"
			},
			"offsets": {
				"from": 3688360,
				"to": 3689360
			},
			"text": " Let's try that."
		},
		{
			"timestamps": {
				"from": "01:01:29,360",
				"to": "01:01:34,200"
			},
			"offsets": {
				"from": 3689360,
				"to": 3694200
			},
			"text": " It's going to give us a warning but we're going to try it anyway."
		},
		{
			"timestamps": {
				"from": "01:01:34,200",
				"to": "01:01:38,360"
			},
			"offsets": {
				"from": 3694200,
				"to": 3698360
			},
			"text": " By the way this is using remix is a fantastic way to try out these little edge cases if"
		},
		{
			"timestamps": {
				"from": "01:01:38,360",
				"to": "01:01:39,960"
			},
			"offsets": {
				"from": 3698360,
				"to": 3699960
			},
			"text": " you're ever not certain how something works."
		},
		{
			"timestamps": {
				"from": "01:01:39,960",
				"to": "01:01:43,800"
			},
			"offsets": {
				"from": 3699960,
				"to": 3703800
			},
			"text": " This has been an invaluable resource to try these things out."
		},
		{
			"timestamps": {
				"from": "01:01:43,800",
				"to": "01:01:46,520"
			},
			"offsets": {
				"from": 3703800,
				"to": 3706520
			},
			"text": " So let's go ahead and give it a try."
		},
		{
			"timestamps": {
				"from": "01:01:46,520",
				"to": "01:01:49,360"
			},
			"offsets": {
				"from": 3706520,
				"to": 3709360
			},
			"text": " Balance of we're going to need an address."
		},
		{
			"timestamps": {
				"from": "01:01:49,360",
				"to": "01:01:53,320"
			},
			"offsets": {
				"from": 3709360,
				"to": 3713320
			},
			"text": " We'll just copy this one."
		},
		{
			"timestamps": {
				"from": "01:01:53,320",
				"to": "01:01:54,320"
			},
			"offsets": {
				"from": 3713320,
				"to": 3714320
			},
			"text": " It returns a zero."
		},
		{
			"timestamps": {
				"from": "01:01:54,320",
				"to": "01:01:58,440"
			},
			"offsets": {
				"from": 3714320,
				"to": 3718440
			},
			"text": " Okay, so I guess in that case if you don't explicitly return then solidity will actually"
		},
		{
			"timestamps": {
				"from": "01:01:58,440",
				"to": "01:02:02,520"
			},
			"offsets": {
				"from": 3718440,
				"to": 3722520
			},
			"text": " insert a return statement for you and it's just going to return nothing at all."
		},
		{
			"timestamps": {
				"from": "01:02:02,520",
				"to": "01:02:08,320"
			},
			"offsets": {
				"from": 3722520,
				"to": 3728320
			},
			"text": " Okay, I'm just going to press the button I want to load from the call data on the one"
		},
		{
			"timestamps": {
				"from": "01:02:08,320",
				"to": "01:02:09,320"
			},
			"offsets": {
				"from": 3728320,
				"to": 3729320
			},
			"text": " byte."
		},
		{
			"timestamps": {
				"from": "01:02:09,320",
				"to": "01:02:17,480"
			},
			"offsets": {
				"from": 3729320,
				"to": 3737480
			},
			"text": " Call data only loads using call data loaded only loads 32 bytes."
		},
		{
			"timestamps": {
				"from": "01:02:17,480",
				"to": "01:02:20,520"
			},
			"offsets": {
				"from": 3737480,
				"to": 3740520
			},
			"text": " So in the case of like for example if you need to figure out what the function selector"
		},
		{
			"timestamps": {
				"from": "01:02:20,520",
				"to": "01:02:22,960"
			},
			"offsets": {
				"from": 3740520,
				"to": 3742960
			},
			"text": " is right you can only grab the full 32 bytes."
		},
		{
			"timestamps": {
				"from": "01:02:22,960",
				"to": "01:02:25,000"
			},
			"offsets": {
				"from": 3742960,
				"to": 3745000
			},
			"text": " So in this case you'd actually use bit shifting."
		},
		{
			"timestamps": {
				"from": "01:02:25,000",
				"to": "01:02:29,120"
			},
			"offsets": {
				"from": 3745000,
				"to": 3749120
			},
			"text": " You would want to there's those four leftmost bytes you want to shift them all the way to"
		},
		{
			"timestamps": {
				"from": "01:02:29,120",
				"to": "01:02:30,120"
			},
			"offsets": {
				"from": 3749120,
				"to": 3750120
			},
			"text": " the right."
		},
		{
			"timestamps": {
				"from": "01:02:30,120",
				"to": "01:02:54,640"
			},
			"offsets": {
				"from": 3750120,
				"to": 3774640
			},
			"text": " Right, it does not wrap around the low BZeros."
		},
		{
			"timestamps": {
				"from": "01:02:54,640",
				"to": "01:02:58,200"
			},
			"offsets": {
				"from": 3774640,
				"to": 3778200
			},
			"text": " So just adding this alone shouldn't add any extra off codes."
		},
		{
			"timestamps": {
				"from": "01:02:58,200",
				"to": "01:03:01,480"
			},
			"offsets": {
				"from": 3778200,
				"to": 3781480
			},
			"text": " This is just like an abstraction for the high level language."
		},
		{
			"timestamps": {
				"from": "01:03:01,480",
				"to": "01:03:06,840"
			},
			"offsets": {
				"from": 3781480,
				"to": 3786840
			},
			"text": " But I believe we could actually just access it like this."
		},
		{
			"timestamps": {
				"from": "01:03:06,840",
				"to": "01:03:10,840"
			},
			"offsets": {
				"from": 3786840,
				"to": 3790840
			},
			"text": " So this and what we were doing a moment ago is actually functionally identical."
		},
		{
			"timestamps": {
				"from": "01:03:10,840",
				"to": "01:03:15,280"
			},
			"offsets": {
				"from": 3790840,
				"to": 3795280
			},
			"text": " So either we can manually load from call data or if we name the argument we can actually"
		},
		{
			"timestamps": {
				"from": "01:03:15,280",
				"to": "01:03:23,320"
			},
			"offsets": {
				"from": 3795280,
				"to": 3803320
			},
			"text": " just put that in there."
		},
		{
			"timestamps": {
				"from": "01:03:23,320",
				"to": "01:03:28,080"
			},
			"offsets": {
				"from": 3803320,
				"to": 3808080
			},
			"text": " Right, yeah, because the function selector will be the same and then if it's not actually"
		},
		{
			"timestamps": {
				"from": "01:03:28,080",
				"to": "01:03:29,880"
			},
			"offsets": {
				"from": 3808080,
				"to": 3809880
			},
			"text": " used it shouldn't consume."
		},
		{
			"timestamps": {
				"from": "01:03:29,880",
				"to": "01:03:33,080"
			},
			"offsets": {
				"from": 3809880,
				"to": 3813080
			},
			"text": " And I mean of course it'll there will still be a place in the call data for it."
		},
		{
			"timestamps": {
				"from": "01:03:33,080",
				"to": "01:03:37,480"
			},
			"offsets": {
				"from": 3813080,
				"to": 3817480
			},
			"text": " But if we're not explicitly using that variable then you know there's no point in which that's"
		},
		{
			"timestamps": {
				"from": "01:03:37,480",
				"to": "01:03:39,960"
			},
			"offsets": {
				"from": 3817480,
				"to": 3819960
			},
			"text": " going to be loaded from call data by salinity."
		},
		{
			"timestamps": {
				"from": "01:03:39,960",
				"to": "01:04:02,680"
			},
			"offsets": {
				"from": 3819960,
				"to": 3842680
			},
			"text": " No, so what this actually does is so the mem pointer tells you obviously where in memory"
		},
		{
			"timestamps": {
				"from": "01:04:02,680",
				"to": "01:04:05,880"
			},
			"offsets": {
				"from": 3842680,
				"to": 3845880
			},
			"text": " to get the value and then oh X 60 is a link."
		},
		{
			"timestamps": {
				"from": "01:04:05,880",
				"to": "01:04:10,120"
			},
			"offsets": {
				"from": 3845880,
				"to": 3850120
			},
			"text": " What this is actually going to do in this contract it's going to finish executing is"
		},
		{
			"timestamps": {
				"from": "01:04:10,120",
				"to": "01:04:16,000"
			},
			"offsets": {
				"from": 3850120,
				"to": 3856000
			},
			"text": " going to stop executing and then whoever called this contract whether it's any OA or another"
		},
		{
			"timestamps": {
				"from": "01:04:16,000",
				"to": "01:04:18,320"
			},
			"offsets": {
				"from": 3856000,
				"to": 3858320
			},
			"text": " contract it'll actually return that data."
		},
		{
			"timestamps": {
				"from": "01:04:18,320",
				"to": "01:04:23,400"
			},
			"offsets": {
				"from": 3858320,
				"to": 3863400
			},
			"text": " So it'll take that chunk of memory in this case 60 bytes or oh X 60 bytes from free"
		},
		{
			"timestamps": {
				"from": "01:04:23,400",
				"to": "01:04:28,400"
			},
			"offsets": {
				"from": 3863400,
				"to": 3868400
			},
			"text": " mem pointer and that's actually going to be returned into it's going to be returned"
		},
		{
			"timestamps": {
				"from": "01:04:28,400",
				"to": "01:04:32,600"
			},
			"offsets": {
				"from": 3868400,
				"to": 3872600
			},
			"text": " either to the client library like ethers or web through JS or it's going to be returned"
		},
		{
			"timestamps": {
				"from": "01:04:32,600",
				"to": "01:04:34,880"
			},
			"offsets": {
				"from": 3872600,
				"to": 3874880
			},
			"text": " to another contract and could it as a string."
		},
		{
			"timestamps": {
				"from": "01:04:34,880",
				"to": "01:04:43,840"
			},
			"offsets": {
				"from": 3874880,
				"to": 3883840
			},
			"text": " Right, right as soon as we call return it's actually going to stop execution from there."
		},
		{
			"timestamps": {
				"from": "01:04:43,840",
				"to": "01:04:49,920"
			},
			"offsets": {
				"from": 3883840,
				"to": 3889920
			},
			"text": " So even if we put anything after that as long as it always returns we'll never go there."
		},
		{
			"timestamps": {
				"from": "01:04:49,920",
				"to": "01:04:57,760"
			},
			"offsets": {
				"from": 3889920,
				"to": 3897760
			},
			"text": " So each function has its own memory stack when you execute for data across like if you go"
		},
		{
			"timestamps": {
				"from": "01:04:57,760",
				"to": "01:05:06,240"
			},
			"offsets": {
				"from": 3897760,
				"to": 3906240
			},
			"text": " in base, you might go see both, they share the same memory or like a integer."
		},
		{
			"timestamps": {
				"from": "01:05:06,240",
				"to": "01:05:07,240"
			},
			"offsets": {
				"from": 3906240,
				"to": 3907240
			},
			"text": " Right great question."
		},
		{
			"timestamps": {
				"from": "01:05:07,240",
				"to": "01:05:12,880"
			},
			"offsets": {
				"from": 3907240,
				"to": 3912880
			},
			"text": " So anytime that you call a contract it's going to create what's called a context and so this"
		},
		{
			"timestamps": {
				"from": "01:05:12,880",
				"to": "01:05:17,720"
			},
			"offsets": {
				"from": 3912880,
				"to": 3917720
			},
			"text": " context is going to have a clean stack, a clean memory it's going to be able to access"
		},
		{
			"timestamps": {
				"from": "01:05:17,720",
				"to": "01:05:22,200"
			},
			"offsets": {
				"from": 3917720,
				"to": 3922200
			},
			"text": " the storage at whatever addresses there right and then other contextual information."
		},
		{
			"timestamps": {
				"from": "01:05:22,200",
				"to": "01:05:26,520"
			},
			"offsets": {
				"from": 3922200,
				"to": 3926520
			},
			"text": " So basically any time a function is called on this everything is a clean slate so it's"
		},
		{
			"timestamps": {
				"from": "01:05:26,520",
				"to": "01:05:29,840"
			},
			"offsets": {
				"from": 3926520,
				"to": 3929840
			},
			"text": " going to read and write from that same clean slate and then once the function finishes"
		},
		{
			"timestamps": {
				"from": "01:05:29,840",
				"to": "01:05:32,120"
			},
			"offsets": {
				"from": 3929840,
				"to": 3932120
			},
			"text": " it stops and the memory is gone."
		},
		{
			"timestamps": {
				"from": "01:05:32,120",
				"to": "01:05:37,600"
			},
			"offsets": {
				"from": 3932120,
				"to": 3937600
			},
			"text": " Right so in this case like they're technically writing to the same sort of same storage slots"
		},
		{
			"timestamps": {
				"from": "01:05:37,600",
				"to": "01:05:40,920"
			},
			"offsets": {
				"from": 3937600,
				"to": 3940920
			},
			"text": " but they're never executing at the same time so we don't have to worry about any kind of"
		},
		{
			"timestamps": {
				"from": "01:05:40,920",
				"to": "01:05:42,600"
			},
			"offsets": {
				"from": 3940920,
				"to": 3942600
			},
			"text": " like memory over writes or anything."
		},
		{
			"timestamps": {
				"from": "01:05:42,600",
				"to": "01:05:47,640"
			},
			"offsets": {
				"from": 3942600,
				"to": 3947640
			},
			"text": " What if it's an internal function shared right because it's in line like if you're"
		},
		{
			"timestamps": {
				"from": "01:05:47,640",
				"to": "01:05:51,480"
			},
			"offsets": {
				"from": 3947640,
				"to": 3951480
			},
			"text": " calling in the same contract and there's an option of that function."
		},
		{
			"timestamps": {
				"from": "01:05:51,480",
				"to": "01:05:56,480"
			},
			"offsets": {
				"from": 3951480,
				"to": 3956480
			},
			"text": " So if you call an internal yes so if you call an internal function actually at compile"
		},
		{
			"timestamps": {
				"from": "01:05:56,480",
				"to": "01:06:00,540"
			},
			"offsets": {
				"from": 3956480,
				"to": 3960540
			},
			"text": " time but this is a little bit confusing about solidity is that you have like public and"
		},
		{
			"timestamps": {
				"from": "01:06:00,540",
				"to": "01:06:02,540"
			},
			"offsets": {
				"from": 3960540,
				"to": 3962540
			},
			"text": " internal functions."
		},
		{
			"timestamps": {
				"from": "01:06:02,540",
				"to": "01:06:07,080"
			},
			"offsets": {
				"from": 3962540,
				"to": 3967080
			},
			"text": " Public functions explicitly you know take some information from the caller and then"
		},
		{
			"timestamps": {
				"from": "01:06:07,080",
				"to": "01:06:11,000"
			},
			"offsets": {
				"from": 3967080,
				"to": 3971000
			},
			"text": " it's going to return some information based on that whereas internal functions there's"
		},
		{
			"timestamps": {
				"from": "01:06:11,000",
				"to": "01:06:15,440"
			},
			"offsets": {
				"from": 3971000,
				"to": 3975440
			},
			"text": " actually what it does is it takes a number of items on the stack let's say your internal"
		},
		{
			"timestamps": {
				"from": "01:06:15,440",
				"to": "01:06:19,280"
			},
			"offsets": {
				"from": 3975440,
				"to": 3979280
			},
			"text": " function takes three arguments it's going to expect three values on the stack and then"
		},
		{
			"timestamps": {
				"from": "01:06:19,280",
				"to": "01:06:23,140"
			},
			"offsets": {
				"from": 3979280,
				"to": 3983140
			},
			"text": " it's going to operate on that and if it returns anything it's actually just leaving values"
		},
		{
			"timestamps": {
				"from": "01:06:23,140",
				"to": "01:06:24,140"
			},
			"offsets": {
				"from": 3983140,
				"to": 3984140
			},
			"text": " on the stack."
		},
		{
			"timestamps": {
				"from": "01:06:24,140",
				"to": "01:06:29,140"
			},
			"offsets": {
				"from": 3984140,
				"to": 3989140
			},
			"text": " So inside of internal functions whenever you return from that it's not actually using"
		},
		{
			"timestamps": {
				"from": "01:06:29,140",
				"to": "01:06:33,100"
			},
			"offsets": {
				"from": 3989140,
				"to": 3993100
			},
			"text": " the return instruction it's actually just leaving it on the stack and jumping back to"
		},
		{
			"timestamps": {
				"from": "01:06:33,100",
				"to": "01:06:35,340"
			},
			"offsets": {
				"from": 3993100,
				"to": 3995340
			},
			"text": " where it came from."
		},
		{
			"timestamps": {
				"from": "01:06:35,340",
				"to": "01:06:57,460"
			},
			"offsets": {
				"from": 3995340,
				"to": 4017460
			},
			"text": " Right so the first thing that happens during the execution of a contract at least"
		},
		{
			"timestamps": {
				"from": "01:06:57,460",
				"to": "01:07:03,960"
			},
			"offsets": {
				"from": 4017460,
				"to": 4023960
			},
			"text": " per solidity is we're actually going to store a free memory pointer so like the first two"
		},
		{
			"timestamps": {
				"from": "01:07:03,960",
				"to": "01:07:08,140"
			},
			"offsets": {
				"from": 4023960,
				"to": 4028140
			},
			"text": " slots you know zero and OX20 these are always going to start at a zero OX40 is going to"
		},
		{
			"timestamps": {
				"from": "01:07:08,140",
				"to": "01:07:12,860"
			},
			"offsets": {
				"from": 4028140,
				"to": 4032860
			},
			"text": " have that free memory pointer and then the next slide after that of course is the zero"
		},
		{
			"timestamps": {
				"from": "01:07:12,860",
				"to": "01:07:15,020"
			},
			"offsets": {
				"from": 4032860,
				"to": 4035020
			},
			"text": " slot so we don't putting anything there."
		},
		{
			"timestamps": {
				"from": "01:07:15,020",
				"to": "01:07:25,140"
			},
			"offsets": {
				"from": 4035020,
				"to": 4045140
			},
			"text": " We can actually take a look briefly if we compile this and we look at compilation details."
		},
		{
			"timestamps": {
				"from": "01:07:25,140",
				"to": "01:07:30,540"
			},
			"offsets": {
				"from": 4045140,
				"to": 4050540
			},
			"text": " So you'll notice the first few opcodes here we're going to push OX80 then we're going"
		},
		{
			"timestamps": {
				"from": "01:07:30,540",
				"to": "01:07:35,900"
			},
			"offsets": {
				"from": 4050540,
				"to": 4055900
			},
			"text": " to push OX40 and then we're going to M-Store and what that's doing is storing OX80 which"
		},
		{
			"timestamps": {
				"from": "01:07:35,900",
				"to": "01:07:40,060"
			},
			"offsets": {
				"from": 4055900,
				"to": 4060060
			},
			"text": " is the first free memory pointer we're storing that at slot OX40 and this is the first this"
		},
		{
			"timestamps": {
				"from": "01:07:40,060",
				"to": "01:07:45,260"
			},
			"offsets": {
				"from": 4060060,
				"to": 4065260
			},
			"text": " is actually like a big tell tell sign that a contract was written in solidity this always"
		},
		{
			"timestamps": {
				"from": "01:07:45,260",
				"to": "01:07:50,660"
			},
			"offsets": {
				"from": 4065260,
				"to": 4070660
			},
			"text": " happens first every solidity contract starts with you know 6080604052."
		},
		{
			"timestamps": {
				"from": "01:07:50,660",
				"to": "01:07:57,660"
			},
			"offsets": {
				"from": 4070660,
				"to": 4077660
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "01:07:57,660",
				"to": "01:08:04,660"
			},
			"offsets": {
				"from": 4077660,
				"to": 4084660
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "01:08:04,660",
				"to": "01:08:11,660"
			},
			"offsets": {
				"from": 4084660,
				"to": 4091660
			},
			"text": " So you mean like when you have multiple internal functions or you're going to have multiple"
		},
		{
			"timestamps": {
				"from": "01:08:11,660",
				"to": "01:08:40,380"
			},
			"offsets": {
				"from": 4091660,
				"to": 4120380
			},
			"text": " functions or right yeah exactly so what solidity actually does is those first two slots the"
		},
		{
			"timestamps": {
				"from": "01:08:40,380",
				"to": "01:08:44,600"
			},
			"offsets": {
				"from": 4120380,
				"to": 4124600
			},
			"text": " reason that they're kind of reserved is that's actually normally used as a sort of scratch"
		},
		{
			"timestamps": {
				"from": "01:08:44,600",
				"to": "01:08:48,660"
			},
			"offsets": {
				"from": 4124600,
				"to": 4128660
			},
			"text": " space for hashing so normally you're hashing two values together so that's where we'll"
		},
		{
			"timestamps": {
				"from": "01:08:48,660",
				"to": "01:08:56,300"
			},
			"offsets": {
				"from": 4128660,
				"to": 4136300
			},
			"text": " put that and then hash that together."
		},
		{
			"timestamps": {
				"from": "01:08:56,300",
				"to": "01:09:03,740"
			},
			"offsets": {
				"from": 4136300,
				"to": 4143740
			},
			"text": " [inaudible]"
		},
		{
			"timestamps": {
				"from": "01:09:03,740",
				"to": "01:09:08,780"
			},
			"offsets": {
				"from": 4143740,
				"to": 4148780
			},
			"text": " Right so per the standard of how strings are stored in memory it's always a pointer to"
		},
		{
			"timestamps": {
				"from": "01:09:08,780",
				"to": "01:09:13,340"
			},
			"offsets": {
				"from": 4148780,
				"to": 4153340
			},
			"text": " the string and then the length of the string and then the actual string itself."
		},
		{
			"timestamps": {
				"from": "01:09:13,340",
				"to": "01:09:17,460"
			},
			"offsets": {
				"from": 4153340,
				"to": 4157460
			},
			"text": " So in this case it's kind of a formality but it's really important to have that OX20"
		},
		{
			"timestamps": {
				"from": "01:09:17,460",
				"to": "01:09:24,860"
			},
			"offsets": {
				"from": 4157460,
				"to": 4164860
			},
			"text": " there because whenever we return it the client libraries expect it to be encoded as actually"
		},
		{
			"timestamps": {
				"from": "01:09:24,860",
				"to": "01:09:35,380"
			},
			"offsets": {
				"from": 4164860,
				"to": 4175380
			},
			"text": " no does that return that we're going to try it so let's call name and what we can do here"
		},
		{
			"timestamps": {
				"from": "01:09:35,380",
				"to": "01:09:38,660"
			},
			"offsets": {
				"from": 4175380,
				"to": 4178660
			},
			"text": " this is another great way to look through transactions and find things you might not"
		},
		{
			"timestamps": {
				"from": "01:09:38,660",
				"to": "01:09:40,820"
			},
			"offsets": {
				"from": 4178660,
				"to": 4180820
			},
			"text": " be sure about."
		},
		{
			"timestamps": {
				"from": "01:09:40,820",
				"to": "01:09:46,780"
			},
			"offsets": {
				"from": 4180820,
				"to": 4186780
			},
			"text": " Let's break this out and it's not going to let me make it bigger okay right so what"
		},
		{
			"timestamps": {
				"from": "01:09:46,780",
				"to": "01:09:55,060"
			},
			"offsets": {
				"from": 4186780,
				"to": 4195060
			},
			"text": " we'll do right here at the very end let's take a look so we have some memory laid out"
		},
		{
			"timestamps": {
				"from": "01:09:55,060",
				"to": "01:10:07,300"
			},
			"offsets": {
				"from": 4195060,
				"to": 4207300
			},
			"text": " here mostly zeros it looks like hold on let's step through this really quick."
		},
		{
			"timestamps": {
				"from": "01:10:07,300",
				"to": "01:10:18,460"
			},
			"offsets": {
				"from": 4207300,
				"to": 4218460
			},
			"text": " I really wish this would make me let me make it a little bit bigger here but so here's"
		},
		{
			"timestamps": {
				"from": "01:10:18,460",
				"to": "01:10:23,740"
			},
			"offsets": {
				"from": 4218460,
				"to": 4223740
			},
			"text": " the state of the stack right in this case we're going to push the free memory pointer"
		},
		{
			"timestamps": {
				"from": "01:10:23,740",
				"to": "01:10:28,980"
			},
			"offsets": {
				"from": 4223740,
				"to": 4228980
			},
			"text": " which is OX80 we're going to push the length which is OX60 and what that's going to do"
		},
		{
			"timestamps": {
				"from": "01:10:28,980",
				"to": "01:10:35,940"
			},
			"offsets": {
				"from": 4228980,
				"to": 4235940
			},
			"text": " is point to slot OX80 in memory which is going to be here and it's going to go for OX60"
		},
		{
			"timestamps": {
				"from": "01:10:35,940",
				"to": "01:10:43,460"
			},
			"offsets": {
				"from": 4235940,
				"to": 4243460
			},
			"text": " bytes so here's the first here's the second and then here is the third right so because"
		},
		{
			"timestamps": {
				"from": "01:10:43,460",
				"to": "01:10:46,620"
			},
			"offsets": {
				"from": 4243460,
				"to": 4246620
			},
			"text": " this actually gets returned with it client libraries are going to use this to actually"
		},
		{
			"timestamps": {
				"from": "01:10:46,620",
				"to": "01:10:51,900"
			},
			"offsets": {
				"from": 4246620,
				"to": 4251900
			},
			"text": " decode strings so if we actually didn't if we didn't return this properly it would actually"
		},
		{
			"timestamps": {
				"from": "01:10:51,900",
				"to": "01:10:54,420"
			},
			"offsets": {
				"from": 4251900,
				"to": 4254420
			},
			"text": " throw an error like it wouldn't know how to decode it would just give you a bunch of"
		},
		{
			"timestamps": {
				"from": "01:10:54,420",
				"to": "01:10:59,660"
			},
			"offsets": {
				"from": 4254420,
				"to": 4259660
			},
			"text": " bytes back right so in that case it is sort of a formality but it is important you know"
		},
		{
			"timestamps": {
				"from": "01:10:59,660",
				"to": "01:11:04,140"
			},
			"offsets": {
				"from": 4259660,
				"to": 4264140
			},
			"text": " to make sure that the client libraries know how to decode I think there was one more question"
		},
		{
			"timestamps": {
				"from": "01:11:04,140",
				"to": "01:11:05,140"
			},
			"offsets": {
				"from": 4264140,
				"to": 4265140
			},
			"text": " right."
		},
		{
			"timestamps": {
				"from": "01:11:05,140",
				"to": "01:11:25,500"
			},
			"offsets": {
				"from": 4265140,
				"to": 4285500
			},
			"text": " So you call it internally oh you mean like if I say like this dot name."
		},
		{
			"timestamps": {
				"from": "01:11:25,500",
				"to": "01:11:41,740"
			},
			"offsets": {
				"from": 4285500,
				"to": 4301740
			},
			"text": " Right so we wouldn't want to use the return instruction inside of an internal function"
		},
		{
			"timestamps": {
				"from": "01:11:41,740",
				"to": "01:11:46,020"
			},
			"offsets": {
				"from": 4301740,
				"to": 4306020
			},
			"text": " like if it's being called internally I mean you can use that but just know that that's"
		},
		{
			"timestamps": {
				"from": "01:11:46,020",
				"to": "01:11:49,900"
			},
			"offsets": {
				"from": 4306020,
				"to": 4309900
			},
			"text": " going to stop execution at that point which is not what you want right because that that"
		},
		{
			"timestamps": {
				"from": "01:11:49,900",
				"to": "01:11:53,900"
			},
			"offsets": {
				"from": 4309900,
				"to": 4313900
			},
			"text": " will actually return back to the caller so if you're trying to like return from an internal"
		},
		{
			"timestamps": {
				"from": "01:11:53,900",
				"to": "01:11:57,420"
			},
			"offsets": {
				"from": 4313900,
				"to": 4317420
			},
			"text": " function you're actually just you know jumping back to the main function and that's where"
		},
		{
			"timestamps": {
				"from": "01:11:57,420",
				"to": "01:12:02,540"
			},
			"offsets": {
				"from": 4317420,
				"to": 4322540
			},
			"text": " the actual return instruction is going to be."
		},
		{
			"timestamps": {
				"from": "01:12:02,540",
				"to": "01:12:09,980"
			},
			"offsets": {
				"from": 4322540,
				"to": 4329980
			},
			"text": " In the line 36, you can store 20."
		},
		{
			"timestamps": {
				"from": "01:12:09,980",
				"to": "01:12:12,780"
			},
			"offsets": {
				"from": 4329980,
				"to": 4332780
			},
			"text": " Yes that's an option."
		},
		{
			"timestamps": {
				"from": "01:12:12,780",
				"to": "01:12:13,780"
			},
			"offsets": {
				"from": 4332780,
				"to": 4333780
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:12:13,780",
				"to": "01:12:22,300"
			},
			"offsets": {
				"from": 4333780,
				"to": 4342300
			},
			"text": " Okay so if you store the data I don't know if there's 16 for example a caller."
		},
		{
			"timestamps": {
				"from": "01:12:22,300",
				"to": "01:12:32,940"
			},
			"offsets": {
				"from": 4342300,
				"to": 4352940
			},
			"text": " So what that actually is is it's it's OX 20 from that place in memory right so balance"
		},
		{
			"timestamps": {
				"from": "01:12:32,940",
				"to": "01:12:38,380"
			},
			"offsets": {
				"from": 4352940,
				"to": 4358380
			},
			"text": " let's go ahead and put that return back."
		},
		{
			"timestamps": {
				"from": "01:12:38,380",
				"to": "01:12:46,940"
			},
			"offsets": {
				"from": 4358380,
				"to": 4366940
			},
			"text": " Okay next we're going to do the transfer and this is where it's going to get weird."
		},
		{
			"timestamps": {
				"from": "01:12:46,940",
				"to": "01:12:50,340"
			},
			"offsets": {
				"from": 4366940,
				"to": 4370340
			},
			"text": " We're going to have basically some conditional logic in here."
		},
		{
			"timestamps": {
				"from": "01:12:50,340",
				"to": "01:12:57,780"
			},
			"offsets": {
				"from": 4370340,
				"to": 4377780
			},
			"text": " That's overflow and underflow checks only happen in Solidity 0.8 and after so basically"
		},
		{
			"timestamps": {
				"from": "01:12:57,780",
				"to": "01:13:02,060"
			},
			"offsets": {
				"from": 4377780,
				"to": 4382060
			},
			"text": " anything before that and then anything assembly is unchecked which means if somebody tries"
		},
		{
			"timestamps": {
				"from": "01:13:02,060",
				"to": "01:13:06,260"
			},
			"offsets": {
				"from": 4382060,
				"to": 4386260
			},
			"text": " to transfer out more than they actually have the EVM is not going to stop that from happening"
		},
		{
			"timestamps": {
				"from": "01:13:06,260",
				"to": "01:13:09,220"
			},
			"offsets": {
				"from": 4386260,
				"to": 4389220
			},
			"text": " it will actually underflow roll back over to the very top and then they're going to"
		},
		{
			"timestamps": {
				"from": "01:13:09,220",
				"to": "01:13:14,500"
			},
			"offsets": {
				"from": 4389220,
				"to": 4394500
			},
			"text": " have some obscenely massive amount of tokens so we want to make sure to check beforehand"
		},
		{
			"timestamps": {
				"from": "01:13:14,500",
				"to": "01:13:20,420"
			},
			"offsets": {
				"from": 4394500,
				"to": 4400420
			},
			"text": " that the sender has enough tokens before they transfer out."
		},
		{
			"timestamps": {
				"from": "01:13:20,420",
				"to": "01:13:27,860"
			},
			"offsets": {
				"from": 4400420,
				"to": 4407860
			},
			"text": " So for the standard it's going to be a non payable so we're actually just going to call"
		},
		{
			"timestamps": {
				"from": "01:13:27,860",
				"to": "01:13:34,220"
			},
			"offsets": {
				"from": 4407860,
				"to": 4414220
			},
			"text": " it public and it's going to return a Boolean."
		},
		{
			"timestamps": {
				"from": "01:13:34,220",
				"to": "01:13:41,060"
			},
			"offsets": {
				"from": 4414220,
				"to": 4421060
			},
			"text": " So first thing we want to do is load the caller's balance right so what we need to do is hash"
		},
		{
			"timestamps": {
				"from": "01:13:41,060",
				"to": "01:13:50,740"
			},
			"offsets": {
				"from": 4421060,
				"to": 4430740
			},
			"text": " that information that we did before so let's say let's no we're going to m store one more"
		},
		{
			"timestamps": {
				"from": "01:13:50,740",
				"to": "01:13:51,820"
			},
			"offsets": {
				"from": 4430740,
				"to": 4431820
			},
			"text": " time."
		},
		{
			"timestamps": {
				"from": "01:13:51,820",
				"to": "01:14:01,700"
			},
			"offsets": {
				"from": 4431820,
				"to": 4441700
			},
			"text": " So we're going to get the mem pointer by loading from memory from the mem pointer we're going"
		},
		{
			"timestamps": {
				"from": "01:14:01,700",
				"to": "01:14:04,540"
			},
			"offsets": {
				"from": 4441700,
				"to": 4444540
			},
			"text": " to store the caller's address."
		},
		{
			"timestamps": {
				"from": "01:14:04,540",
				"to": "01:14:16,180"
			},
			"offsets": {
				"from": 4444540,
				"to": 4456180
			},
			"text": " In this case we can get that by calling caller with parentheses at the next slot so mem pointer"
		},
		{
			"timestamps": {
				"from": "01:14:16,180",
				"to": "01:14:24,500"
			},
			"offsets": {
				"from": 4456180,
				"to": 4464500
			},
			"text": " plus OX20 we're going to store the balance slot which is actually going to be zero then"
		},
		{
			"timestamps": {
				"from": "01:14:24,500",
				"to": "01:14:35,900"
			},
			"offsets": {
				"from": 4464500,
				"to": 4475900
			},
			"text": " we're going to hash and let's say caller balance."
		},
		{
			"timestamps": {
				"from": "01:14:35,900",
				"to": "01:14:43,260"
			},
			"offsets": {
				"from": 4475900,
				"to": 4483260
			},
			"text": " So we hash these two starting at mem pointer with a size of OX40 and we're going to take"
		},
		{
			"timestamps": {
				"from": "01:14:43,260",
				"to": "01:14:48,900"
			},
			"offsets": {
				"from": 4483260,
				"to": 4488900
			},
			"text": " that hash and use it to load from storage."
		},
		{
			"timestamps": {
				"from": "01:14:48,900",
				"to": "01:14:53,500"
			},
			"offsets": {
				"from": 4488900,
				"to": 4493500
			},
			"text": " So now we want to check and make sure that the caller's balance is at least as big as"
		},
		{
			"timestamps": {
				"from": "01:14:53,500",
				"to": "01:14:54,500"
			},
			"offsets": {
				"from": 4493500,
				"to": 4494500
			},
			"text": " the amount."
		},
		{
			"timestamps": {
				"from": "01:14:54,500",
				"to": "01:14:57,500"
			},
			"offsets": {
				"from": 4494500,
				"to": 4497500
			},
			"text": " Now that we've done the call data loading we're actually just going to do this for the"
		},
		{
			"timestamps": {
				"from": "01:14:57,500",
				"to": "01:15:06,100"
			},
			"offsets": {
				"from": 4497500,
				"to": 4506100
			},
			"text": " sake of time we'll say value and receiver just to keep things succinct."
		},
		{
			"timestamps": {
				"from": "01:15:06,100",
				"to": "01:15:17,700"
			},
			"offsets": {
				"from": 4506100,
				"to": 4517700
			},
			"text": " So we want to check and say if less than, so if caller balance is less than the value"
		},
		{
			"timestamps": {
				"from": "01:15:17,700",
				"to": "01:15:28,420"
			},
			"offsets": {
				"from": 4517700,
				"to": 4528420
			},
			"text": " to transfer we're actually going to do some revert logic."
		},
		{
			"timestamps": {
				"from": "01:15:28,420",
				"to": "01:15:31,540"
			},
			"offsets": {
				"from": 4528420,
				"to": 4531540
			},
			"text": " So we're going to take insufficient balance selector and this actually isn't going to"
		},
		{
			"timestamps": {
				"from": "01:15:31,540",
				"to": "01:15:37,260"
			},
			"offsets": {
				"from": 4531540,
				"to": 4537260
			},
			"text": " take any argument so all we really need to do is actually just store this one value."
		},
		{
			"timestamps": {
				"from": "01:15:37,260",
				"to": "01:15:43,220"
			},
			"offsets": {
				"from": 4537260,
				"to": 4543220
			},
			"text": " Again, at this point we're reverting we're about to stop execution so we can basically"
		},
		{
			"timestamps": {
				"from": "01:15:43,220",
				"to": "01:15:49,260"
			},
			"offsets": {
				"from": 4543220,
				"to": 4549260
			},
			"text": " just write to the zero slot, this can't cause any harm."
		},
		{
			"timestamps": {
				"from": "01:15:49,260",
				"to": "01:15:52,740"
			},
			"offsets": {
				"from": 4549260,
				"to": 4552740
			},
			"text": " So mstore at zero the insufficient balance selector that's going to be that floor byte"
		},
		{
			"timestamps": {
				"from": "01:15:52,740",
				"to": "01:15:57,460"
			},
			"offsets": {
				"from": 4552740,
				"to": 4557460
			},
			"text": " selector padded to 32 bytes and then we're going to revert and revert actually functions"
		},
		{
			"timestamps": {
				"from": "01:15:57,460",
				"to": "01:16:00,980"
			},
			"offsets": {
				"from": 4557460,
				"to": 4560980
			},
			"text": " the same way as the return instruction so we're going to give it a pointer and a size"
		},
		{
			"timestamps": {
				"from": "01:16:00,980",
				"to": "01:16:02,620"
			},
			"offsets": {
				"from": 4560980,
				"to": 4562620
			},
			"text": " and memory."
		},
		{
			"timestamps": {
				"from": "01:16:02,620",
				"to": "01:16:06,460"
			},
			"offsets": {
				"from": 4562620,
				"to": 4566460
			},
			"text": " In this case we're doing the full OX20."
		},
		{
			"timestamps": {
				"from": "01:16:06,460",
				"to": "01:16:11,500"
			},
			"offsets": {
				"from": 4566460,
				"to": 4571500
			},
			"text": " I guess we could also just do OX04."
		},
		{
			"timestamps": {
				"from": "01:16:11,500",
				"to": "01:16:13,380"
			},
			"offsets": {
				"from": 4571500,
				"to": 4573380
			},
			"text": " And so that's going to revert with that."
		},
		{
			"timestamps": {
				"from": "01:16:13,380",
				"to": "01:16:16,460"
			},
			"offsets": {
				"from": 4573380,
				"to": 4576460
			},
			"text": " And this is good because whenever we revert with the selector client libraries are going"
		},
		{
			"timestamps": {
				"from": "01:16:16,460",
				"to": "01:16:21,420"
			},
			"offsets": {
				"from": 4576460,
				"to": 4581420
			},
			"text": " to have access to this ABI it's going to see that there is this error called insufficient"
		},
		{
			"timestamps": {
				"from": "01:16:21,420",
				"to": "01:16:26,500"
			},
			"offsets": {
				"from": 4581420,
				"to": 4586500
			},
			"text": " balance and that's the selector and then we can actually do some better error handling"
		},
		{
			"timestamps": {
				"from": "01:16:26,500",
				"to": "01:16:29,460"
			},
			"offsets": {
				"from": 4586500,
				"to": 4589460
			},
			"text": " on the client side."
		},
		{
			"timestamps": {
				"from": "01:16:29,460",
				"to": "01:16:32,420"
			},
			"offsets": {
				"from": 4589460,
				"to": 4592420
			},
			"text": " Sometimes you'll see people revert with zero zero and that actually just reverts with nothing"
		},
		{
			"timestamps": {
				"from": "01:16:32,420",
				"to": "01:16:36,780"
			},
			"offsets": {
				"from": 4592420,
				"to": 4596780
			},
			"text": " and obviously this isn't super helpful so as often as possible even though it does take"
		},
		{
			"timestamps": {
				"from": "01:16:36,780",
				"to": "01:16:41,860"
			},
			"offsets": {
				"from": 4596780,
				"to": 4601860
			},
			"text": " a long time and it is annoying make sure to store proper error information."
		},
		{
			"timestamps": {
				"from": "01:16:41,860",
				"to": "01:16:47,700"
			},
			"offsets": {
				"from": 4601860,
				"to": 4607700
			},
			"text": " Okay so from here we know that the caller balance like if we're at this point in the"
		},
		{
			"timestamps": {
				"from": "01:16:47,700",
				"to": "01:16:52,380"
			},
			"offsets": {
				"from": 4607700,
				"to": 4612380
			},
			"text": " code we know the caller balance is sufficient so what we'll do is we'll deduct that, we'll"
		},
		{
			"timestamps": {
				"from": "01:16:52,380",
				"to": "01:17:03,740"
			},
			"offsets": {
				"from": 4612380,
				"to": 4623740
			},
			"text": " deduct the value from the caller balance and then we'll add it to the receiver's balance."
		},
		{
			"timestamps": {
				"from": "01:17:03,740",
				"to": "01:17:14,780"
			},
			"offsets": {
				"from": 4623740,
				"to": 4634780
			},
			"text": " So one moment."
		},
		{
			"timestamps": {
				"from": "01:17:14,780",
				"to": "01:17:23,260"
			},
			"offsets": {
				"from": 4634780,
				"to": 4643260
			},
			"text": " Perfect, just double checking."
		},
		{
			"timestamps": {
				"from": "01:17:23,260",
				"to": "01:17:33,100"
			},
			"offsets": {
				"from": 4643260,
				"to": 4653100
			},
			"text": " Okay so we add these two together and then we'll say let's say receiver balance."
		},
		{
			"timestamps": {
				"from": "01:17:33,100",
				"to": "01:17:39,820"
			},
			"offsets": {
				"from": 4653100,
				"to": 4659820
			},
			"text": " Right, oh right right vice versa, thank you."
		},
		{
			"timestamps": {
				"from": "01:17:39,820",
				"to": "01:17:40,820"
			},
			"offsets": {
				"from": 4659820,
				"to": 4660820
			},
			"text": " Sub."
		},
		{
			"timestamps": {
				"from": "01:17:40,820",
				"to": "01:17:51,380"
			},
			"offsets": {
				"from": 4660820,
				"to": 4671380
			},
			"text": " Okay so next we want to get the receiver balance and so we'll do this in a similar way."
		},
		{
			"timestamps": {
				"from": "01:17:51,380",
				"to": "01:17:54,380"
			},
			"offsets": {
				"from": 4671380,
				"to": 4674380
			},
			"text": " New caller balance, thank you."
		},
		{
			"timestamps": {
				"from": "01:17:54,380",
				"to": "01:17:58,980"
			},
			"offsets": {
				"from": 4674380,
				"to": 4678980
			},
			"text": " Sweet, okay so to get the receiver balance we're going to do the same thing except we're"
		},
		{
			"timestamps": {
				"from": "01:17:58,980",
				"to": "01:18:06,980"
			},
			"offsets": {
				"from": 4678980,
				"to": 4686980
			},
			"text": " actually going to use the receiver as opposed to the caller."
		},
		{
			"timestamps": {
				"from": "01:18:06,980",
				"to": "01:18:09,900"
			},
			"offsets": {
				"from": 4686980,
				"to": 4689900
			},
			"text": " Again we're not going to need these two slots of memory anymore so we can actually just"
		},
		{
			"timestamps": {
				"from": "01:18:09,900",
				"to": "01:18:17,700"
			},
			"offsets": {
				"from": 4689900,
				"to": 4697700
			},
			"text": " overwrite these."
		},
		{
			"timestamps": {
				"from": "01:18:17,700",
				"to": "01:18:28,540"
			},
			"offsets": {
				"from": 4697700,
				"to": 4708540
			},
			"text": " Okay and so like so."
		},
		{
			"timestamps": {
				"from": "01:18:28,540",
				"to": "01:18:33,860"
			},
			"offsets": {
				"from": 4708540,
				"to": 4713860
			},
			"text": " So the receiver balance is going to be what we load from storage which is going to be"
		},
		{
			"timestamps": {
				"from": "01:18:33,860",
				"to": "01:18:38,100"
			},
			"offsets": {
				"from": 4713860,
				"to": 4718100
			},
			"text": " the hash starting at mem pointer and of size OX40."
		},
		{
			"timestamps": {
				"from": "01:18:38,100",
				"to": "01:18:43,660"
			},
			"offsets": {
				"from": 4718100,
				"to": 4723660
			},
			"text": " So this is where we get the receiver balance."
		},
		{
			"timestamps": {
				"from": "01:18:43,660",
				"to": "01:18:52,780"
			},
			"offsets": {
				"from": 4723660,
				"to": 4732780
			},
			"text": " Actually let's do this."
		},
		{
			"timestamps": {
				"from": "01:18:52,780",
				"to": "01:18:58,500"
			},
			"offsets": {
				"from": 4732780,
				"to": 4738500
			},
			"text": " Color balance slots because we're going to need this later."
		},
		{
			"timestamps": {
				"from": "01:18:58,500",
				"to": "01:19:02,940"
			},
			"offsets": {
				"from": 4738500,
				"to": 4742940
			},
			"text": " So let's take this and we're basically just going to create a variable with this."
		},
		{
			"timestamps": {
				"from": "01:19:02,940",
				"to": "01:19:10,060"
			},
			"offsets": {
				"from": 4742940,
				"to": 4750060
			},
			"text": " Same thing."
		},
		{
			"timestamps": {
				"from": "01:19:10,060",
				"to": "01:19:22,340"
			},
			"offsets": {
				"from": 4750060,
				"to": 4762340
			},
			"text": " Great, so functionally identical but now we can actually access the slots a little bit"
		},
		{
			"timestamps": {
				"from": "01:19:22,340",
				"to": "01:19:28,100"
			},
			"offsets": {
				"from": 4762340,
				"to": 4768100
			},
			"text": " later whenever we need it."
		},
		{
			"timestamps": {
				"from": "01:19:28,100",
				"to": "01:19:30,580"
			},
			"offsets": {
				"from": 4768100,
				"to": 4770580
			},
			"text": " So now we want to get the new receiver balance."
		},
		{
			"timestamps": {
				"from": "01:19:30,580",
				"to": "01:19:33,420"
			},
			"offsets": {
				"from": 4770580,
				"to": 4773420
			},
			"text": " Again we'll optimize a little bit later."
		},
		{
			"timestamps": {
				"from": "01:19:33,420",
				"to": "01:19:41,220"
			},
			"offsets": {
				"from": 4773420,
				"to": 4781220
			},
			"text": " New receiver balance is going to be sub."
		},
		{
			"timestamps": {
				"from": "01:19:41,220",
				"to": "01:19:46,180"
			},
			"offsets": {
				"from": 4781220,
				"to": 4786180
			},
			"text": " Sorry?"
		},
		{
			"timestamps": {
				"from": "01:19:46,180",
				"to": "01:19:47,820"
			},
			"offsets": {
				"from": 4786180,
				"to": 4787820
			},
			"text": " Thank you."
		},
		{
			"timestamps": {
				"from": "01:19:47,820",
				"to": "01:19:48,820"
			},
			"offsets": {
				"from": 4787820,
				"to": 4788820
			},
			"text": " There we go."
		},
		{
			"timestamps": {
				"from": "01:19:48,820",
				"to": "01:19:50,660"
			},
			"offsets": {
				"from": 4788820,
				"to": 4790660
			},
			"text": " Okay so subtract from caller balance."
		},
		{
			"timestamps": {
				"from": "01:19:50,660",
				"to": "01:19:54,420"
			},
			"offsets": {
				"from": 4790660,
				"to": 4794420
			},
			"text": " Add to receiver balance the value."
		},
		{
			"timestamps": {
				"from": "01:19:54,420",
				"to": "01:19:57,100"
			},
			"offsets": {
				"from": 4794420,
				"to": 4797100
			},
			"text": " Okay so now we have our new balance to set up."
		},
		{
			"timestamps": {
				"from": "01:19:57,100",
				"to": "01:20:01,220"
			},
			"offsets": {
				"from": 4797100,
				"to": 4801220
			},
			"text": " We've done the addition, the subtraction so now we just need to store these back into"
		},
		{
			"timestamps": {
				"from": "01:20:01,220",
				"to": "01:20:02,380"
			},
			"offsets": {
				"from": 4801220,
				"to": 4802380
			},
			"text": " storage."
		},
		{
			"timestamps": {
				"from": "01:20:02,380",
				"to": "01:20:03,380"
			},
			"offsets": {
				"from": 4802380,
				"to": 4803380
			},
			"text": " So we'll say S store."
		},
		{
			"timestamps": {
				"from": "01:20:03,380",
				"to": "01:20:04,700"
			},
			"offsets": {
				"from": 4803380,
				"to": 4804700
			},
			"text": " We need the key in the value."
		},
		{
			"timestamps": {
				"from": "01:20:04,700",
				"to": "01:20:09,980"
			},
			"offsets": {
				"from": 4804700,
				"to": 4809980
			},
			"text": " In this case the key is going to be the caller balance slot and the value is going to be"
		},
		{
			"timestamps": {
				"from": "01:20:09,980",
				"to": "01:20:17,340"
			},
			"offsets": {
				"from": 4809980,
				"to": 4817340
			},
			"text": " new caller balance."
		},
		{
			"timestamps": {
				"from": "01:20:17,340",
				"to": "01:20:29,860"
			},
			"offsets": {
				"from": 4817340,
				"to": 4829860
			},
			"text": " Same thing, receiver balance slot."
		},
		{
			"timestamps": {
				"from": "01:20:29,860",
				"to": "01:20:42,340"
			},
			"offsets": {
				"from": 4829860,
				"to": 4842340
			},
			"text": " New receiver balance."
		},
		{
			"timestamps": {
				"from": "01:20:42,340",
				"to": "01:20:43,340"
			},
			"offsets": {
				"from": 4842340,
				"to": 4843340
			},
			"text": " All good."
		},
		{
			"timestamps": {
				"from": "01:20:43,340",
				"to": "01:20:44,340"
			},
			"offsets": {
				"from": 4843340,
				"to": 4844340
			},
			"text": " Cool."
		},
		{
			"timestamps": {
				"from": "01:20:44,340",
				"to": "01:20:48,340"
			},
			"offsets": {
				"from": 4844340,
				"to": 4848340
			},
			"text": " Yeah so just as a quick review of what we're doing with this transfer."
		},
		{
			"timestamps": {
				"from": "01:20:48,340",
				"to": "01:20:52,860"
			},
			"offsets": {
				"from": 4848340,
				"to": 4852860
			},
			"text": " Loading the free memory pointer we're going to store at that memory pointer the caller"
		},
		{
			"timestamps": {
				"from": "01:20:52,860",
				"to": "01:20:55,420"
			},
			"offsets": {
				"from": 4852860,
				"to": 4855420
			},
			"text": " then zero because it's a slot of the balance mapping."
		},
		{
			"timestamps": {
				"from": "01:20:55,420",
				"to": "01:20:57,940"
			},
			"offsets": {
				"from": 4855420,
				"to": 4857940
			},
			"text": " We're going to hash that to get the slot."
		},
		{
			"timestamps": {
				"from": "01:20:57,940",
				"to": "01:21:00,100"
			},
			"offsets": {
				"from": 4857940,
				"to": 4860100
			},
			"text": " We're going to load from it to get the caller balance."
		},
		{
			"timestamps": {
				"from": "01:21:00,100",
				"to": "01:21:05,580"
			},
			"offsets": {
				"from": 4860100,
				"to": 4865580
			},
			"text": " Assert that it actually does have the balance that it needs if not we're going to revert."
		},
		{
			"timestamps": {
				"from": "01:21:05,580",
				"to": "01:21:12,780"
			},
			"offsets": {
				"from": 4865580,
				"to": 4872780
			},
			"text": " Then we're going to increment or decrease the new caller to the new caller balance."
		},
		{
			"timestamps": {
				"from": "01:21:12,780",
				"to": "01:21:14,540"
			},
			"offsets": {
				"from": 4872780,
				"to": 4874540
			},
			"text": " Then we're going to do the same thing for the receiver."
		},
		{
			"timestamps": {
				"from": "01:21:14,540",
				"to": "01:21:16,980"
			},
			"offsets": {
				"from": 4874540,
				"to": 4876980
			},
			"text": " Obviously we don't need to check for the overflow."
		},
		{
			"timestamps": {
				"from": "01:21:16,980",
				"to": "01:21:19,860"
			},
			"offsets": {
				"from": 4876980,
				"to": 4879860
			},
			"text": " We're going to check that a little bit later."
		},
		{
			"timestamps": {
				"from": "01:21:19,860",
				"to": "01:21:24,660"
			},
			"offsets": {
				"from": 4879860,
				"to": 4884660
			},
			"text": " But we can be certain that this is not going to overflow."
		},
		{
			"timestamps": {
				"from": "01:21:24,660",
				"to": "01:21:28,300"
			},
			"offsets": {
				"from": 4884660,
				"to": 4888300
			},
			"text": " So we'll increase the receiver balance to give us our new receiver balance and then"
		},
		{
			"timestamps": {
				"from": "01:21:28,300",
				"to": "01:21:31,940"
			},
			"offsets": {
				"from": 4888300,
				"to": 4891940
			},
			"text": " we'll store that in storage here."
		},
		{
			"timestamps": {
				"from": "01:21:31,940",
				"to": "01:21:38,420"
			},
			"offsets": {
				"from": 4891940,
				"to": 4898420
			},
			"text": " So last thing we need to do after all of this is we need to return to the caller a Boolean."
		},
		{
			"timestamps": {
				"from": "01:21:38,420",
				"to": "01:21:39,780"
			},
			"offsets": {
				"from": 4898420,
				"to": 4899780
			},
			"text": " In this case we're going to return true."
		},
		{
			"timestamps": {
				"from": "01:21:39,780",
				"to": "01:21:41,700"
			},
			"offsets": {
				"from": 4899780,
				"to": 4901700
			},
			"text": " It's the way we do that."
		},
		{
			"timestamps": {
				"from": "01:21:41,700",
				"to": "01:21:44,140"
			},
			"offsets": {
				"from": 4901700,
				"to": 4904140
			},
			"text": " Again, it doesn't matter now we're at the end of the execution."
		},
		{
			"timestamps": {
				"from": "01:21:44,140",
				"to": "01:21:49,340"
			},
			"offsets": {
				"from": 4904140,
				"to": 4909340
			},
			"text": " So we'll store at slot zero, OX1 which will be our true value."
		},
		{
			"timestamps": {
				"from": "01:21:49,340",
				"to": "01:22:00,380"
			},
			"offsets": {
				"from": 4909340,
				"to": 4920380
			},
			"text": " And if you return those 32 bytes."
		},
		{
			"timestamps": {
				"from": "01:22:00,380",
				"to": "01:22:05,260"
			},
			"offsets": {
				"from": 4920380,
				"to": 4925260
			},
			"text": " The log, yes the log, thank you."
		},
		{
			"timestamps": {
				"from": "01:22:05,260",
				"to": "01:22:12,660"
			},
			"offsets": {
				"from": 4925260,
				"to": 4932660
			},
			"text": " Okay, so we're going to have a transfer event."
		},
		{
			"timestamps": {
				"from": "01:22:12,660",
				"to": "01:22:17,300"
			},
			"offsets": {
				"from": 4932660,
				"to": 4937300
			},
			"text": " Probably should have hashed this as well but we'll get those hashes in just a moment."
		},
		{
			"timestamps": {
				"from": "01:22:17,300",
				"to": "01:22:19,540"
			},
			"offsets": {
				"from": 4937300,
				"to": 4939540
			},
			"text": " So it's going to be a transfer event."
		},
		{
			"timestamps": {
				"from": "01:22:19,540",
				"to": "01:22:29,980"
			},
			"offsets": {
				"from": 4939540,
				"to": 4949980
			},
			"text": " We're going to have an indexed sender, an index receiver and an amount."
		},
		{
			"timestamps": {
				"from": "01:22:29,980",
				"to": "01:22:30,980"
			},
			"offsets": {
				"from": 4949980,
				"to": 4950980
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "01:22:30,980",
				"to": "01:22:33,980"
			},
			"offsets": {
				"from": 4950980,
				"to": 4953980
			},
			"text": " So, per the rules that we mentioned earlier."
		},
		{
			"timestamps": {
				"from": "01:22:33,980",
				"to": "01:22:36,780"
			},
			"offsets": {
				"from": 4953980,
				"to": 4956780
			},
			"text": " We're going to have, so this is going to actually be log three, right?"
		},
		{
			"timestamps": {
				"from": "01:22:36,780",
				"to": "01:22:40,020"
			},
			"offsets": {
				"from": 4956780,
				"to": 4960020
			},
			"text": " We're going to log the event signature, the event hash."
		},
		{
			"timestamps": {
				"from": "01:22:40,020",
				"to": "01:22:44,940"
			},
			"offsets": {
				"from": 4960020,
				"to": 4964940
			},
			"text": " Then we're going to log the sender as a topic, the receiver as a topic and then the amount"
		},
		{
			"timestamps": {
				"from": "01:22:44,940",
				"to": "01:22:46,460"
			},
			"offsets": {
				"from": 4964940,
				"to": 4966460
			},
			"text": " because it's not an indexed topic."
		},
		{
			"timestamps": {
				"from": "01:22:46,460",
				"to": "01:22:54,740"
			},
			"offsets": {
				"from": 4966460,
				"to": 4974740
			},
			"text": " We're going to put that in memory and then basically pass the pointers to the log instruction."
		},
		{
			"timestamps": {
				"from": "01:22:54,740",
				"to": "01:23:03,820"
			},
			"offsets": {
				"from": 4974740,
				"to": 4983820
			},
			"text": " So I'm going to quickly, oh well, so small."
		},
		{
			"timestamps": {
				"from": "01:23:03,820",
				"to": "01:23:04,820"
			},
			"offsets": {
				"from": 4983820,
				"to": 4984820
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "01:23:04,820",
				"to": "01:23:17,620"
			},
			"offsets": {
				"from": 4984820,
				"to": 4997620
			},
			"text": " So another place that you can do this if you want to get this stuff online and you might"
		},
		{
			"timestamps": {
				"from": "01:23:17,620",
				"to": "01:23:24,460"
			},
			"offsets": {
				"from": 4997620,
				"to": 5004460
			},
			"text": " not have, if you might not have cast installed on your local machine, what you can do is"
		},
		{
			"timestamps": {
				"from": "01:23:24,460",
				"to": "01:23:28,860"
			},
			"offsets": {
				"from": 5004460,
				"to": 5008860
			},
			"text": " go to this online hashing tool and you can basically punch in this stuff."
		},
		{
			"timestamps": {
				"from": "01:23:28,860",
				"to": "01:23:31,180"
			},
			"offsets": {
				"from": 5008860,
				"to": 5011180
			},
			"text": " I think internet is going to rug me once again."
		},
		{
			"timestamps": {
				"from": "01:23:31,180",
				"to": "01:23:33,580"
			},
			"offsets": {
				"from": 5011180,
				"to": 5013580
			},
			"text": " But, oh, no, there we go, cool, cool."
		},
		{
			"timestamps": {
				"from": "01:23:33,580",
				"to": "01:23:35,660"
			},
			"offsets": {
				"from": 5013580,
				"to": 5015660
			},
			"text": " So we can just say transfer."
		},
		{
			"timestamps": {
				"from": "01:23:35,660",
				"to": "01:23:40,220"
			},
			"offsets": {
				"from": 5015660,
				"to": 5020220
			},
			"text": " And then same thing, right?"
		},
		{
			"timestamps": {
				"from": "01:23:40,220",
				"to": "01:23:49,500"
			},
			"offsets": {
				"from": 5020220,
				"to": 5029500
			},
			"text": " So OX, DDE, F2, etc., etc."
		},
		{
			"timestamps": {
				"from": "01:23:49,500",
				"to": "01:24:00,140"
			},
			"offsets": {
				"from": 5029500,
				"to": 5040140
			},
			"text": " All right, so we're going to set that as a constant."
		},
		{
			"timestamps": {
				"from": "01:24:00,140",
				"to": "01:24:07,580"
			},
			"offsets": {
				"from": 5040140,
				"to": 5047580
			},
			"text": " All right, I'm going to add some comments in here."
		},
		{
			"timestamps": {
				"from": "01:24:07,580",
				"to": "01:24:15,020"
			},
			"offsets": {
				"from": 5047580,
				"to": 5055020
			},
			"text": " Just a moment."
		},
		{
			"timestamps": {
				"from": "01:24:15,020",
				"to": "01:24:22,020"
			},
			"offsets": {
				"from": 5055020,
				"to": 5062020
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "01:24:22,020",
				"to": "01:24:51,020"
			},
			"offsets": {
				"from": 5062020,
				"to": 5091020
			},
			"text": " Okay, we're going to store."
		},
		{
			"timestamps": {
				"from": "01:24:51,020",
				"to": "01:24:53,020"
			},
			"offsets": {
				"from": 5091020,
				"to": 5093020
			},
			"text": " Now log."
		},
		{
			"timestamps": {
				"from": "01:24:53,020",
				"to": "01:24:59,980"
			},
			"offsets": {
				"from": 5093020,
				"to": 5099980
			},
			"text": " Okay, so before we do any of the logging, remember, we have to store the amount into"
		},
		{
			"timestamps": {
				"from": "01:24:59,980",
				"to": "01:25:01,380"
			},
			"offsets": {
				"from": 5099980,
				"to": 5101380
			},
			"text": " memory."
		},
		{
			"timestamps": {
				"from": "01:25:01,380",
				"to": "01:25:06,780"
			},
			"offsets": {
				"from": 5101380,
				"to": 5106780
			},
			"text": " So in this case, again, execution is about to end so we don't have to be too, too careful"
		},
		{
			"timestamps": {
				"from": "01:25:06,780",
				"to": "01:25:08,740"
			},
			"offsets": {
				"from": 5106780,
				"to": 5108740
			},
			"text": " about where we put things in memory."
		},
		{
			"timestamps": {
				"from": "01:25:08,740",
				"to": "01:25:14,180"
			},
			"offsets": {
				"from": 5108740,
				"to": 5114180
			},
			"text": " So let's go ahead and m store, add slot zero, the amount."
		},
		{
			"timestamps": {
				"from": "01:25:14,180",
				"to": "01:25:16,780"
			},
			"offsets": {
				"from": 5114180,
				"to": 5116780
			},
			"text": " I think in this case we called it the value, right?"
		},
		{
			"timestamps": {
				"from": "01:25:16,780",
				"to": "01:25:22,020"
			},
			"offsets": {
				"from": 5116780,
				"to": 5122020
			},
			"text": " So we're storing that in memory and now we want to call log, but remember we want to"
		},
		{
			"timestamps": {
				"from": "01:25:22,020",
				"to": "01:25:27,100"
			},
			"offsets": {
				"from": 5122020,
				"to": 5127100
			},
			"text": " have the two indexed arguments and we want the event signature."
		},
		{
			"timestamps": {
				"from": "01:25:27,100",
				"to": "01:25:29,700"
			},
			"offsets": {
				"from": 5127100,
				"to": 5129700
			},
			"text": " So that's going to be log three."
		},
		{
			"timestamps": {
				"from": "01:25:29,700",
				"to": "01:25:32,260"
			},
			"offsets": {
				"from": 5129700,
				"to": 5132260
			},
			"text": " First thing we want to pass is the pointer in memory."
		},
		{
			"timestamps": {
				"from": "01:25:32,260",
				"to": "01:25:33,900"
			},
			"offsets": {
				"from": 5132260,
				"to": 5133900
			},
			"text": " It's going to start at zero."
		},
		{
			"timestamps": {
				"from": "01:25:33,900",
				"to": "01:25:36,140"
			},
			"offsets": {
				"from": 5133900,
				"to": 5136140
			},
			"text": " The size is just going to be this one value, right?"
		},
		{
			"timestamps": {
				"from": "01:25:36,140",
				"to": "01:25:37,380"
			},
			"offsets": {
				"from": 5136140,
				"to": 5137380
			},
			"text": " Everything else is going to come from the stack."
		},
		{
			"timestamps": {
				"from": "01:25:37,380",
				"to": "01:25:42,140"
			},
			"offsets": {
				"from": 5137380,
				"to": 5142140
			},
			"text": " We just need these 32 bytes at the beginning."
		},
		{
			"timestamps": {
				"from": "01:25:42,140",
				"to": "01:25:50,980"
			},
			"offsets": {
				"from": 5142140,
				"to": 5150980
			},
			"text": " Then we're going to say transfer hash."
		},
		{
			"timestamps": {
				"from": "01:25:50,980",
				"to": "01:26:05,140"
			},
			"offsets": {
				"from": 5150980,
				"to": 5165140
			},
			"text": " The next topic is going to be the caller and then the final topic is going to be the receiver."
		},
		{
			"timestamps": {
				"from": "01:26:05,140",
				"to": "01:26:09,060"
			},
			"offsets": {
				"from": 5165140,
				"to": 5169060
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "01:26:09,060",
				"to": "01:26:33,820"
			},
			"offsets": {
				"from": 5169060,
				"to": 5193820
			},
			"text": " So at this point, we handle the balances, update the storage, log the event and return."
		},
		{
			"timestamps": {
				"from": "01:26:33,820",
				"to": "01:26:36,420"
			},
			"offsets": {
				"from": 5193820,
				"to": 5196420
			},
			"text": " The values in the log are only the non-index."
		},
		{
			"timestamps": {
				"from": "01:26:36,420",
				"to": "01:26:42,500"
			},
			"offsets": {
				"from": 5196420,
				"to": 5202500
			},
			"text": " So the actual index arguments are on the stack and then the non-indexed and memory."
		},
		{
			"timestamps": {
				"from": "01:26:42,500",
				"to": "01:26:47,340"
			},
			"offsets": {
				"from": 5202500,
				"to": 5207340
			},
			"text": " Which also, I believe this is also in the link tree, the full like, you old documentation,"
		},
		{
			"timestamps": {
				"from": "01:26:47,340",
				"to": "01:26:49,260"
			},
			"offsets": {
				"from": 5207340,
				"to": 5209260
			},
			"text": " basically everything you need to know about this."
		},
		{
			"timestamps": {
				"from": "01:26:49,260",
				"to": "01:26:53,660"
			},
			"offsets": {
				"from": 5209260,
				"to": 5213660
			},
			"text": " It's also going to have our log instructions in here, right?"
		},
		{
			"timestamps": {
				"from": "01:26:53,660",
				"to": "01:26:57,100"
			},
			"offsets": {
				"from": 5213660,
				"to": 5217100
			},
			"text": " So log zero, one, two, three, and four."
		},
		{
			"timestamps": {
				"from": "01:26:57,100",
				"to": "01:27:04,100"
			},
			"offsets": {
				"from": 5217100,
				"to": 5224100
			},
			"text": " So we're going to have a call."
		},
		{
			"timestamps": {
				"from": "01:27:04,100",
				"to": "01:27:11,100"
			},
			"offsets": {
				"from": 5224100,
				"to": 5231100
			},
			"text": " So the statement, here is the add, hand statement of the check, the security of the caller that"
		},
		{
			"timestamps": {
				"from": "01:27:11,100",
				"to": "01:27:15,100"
			},
			"offsets": {
				"from": 5231100,
				"to": 5235100
			},
			"text": " will be not back when it can be resolved for the public."
		},
		{
			"timestamps": {
				"from": "01:27:15,100",
				"to": "01:27:22,100"
			},
			"offsets": {
				"from": 5235100,
				"to": 5242100
			},
			"text": " And you will see, I'm storing the value of the receiver under your occurring value of"
		},
		{
			"timestamps": {
				"from": "01:27:22,100",
				"to": "01:27:23,100"
			},
			"offsets": {
				"from": 5242100,
				"to": 5243100
			},
			"text": " the call."
		},
		{
			"timestamps": {
				"from": "01:27:23,100",
				"to": "01:27:28,900"
			},
			"offsets": {
				"from": 5243100,
				"to": 5248900
			},
			"text": " So basically, I will see myself under more details of the"
		},
		{
			"timestamps": {
				"from": "01:27:28,900",
				"to": "01:27:48,900"
			},
			"offsets": {
				"from": 5248900,
				"to": 5268900
			},
			"text": " call."
		},
		{
			"timestamps": {
				"from": "01:27:48,900",
				"to": "01:27:53,260"
			},
			"offsets": {
				"from": 5268900,
				"to": 5273260
			},
			"text": " So if it's the same, it uses the same slot."
		},
		{
			"timestamps": {
				"from": "01:27:53,260",
				"to": "01:27:56,260"
			},
			"offsets": {
				"from": 5273260,
				"to": 5276260
			},
			"text": " It first increases, right?"
		},
		{
			"timestamps": {
				"from": "01:27:56,260",
				"to": "01:28:02,980"
			},
			"offsets": {
				"from": 5276260,
				"to": 5282980
			},
			"text": " No, no, so whatever the value is at that slot, it will decrease."
		},
		{
			"timestamps": {
				"from": "01:28:02,980",
				"to": "01:28:06,660"
			},
			"offsets": {
				"from": 5282980,
				"to": 5286660
			},
			"text": " Then it loads, increases."
		},
		{
			"timestamps": {
				"from": "01:28:06,660",
				"to": "01:28:12,860"
			},
			"offsets": {
				"from": 5286660,
				"to": 5292860
			},
			"text": " Oh, yes, yes, yes, okay."
		},
		{
			"timestamps": {
				"from": "01:28:12,860",
				"to": "01:28:14,660"
			},
			"offsets": {
				"from": 5292860,
				"to": 5294660
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:28:14,660",
				"to": "01:28:19,060"
			},
			"offsets": {
				"from": 5294660,
				"to": 5299060
			},
			"text": " Great catch, thank you."
		},
		{
			"timestamps": {
				"from": "01:28:19,060",
				"to": "01:28:33,260"
			},
			"offsets": {
				"from": 5299060,
				"to": 5313260
			},
			"text": " Right, yeah, so let's do that as well."
		},
		{
			"timestamps": {
				"from": "01:28:33,260",
				"to": "01:28:39,860"
			},
			"offsets": {
				"from": 5313260,
				"to": 5319860
			},
			"text": " So let's just say equals, if the caller is equal to the receiver."
		},
		{
			"timestamps": {
				"from": "01:28:39,860",
				"to": "01:28:53,580"
			},
			"offsets": {
				"from": 5319860,
				"to": 5333580
			},
			"text": " So it's not going to be the same."
		},
		{
			"timestamps": {
				"from": "01:28:53,580",
				"to": "01:28:56,780"
			},
			"offsets": {
				"from": 5333580,
				"to": 5336780
			},
			"text": " Subtract store, load, and store."
		},
		{
			"timestamps": {
				"from": "01:28:56,780",
				"to": "01:29:04,020"
			},
			"offsets": {
				"from": 5336780,
				"to": 5344020
			},
			"text": " Right, right, right."
		},
		{
			"timestamps": {
				"from": "01:29:04,020",
				"to": "01:29:06,420"
			},
			"offsets": {
				"from": 5344020,
				"to": 5346420
			},
			"text": " Yeah, great."
		},
		{
			"timestamps": {
				"from": "01:29:06,420",
				"to": "01:29:11,100"
			},
			"offsets": {
				"from": 5346420,
				"to": 5351100
			},
			"text": " Yeah, for the sake of time, we're going to be bad developers and we're just going to"
		},
		{
			"timestamps": {
				"from": "01:29:11,100",
				"to": "01:29:12,100"
			},
			"offsets": {
				"from": 5351100,
				"to": 5352100
			},
			"text": " revert with zero, zero."
		},
		{
			"timestamps": {
				"from": "01:29:12,100",
				"to": "01:29:14,940"
			},
			"offsets": {
				"from": 5352100,
				"to": 5354940
			},
			"text": " And we're just not going to tell anybody about that, all right."
		},
		{
			"timestamps": {
				"from": "01:29:14,940",
				"to": "01:29:16,900"
			},
			"offsets": {
				"from": 5354940,
				"to": 5356900
			},
			"text": " All right, great."
		},
		{
			"timestamps": {
				"from": "01:29:16,900",
				"to": "01:29:19,940"
			},
			"offsets": {
				"from": 5356900,
				"to": 5359940
			},
			"text": " Good catch, thank you."
		},
		{
			"timestamps": {
				"from": "01:29:19,940",
				"to": "01:29:26,540"
			},
			"offsets": {
				"from": 5359940,
				"to": 5366540
			},
			"text": " So after transfer, let's do allowance."
		},
		{
			"timestamps": {
				"from": "01:29:26,540",
				"to": "01:29:28,540"
			},
			"offsets": {
				"from": 5366540,
				"to": 5368540
			},
			"text": " No."
		},
		{
			"timestamps": {
				"from": "01:29:28,540",
				"to": "01:29:35,540"
			},
			"offsets": {
				"from": 5368540,
				"to": 5375540
			},
			"text": " Okay, let's do allowance."
		},
		{
			"timestamps": {
				"from": "01:29:35,540",
				"to": "01:29:40,660"
			},
			"offsets": {
				"from": 5375540,
				"to": 5380660
			},
			"text": " Great, okay."
		},
		{
			"timestamps": {
				"from": "01:29:40,660",
				"to": "01:29:53,580"
			},
			"offsets": {
				"from": 5380660,
				"to": 5393580
			},
			"text": " Great, okay."
		},
		{
			"timestamps": {
				"from": "01:29:53,580",
				"to": "01:30:03,060"
			},
			"offsets": {
				"from": 5393580,
				"to": 5403060
			},
			"text": " So in this case, what we need to do is, all right, so we're going to take the owner, we're"
		},
		{
			"timestamps": {
				"from": "01:30:03,060",
				"to": "01:30:07,020"
			},
			"offsets": {
				"from": 5403060,
				"to": 5407020
			},
			"text": " going to map that to a spender, which then we map to a number."
		},
		{
			"timestamps": {
				"from": "01:30:07,020",
				"to": "01:30:19,940"
			},
			"offsets": {
				"from": 5407020,
				"to": 5419940
			},
			"text": " So the way that this works in storage is we're going to hash the owner and slot, make"
		},
		{
			"timestamps": {
				"from": "01:30:19,940",
				"to": "01:30:31,780"
			},
			"offsets": {
				"from": 5419940,
				"to": 5431780
			},
			"text": " sure I get this right, owner and slot, and then the result of this will hash again."
		},
		{
			"timestamps": {
				"from": "01:30:31,780",
				"to": "01:30:43,460"
			},
			"offsets": {
				"from": 5431780,
				"to": 5443460
			},
			"text": " So owner, slot, hash, then the final key."
		},
		{
			"timestamps": {
				"from": "01:30:43,460",
				"to": "01:30:57,300"
			},
			"offsets": {
				"from": 5443460,
				"to": 5457300
			},
			"text": " Let's double check the documentation, make sure we get that right."
		},
		{
			"timestamps": {
				"from": "01:30:57,300",
				"to": "01:31:23,780"
			},
			"offsets": {
				"from": 5457300,
				"to": 5483780
			},
			"text": " Great, so here is the standard function and then nesting that would be right, right."
		},
		{
			"timestamps": {
				"from": "01:31:23,780",
				"to": "01:31:32,860"
			},
			"offsets": {
				"from": 5483780,
				"to": 5492860
			},
			"text": " Right idea, wrong order."
		},
		{
			"timestamps": {
				"from": "01:31:32,860",
				"to": "01:31:35,820"
			},
			"offsets": {
				"from": 5492860,
				"to": 5495820
			},
			"text": " So the mapping rules are applied then recursively."
		},
		{
			"timestamps": {
				"from": "01:31:35,820",
				"to": "01:31:46,740"
			},
			"offsets": {
				"from": 5495820,
				"to": 5506740
			},
			"text": " So we're going to bring that down here so we can remember."
		},
		{
			"timestamps": {
				"from": "01:31:46,740",
				"to": "01:31:49,260"
			},
			"offsets": {
				"from": 5506740,
				"to": 5509260
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:31:49,260",
				"to": "01:31:55,020"
			},
			"offsets": {
				"from": 5509260,
				"to": 5515020
			},
			"text": " So first, we're going to do the inner hash."
		},
		{
			"timestamps": {
				"from": "01:31:55,020",
				"to": "01:31:57,580"
			},
			"offsets": {
				"from": 5515020,
				"to": 5517580
			},
			"text": " So we're going to store the owner."
		},
		{
			"timestamps": {
				"from": "01:31:57,580",
				"to": "01:32:04,460"
			},
			"offsets": {
				"from": 5517580,
				"to": 5524460
			},
			"text": " Yep, I'm going to store the owner at slot zero."
		},
		{
			"timestamps": {
				"from": "01:32:04,460",
				"to": "01:32:17,180"
			},
			"offsets": {
				"from": 5524460,
				"to": 5537180
			},
			"text": " We're going to store at the next slot, the slot, which is going to be zero."
		},
		{
			"timestamps": {
				"from": "01:32:17,180",
				"to": "01:32:25,260"
			},
			"offsets": {
				"from": 5537180,
				"to": 5545260
			},
			"text": " Owner hash is going to be shot three hash of the first two slots."
		},
		{
			"timestamps": {
				"from": "01:32:25,260",
				"to": "01:32:34,900"
			},
			"offsets": {
				"from": 5545260,
				"to": 5554900
			},
			"text": " And then we're basically going to do the same thing again with the inner hash."
		},
		{
			"timestamps": {
				"from": "01:32:34,900",
				"to": "01:32:40,780"
			},
			"offsets": {
				"from": 5554900,
				"to": 5560780
			},
			"text": " slot one, thank you."
		},
		{
			"timestamps": {
				"from": "01:32:40,780",
				"to": "01:32:55,060"
			},
			"offsets": {
				"from": 5560780,
				"to": 5575060
			},
			"text": " And then spender."
		},
		{
			"timestamps": {
				"from": "01:32:55,060",
				"to": "01:33:03,900"
			},
			"offsets": {
				"from": 5575060,
				"to": 5583900
			},
			"text": " Okay, the allowance slot then is going to be the hash of these once again."
		},
		{
			"timestamps": {
				"from": "01:33:03,900",
				"to": "01:33:05,900"
			},
			"offsets": {
				"from": 5583900,
				"to": 5585900
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:33:05,900",
				"to": "01:33:19,180"
			},
			"offsets": {
				"from": 5585900,
				"to": 5599180
			},
			"text": " And so now what we're going to do is load from storage."
		},
		{
			"timestamps": {
				"from": "01:33:19,180",
				"to": "01:33:26,180"
			},
			"offsets": {
				"from": 5599180,
				"to": 5606180
			},
			"text": " And then we want to store this in memory and return that back to the caller."
		},
		{
			"timestamps": {
				"from": "01:33:26,180",
				"to": "01:33:39,300"
			},
			"offsets": {
				"from": 5606180,
				"to": 5619300
			},
			"text": " Oh, whoops, not caller, owner."
		},
		{
			"timestamps": {
				"from": "01:33:39,300",
				"to": "01:33:41,420"
			},
			"offsets": {
				"from": 5619300,
				"to": 5621420
			},
			"text": " There we go."
		},
		{
			"timestamps": {
				"from": "01:33:41,420",
				"to": "01:33:47,340"
			},
			"offsets": {
				"from": 5621420,
				"to": 5627340
			},
			"text": " Okay, so we hash together to form the first slot and then we hash again to form the second"
		},
		{
			"timestamps": {
				"from": "01:33:47,340",
				"to": "01:33:52,940"
			},
			"offsets": {
				"from": 5627340,
				"to": 5632940
			},
			"text": " slot, this mapping, we load from that slot, put that in memory, and then we return it"
		},
		{
			"timestamps": {
				"from": "01:33:52,940",
				"to": "01:33:55,460"
			},
			"offsets": {
				"from": 5632940,
				"to": 5635460
			},
			"text": " from memory to the caller."
		},
		{
			"timestamps": {
				"from": "01:33:55,460",
				"to": "01:34:07,460"
			},
			"offsets": {
				"from": 5635460,
				"to": 5647460
			},
			"text": " So next thing we want to do is going to be approve."
		},
		{
			"timestamps": {
				"from": "01:34:07,460",
				"to": "01:34:12,460"
			},
			"offsets": {
				"from": 5647460,
				"to": 5652460
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:34:12,460",
				"to": "01:34:25,420"
			},
			"offsets": {
				"from": 5652460,
				"to": 5665420
			},
			"text": " So in the interest of time, we're going to copy paste as all good developers do."
		},
		{
			"timestamps": {
				"from": "01:34:25,420",
				"to": "01:34:28,620"
			},
			"offsets": {
				"from": 5665420,
				"to": 5668620
			},
			"text": " Okay, so we're going to do the same thing."
		},
		{
			"timestamps": {
				"from": "01:34:28,620",
				"to": "01:34:31,980"
			},
			"offsets": {
				"from": 5668620,
				"to": 5671980
			},
			"text": " So the hashing, figure out the slot."
		},
		{
			"timestamps": {
				"from": "01:34:31,980",
				"to": "01:34:40,500"
			},
			"offsets": {
				"from": 5671980,
				"to": 5680500
			},
			"text": " And then from here, we want to set the value at this slot to the new amount."
		},
		{
			"timestamps": {
				"from": "01:34:40,500",
				"to": "01:34:49,380"
			},
			"offsets": {
				"from": 5680500,
				"to": 5689380
			},
			"text": " So S store at allowance slots, the amount."
		},
		{
			"timestamps": {
				"from": "01:34:49,380",
				"to": "01:34:52,700"
			},
			"offsets": {
				"from": 5689380,
				"to": 5692700
			},
			"text": " Next thing we want to do before we return is we want to create a log and that's going"
		},
		{
			"timestamps": {
				"from": "01:34:52,700",
				"to": "01:34:56,780"
			},
			"offsets": {
				"from": 5692700,
				"to": 5696780
			},
			"text": " to be the approve event."
		},
		{
			"timestamps": {
				"from": "01:34:56,780",
				"to": "01:35:08,500"
			},
			"offsets": {
				"from": 5696780,
				"to": 5708500
			},
			"text": " It's going to have an owner, a spender, and an amount."
		},
		{
			"timestamps": {
				"from": "01:35:08,500",
				"to": "01:35:11,380"
			},
			"offsets": {
				"from": 5708500,
				"to": 5711380
			},
			"text": " So functionally, this is going to be the same as the transfer."
		},
		{
			"timestamps": {
				"from": "01:35:11,380",
				"to": "01:35:14,660"
			},
			"offsets": {
				"from": 5711380,
				"to": 5714660
			},
			"text": " We have two index arguments, so it's going to be log three and we'll have to store the"
		},
		{
			"timestamps": {
				"from": "01:35:14,660",
				"to": "01:35:20,380"
			},
			"offsets": {
				"from": 5714660,
				"to": 5720380
			},
			"text": " amount into memory."
		},
		{
			"timestamps": {
				"from": "01:35:20,380",
				"to": "01:35:27,380"
			},
			"offsets": {
				"from": 5720380,
				"to": 5727380
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "01:35:27,380",
				"to": "01:35:34,100"
			},
			"offsets": {
				"from": 5727380,
				"to": 5734100
			},
			"text": " Is it approve or approval?"
		},
		{
			"timestamps": {
				"from": "01:35:34,100",
				"to": "01:35:51,780"
			},
			"offsets": {
				"from": 5734100,
				"to": 5751780
			},
			"text": " It's just approve, just a moment."
		},
		{
			"timestamps": {
				"from": "01:35:51,780",
				"to": "01:35:53,980"
			},
			"offsets": {
				"from": 5751780,
				"to": 5753980
			},
			"text": " Approval, great."
		},
		{
			"timestamps": {
				"from": "01:35:53,980",
				"to": "01:35:59,420"
			},
			"offsets": {
				"from": 5753980,
				"to": 5759420
			},
			"text": " That's going to be approval."
		},
		{
			"timestamps": {
				"from": "01:35:59,420",
				"to": "01:36:14,140"
			},
			"offsets": {
				"from": 5759420,
				"to": 5774140
			},
			"text": " So from here, we'll take this hash."
		},
		{
			"timestamps": {
				"from": "01:36:14,140",
				"to": "01:36:18,340"
			},
			"offsets": {
				"from": 5774140,
				"to": 5778340
			},
			"text": " Make sure that's hex."
		},
		{
			"timestamps": {
				"from": "01:36:18,340",
				"to": "01:36:20,860"
			},
			"offsets": {
				"from": 5778340,
				"to": 5780860
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:36:20,860",
				"to": "01:36:27,300"
			},
			"offsets": {
				"from": 5780860,
				"to": 5787300
			},
			"text": " So before we log the event, again, we want to store the amount in storage and then we"
		},
		{
			"timestamps": {
				"from": "01:36:27,300",
				"to": "01:36:31,740"
			},
			"offsets": {
				"from": 5787300,
				"to": 5791740
			},
			"text": " want to log three."
		},
		{
			"timestamps": {
				"from": "01:36:31,740",
				"to": "01:36:32,740"
			},
			"offsets": {
				"from": 5791740,
				"to": 5792740
			},
			"text": " We'll start at slot zero."
		},
		{
			"timestamps": {
				"from": "01:36:32,740",
				"to": "01:36:36,380"
			},
			"offsets": {
				"from": 5792740,
				"to": 5796380
			},
			"text": " It's going to be of size OX20 because it's just the amount."
		},
		{
			"timestamps": {
				"from": "01:36:36,380",
				"to": "01:36:38,460"
			},
			"offsets": {
				"from": 5796380,
				"to": 5798460
			},
			"text": " First topic is going to be the approval hash."
		},
		{
			"timestamps": {
				"from": "01:36:38,460",
				"to": "01:36:41,420"
			},
			"offsets": {
				"from": 5798460,
				"to": 5801420
			},
			"text": " Next one is going to be the owner in this case."
		},
		{
			"timestamps": {
				"from": "01:36:41,420",
				"to": "01:36:42,980"
			},
			"offsets": {
				"from": 5801420,
				"to": 5802980
			},
			"text": " That's going to be our caller."
		},
		{
			"timestamps": {
				"from": "01:36:42,980",
				"to": "01:36:49,460"
			},
			"offsets": {
				"from": 5802980,
				"to": 5809460
			},
			"text": " And the final one is going to be the spender, the person who can spend on their behalf."
		},
		{
			"timestamps": {
				"from": "01:36:49,460",
				"to": "01:36:50,460"
			},
			"offsets": {
				"from": 5809460,
				"to": 5810460
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:36:50,460",
				"to": "01:36:56,540"
			},
			"offsets": {
				"from": 5810460,
				"to": 5816540
			},
			"text": " Now that we've logged the event, last thing we want to do is store one, which for true."
		},
		{
			"timestamps": {
				"from": "01:36:56,540",
				"to": "01:37:03,140"
			},
			"offsets": {
				"from": 5816540,
				"to": 5823140
			},
			"text": " Then we want to return that full amount."
		},
		{
			"timestamps": {
				"from": "01:37:03,140",
				"to": "01:37:05,180"
			},
			"offsets": {
				"from": 5823140,
				"to": 5825180
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "01:37:05,180",
				"to": "01:37:06,180"
			},
			"offsets": {
				"from": 5825180,
				"to": 5826180
			},
			"text": " Easy."
		},
		{
			"timestamps": {
				"from": "01:37:06,180",
				"to": "01:37:07,180"
			},
			"offsets": {
				"from": 5826180,
				"to": 5827180
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:37:07,180",
				"to": "01:37:24,020"
			},
			"offsets": {
				"from": 5827180,
				"to": 5844020
			},
			"text": " So on the lowest level, a boolean is actually represented as basically a UN8."
		},
		{
			"timestamps": {
				"from": "01:37:24,020",
				"to": "01:37:25,660"
			},
			"offsets": {
				"from": 5844020,
				"to": 5845660
			},
			"text": " That can only be zero or one."
		},
		{
			"timestamps": {
				"from": "01:37:25,660",
				"to": "01:37:29,580"
			},
			"offsets": {
				"from": 5845660,
				"to": 5849580
			},
			"text": " So it just occupies a single byte."
		},
		{
			"timestamps": {
				"from": "01:37:29,580",
				"to": "01:37:38,420"
			},
			"offsets": {
				"from": 5849580,
				"to": 5858420
			},
			"text": " But in this case, we're returning the OX20, just returning the full word."
		},
		{
			"timestamps": {
				"from": "01:37:38,420",
				"to": "01:37:40,420"
			},
			"offsets": {
				"from": 5858420,
				"to": 5860420
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:37:40,420",
				"to": "01:37:45,420"
			},
			"offsets": {
				"from": 5860420,
				"to": 5865420
			},
			"text": " We're going to do transfer from."
		},
		{
			"timestamps": {
				"from": "01:37:45,420",
				"to": "01:37:55,820"
			},
			"offsets": {
				"from": 5865420,
				"to": 5875820
			},
			"text": " So this is going to have a sender, a receiver, and an amount."
		},
		{
			"timestamps": {
				"from": "01:37:55,820",
				"to": "01:38:03,380"
			},
			"offsets": {
				"from": 5875820,
				"to": 5883380
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "01:38:03,380",
				"to": "01:38:09,300"
			},
			"offsets": {
				"from": 5883380,
				"to": 5889300
			},
			"text": " So we're going to do a very similar thing to the transfer from function."
		},
		{
			"timestamps": {
				"from": "01:38:09,300",
				"to": "01:38:16,660"
			},
			"offsets": {
				"from": 5889300,
				"to": 5896660
			},
			"text": " We're actually going to just copy paste most of this with an exception."
		},
		{
			"timestamps": {
				"from": "01:38:16,660",
				"to": "01:38:19,420"
			},
			"offsets": {
				"from": 5896660,
				"to": 5899420
			},
			"text": " I don't know if I'm going to be able to do this with this tiny mouse."
		},
		{
			"timestamps": {
				"from": "01:38:19,420",
				"to": "01:38:20,420"
			},
			"offsets": {
				"from": 5899420,
				"to": 5900420
			},
			"text": " Hold on."
		},
		{
			"timestamps": {
				"from": "01:38:20,420",
				"to": "01:38:21,420"
			},
			"offsets": {
				"from": 5900420,
				"to": 5901420
			},
			"text": " Nice."
		},
		{
			"timestamps": {
				"from": "01:38:21,420",
				"to": "01:38:22,420"
			},
			"offsets": {
				"from": 5901420,
				"to": 5902420
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:38:22,420",
				"to": "01:38:28,140"
			},
			"offsets": {
				"from": 5902420,
				"to": 5908140
			},
			"text": " No, we're just going to do it from scratch."
		},
		{
			"timestamps": {
				"from": "01:38:28,140",
				"to": "01:38:29,860"
			},
			"offsets": {
				"from": 5908140,
				"to": 5909860
			},
			"text": " We'll do a live."
		},
		{
			"timestamps": {
				"from": "01:38:29,860",
				"to": "01:38:31,460"
			},
			"offsets": {
				"from": 5909860,
				"to": 5911460
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:38:31,460",
				"to": "01:38:32,700"
			},
			"offsets": {
				"from": 5911460,
				"to": 5912700
			},
			"text": " So we'll load the mem pointer."
		},
		{
			"timestamps": {
				"from": "01:38:32,700",
				"to": "01:38:39,420"
			},
			"offsets": {
				"from": 5912700,
				"to": 5919420
			},
			"text": " We want to generate the slot first for the approval."
		},
		{
			"timestamps": {
				"from": "01:38:39,420",
				"to": "01:38:44,860"
			},
			"offsets": {
				"from": 5919420,
				"to": 5924860
			},
			"text": " So we'll do the same thing as here."
		},
		{
			"timestamps": {
				"from": "01:38:44,860",
				"to": "01:38:52,300"
			},
			"offsets": {
				"from": 5924860,
				"to": 5932300
			},
			"text": " Just a moment."
		},
		{
			"timestamps": {
				"from": "01:38:52,300",
				"to": "01:38:53,300"
			},
			"offsets": {
				"from": 5932300,
				"to": 5933300
			},
			"text": " Owner."
		},
		{
			"timestamps": {
				"from": "01:38:53,300",
				"to": "01:38:55,860"
			},
			"offsets": {
				"from": 5933300,
				"to": 5935860
			},
			"text": " It's going to be."
		},
		{
			"timestamps": {
				"from": "01:38:55,860",
				"to": "01:38:58,260"
			},
			"offsets": {
				"from": 5935860,
				"to": 5938260
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:38:58,260",
				"to": "01:39:01,100"
			},
			"offsets": {
				"from": 5938260,
				"to": 5941100
			},
			"text": " So the owner in this case is going to be the sender."
		},
		{
			"timestamps": {
				"from": "01:39:01,100",
				"to": "01:39:03,420"
			},
			"offsets": {
				"from": 5941100,
				"to": 5943420
			},
			"text": " And then the spender in this case is going to be the caller."
		},
		{
			"timestamps": {
				"from": "01:39:03,420",
				"to": "01:39:04,420"
			},
			"offsets": {
				"from": 5943420,
				"to": 5944420
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:39:04,420",
				"to": "01:39:07,500"
			},
			"offsets": {
				"from": 5944420,
				"to": 5947500
			},
			"text": " So basically we want to check what we're trying to load here and what we're trying to see"
		},
		{
			"timestamps": {
				"from": "01:39:07,500",
				"to": "01:39:21,460"
			},
			"offsets": {
				"from": 5947500,
				"to": 5961460
			},
			"text": " is the spenders permissions on behalf of the sender."
		},
		{
			"timestamps": {
				"from": "01:39:21,460",
				"to": "01:39:25,260"
			},
			"offsets": {
				"from": 5961460,
				"to": 5965260
			},
			"text": " We'll call that caller allowance."
		},
		{
			"timestamps": {
				"from": "01:39:25,260",
				"to": "01:39:27,580"
			},
			"offsets": {
				"from": 5965260,
				"to": 5967580
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:39:27,580",
				"to": "01:39:31,980"
			},
			"offsets": {
				"from": 5967580,
				"to": 5971980
			},
			"text": " We're going to load from that slot."
		},
		{
			"timestamps": {
				"from": "01:39:31,980",
				"to": "01:39:33,420"
			},
			"offsets": {
				"from": 5971980,
				"to": 5973420
			},
			"text": " So basically we want to do the same thing."
		},
		{
			"timestamps": {
				"from": "01:39:33,420",
				"to": "01:39:40,260"
			},
			"offsets": {
				"from": 5973420,
				"to": 5980260
			},
			"text": " We want to check and make sure that caller allowance is not less than the amount."
		},
		{
			"timestamps": {
				"from": "01:39:40,260",
				"to": "01:39:41,260"
			},
			"offsets": {
				"from": 5980260,
				"to": 5981260
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:39:41,260",
				"to": "01:39:44,300"
			},
			"offsets": {
				"from": 5981260,
				"to": 5984300
			},
			"text": " So if it is less than then we're going to revert."
		},
		{
			"timestamps": {
				"from": "01:39:44,300",
				"to": "01:39:48,820"
			},
			"offsets": {
				"from": 5984300,
				"to": 5988820
			},
			"text": " In this case we're going to be storing the insufficient allowance error."
		},
		{
			"timestamps": {
				"from": "01:39:48,820",
				"to": "01:39:50,740"
			},
			"offsets": {
				"from": 5988820,
				"to": 5990740
			},
			"text": " So notice this is going to take two arguments."
		},
		{
			"timestamps": {
				"from": "01:39:50,740",
				"to": "01:39:57,180"
			},
			"offsets": {
				"from": 5990740,
				"to": 5997180
			},
			"text": " That's going to be the owner and the spender."
		},
		{
			"timestamps": {
				"from": "01:39:57,180",
				"to": "01:40:10,740"
			},
			"offsets": {
				"from": 5997180,
				"to": 6010740
			},
			"text": " Since we're going to be storing a bit more information here, even though it is going"
		},
		{
			"timestamps": {
				"from": "01:40:10,740",
				"to": "01:40:13,540"
			},
			"offsets": {
				"from": 6010740,
				"to": 6013540
			},
			"text": " to end execution again, formalities."
		},
		{
			"timestamps": {
				"from": "01:40:13,540",
				"to": "01:40:14,780"
			},
			"offsets": {
				"from": 6013540,
				"to": 6014780
			},
			"text": " Mempointer."
		},
		{
			"timestamps": {
				"from": "01:40:14,780",
				"to": "01:40:21,220"
			},
			"offsets": {
				"from": 6014780,
				"to": 6021220
			},
			"text": " So we're going to store the insufficient allowance selector."
		},
		{
			"timestamps": {
				"from": "01:40:21,220",
				"to": "01:40:22,460"
			},
			"offsets": {
				"from": 6021220,
				"to": 6022460
			},
			"text": " So that's going to be the first four bytes."
		},
		{
			"timestamps": {
				"from": "01:40:22,460",
				"to": "01:40:25,540"
			},
			"offsets": {
				"from": 6022460,
				"to": 6025540
			},
			"text": " Now remember it's only four bytes in memory that we're occupying here."
		},
		{
			"timestamps": {
				"from": "01:40:25,540",
				"to": "01:40:29,140"
			},
			"offsets": {
				"from": 6025540,
				"to": 6029140
			},
			"text": " We actually want to write after this the next 32 bytes."
		},
		{
			"timestamps": {
				"from": "01:40:29,140",
				"to": "01:40:36,100"
			},
			"offsets": {
				"from": 6029140,
				"to": 6036100
			},
			"text": " So instead of adding a full OX20, we're actually just going to add OX04."
		},
		{
			"timestamps": {
				"from": "01:40:36,100",
				"to": "01:40:37,100"
			},
			"offsets": {
				"from": 6036100,
				"to": 6037100
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:40:37,100",
				"to": "01:40:40,820"
			},
			"offsets": {
				"from": 6037100,
				"to": 6040820
			},
			"text": " So it's going to be the four bytes, then the next 32 bytes and then the next 32 bytes"
		},
		{
			"timestamps": {
				"from": "01:40:40,820",
				"to": "01:40:42,700"
			},
			"offsets": {
				"from": 6040820,
				"to": 6042700
			},
			"text": " after that."
		},
		{
			"timestamps": {
				"from": "01:40:42,700",
				"to": "01:40:50,300"
			},
			"offsets": {
				"from": 6042700,
				"to": 6050300
			},
			"text": " So storing it this slot, it's going to be the owner."
		},
		{
			"timestamps": {
				"from": "01:40:50,300",
				"to": "01:40:55,100"
			},
			"offsets": {
				"from": 6050300,
				"to": 6055100
			},
			"text": " In this case that's going to be the sender."
		},
		{
			"timestamps": {
				"from": "01:40:55,100",
				"to": "01:40:59,100"
			},
			"offsets": {
				"from": 6055100,
				"to": 6059100
			},
			"text": " And then the next one is going to be..."
		},
		{
			"timestamps": {
				"from": "01:40:59,100",
				"to": "01:41:08,780"
			},
			"offsets": {
				"from": 6059100,
				"to": 6068780
			},
			"text": " One second."
		},
		{
			"timestamps": {
				"from": "01:41:08,780",
				"to": "01:41:11,940"
			},
			"offsets": {
				"from": 6068780,
				"to": 6071940
			},
			"text": " So the next one is going to be the actual caller."
		},
		{
			"timestamps": {
				"from": "01:41:11,940",
				"to": "01:41:16,780"
			},
			"offsets": {
				"from": 6071940,
				"to": 6076780
			},
			"text": " So notice we're still increasing by OX20 at this point, but because it is at an offset"
		},
		{
			"timestamps": {
				"from": "01:41:16,780",
				"to": "01:41:17,940"
			},
			"offsets": {
				"from": 6076780,
				"to": 6077940
			},
			"text": " of four."
		},
		{
			"timestamps": {
				"from": "01:41:17,940",
				"to": "01:41:20,260"
			},
			"offsets": {
				"from": 6077940,
				"to": 6080260
			},
			"text": " So this slot is going to be the mempointer."
		},
		{
			"timestamps": {
				"from": "01:41:20,260",
				"to": "01:41:22,140"
			},
			"offsets": {
				"from": 6080260,
				"to": 6082140
			},
			"text": " The next one is going to be mempointer plus four."
		},
		{
			"timestamps": {
				"from": "01:41:22,140",
				"to": "01:41:28,260"
			},
			"offsets": {
				"from": 6082140,
				"to": 6088260
			},
			"text": " And then the next one is going to be the mempointer plus four plus 32."
		},
		{
			"timestamps": {
				"from": "01:41:28,260",
				"to": "01:41:31,540"
			},
			"offsets": {
				"from": 6088260,
				"to": 6091540
			},
			"text": " So this is our entire chunk in memory where the error is."
		},
		{
			"timestamps": {
				"from": "01:41:31,540",
				"to": "01:41:34,580"
			},
			"offsets": {
				"from": 6091540,
				"to": 6094580
			},
			"text": " So we're going to revert starting at the mempointer."
		},
		{
			"timestamps": {
				"from": "01:41:34,580",
				"to": "01:41:41,060"
			},
			"offsets": {
				"from": 6094580,
				"to": 6101060
			},
			"text": " And then it's going to be OX, let's see, four, 24, and then 44."
		},
		{
			"timestamps": {
				"from": "01:41:41,060",
				"to": "01:41:44,460"
			},
			"offsets": {
				"from": 6101060,
				"to": 6104460
			},
			"text": " So OX44."
		},
		{
			"timestamps": {
				"from": "01:41:44,460",
				"to": "01:41:51,500"
			},
			"offsets": {
				"from": 6104460,
				"to": 6111500
			},
			"text": " And so that's going to basically assert that they actually have the allowance to spend there."
		},
		{
			"timestamps": {
				"from": "01:41:51,500",
				"to": "01:41:57,100"
			},
			"offsets": {
				"from": 6111500,
				"to": 6117100
			},
			"text": " So now that we've done that, let's go ahead and..."
		},
		{
			"timestamps": {
				"from": "01:41:57,100",
				"to": "01:42:03,180"
			},
			"offsets": {
				"from": 6117100,
				"to": 6123180
			},
			"text": " Come on."
		},
		{
			"timestamps": {
				"from": "01:42:03,180",
				"to": "01:42:08,980"
			},
			"offsets": {
				"from": 6123180,
				"to": 6128980
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "01:42:08,980",
				"to": "01:42:25,740"
			},
			"offsets": {
				"from": 6128980,
				"to": 6145740
			},
			"text": " So the next thing we want to do is we want to get the balance slot from the sender."
		},
		{
			"timestamps": {
				"from": "01:42:25,740",
				"to": "01:42:27,700"
			},
			"offsets": {
				"from": 6145740,
				"to": 6147700
			},
			"text": " Balance, thank you."
		},
		{
			"timestamps": {
				"from": "01:42:27,700",
				"to": "01:42:32,140"
			},
			"offsets": {
				"from": 6147700,
				"to": 6152140
			},
			"text": " There we go."
		},
		{
			"timestamps": {
				"from": "01:42:32,140",
				"to": "01:42:33,140"
			},
			"offsets": {
				"from": 6152140,
				"to": 6153140
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:42:33,140",
				"to": "01:42:36,540"
			},
			"offsets": {
				"from": 6153140,
				"to": 6156540
			},
			"text": " So doing the same thing, like, \"Oh, hold on.\""
		},
		{
			"timestamps": {
				"from": "01:42:36,540",
				"to": "01:42:38,260"
			},
			"offsets": {
				"from": 6156540,
				"to": 6158260
			},
			"text": " This compiler is being obnoxious."
		},
		{
			"timestamps": {
				"from": "01:42:38,260",
				"to": "01:42:40,500"
			},
			"offsets": {
				"from": 6158260,
				"to": 6160500
			},
			"text": " We're just going to do this."
		},
		{
			"timestamps": {
				"from": "01:42:40,500",
				"to": "01:42:41,500"
			},
			"offsets": {
				"from": 6160500,
				"to": 6161500
			},
			"text": " This is not actually important."
		},
		{
			"timestamps": {
				"from": "01:42:41,500",
				"to": "01:42:44,420"
			},
			"offsets": {
				"from": 6161500,
				"to": 6164420
			},
			"text": " I'm actually just doing this so the compiler doesn't give us all this yellow text everywhere."
		},
		{
			"timestamps": {
				"from": "01:42:44,420",
				"to": "01:42:47,900"
			},
			"offsets": {
				"from": 6164420,
				"to": 6167900
			},
			"text": " We're going to get rid of that in a moment."
		},
		{
			"timestamps": {
				"from": "01:42:47,900",
				"to": "01:42:50,300"
			},
			"offsets": {
				"from": 6167900,
				"to": 6170300
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:42:50,300",
				"to": "01:42:55,500"
			},
			"offsets": {
				"from": 6170300,
				"to": 6175500
			},
			"text": " So we're going to load the sender's balance."
		},
		{
			"timestamps": {
				"from": "01:42:55,500",
				"to": "01:43:03,420"
			},
			"offsets": {
				"from": 6175500,
				"to": 6183420
			},
			"text": " Basically, again, we're storing the sender, storing the actual pointer in memory where this"
		},
		{
			"timestamps": {
				"from": "01:43:03,420",
				"to": "01:43:07,140"
			},
			"offsets": {
				"from": 6183420,
				"to": 6187140
			},
			"text": " -- or pointer in storage where this is going to come from."
		},
		{
			"timestamps": {
				"from": "01:43:07,140",
				"to": "01:43:10,020"
			},
			"offsets": {
				"from": 6187140,
				"to": 6190020
			},
			"text": " We're going to hash that to get the slot from the slot."
		},
		{
			"timestamps": {
				"from": "01:43:10,020",
				"to": "01:43:11,020"
			},
			"offsets": {
				"from": 6190020,
				"to": 6191020
			},
			"text": " We load the balance."
		},
		{
			"timestamps": {
				"from": "01:43:11,020",
				"to": "01:43:15,060"
			},
			"offsets": {
				"from": 6191020,
				"to": 6195060
			},
			"text": " Then we want to assert that it is at least that amount."
		},
		{
			"timestamps": {
				"from": "01:43:15,060",
				"to": "01:43:18,420"
			},
			"offsets": {
				"from": 6195060,
				"to": 6198420
			},
			"text": " Otherwise, we'll revert with insufficient balance."
		},
		{
			"timestamps": {
				"from": "01:43:18,420",
				"to": "01:43:32,660"
			},
			"offsets": {
				"from": 6198420,
				"to": 6212660
			},
			"text": " Then we will S-Store at the sender balance slot, the sum of sender balance, and amount."
		},
		{
			"timestamps": {
				"from": "01:43:32,660",
				"to": "01:43:35,300"
			},
			"offsets": {
				"from": 6212660,
				"to": 6215300
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "01:43:35,300",
				"to": "01:43:38,380"
			},
			"offsets": {
				"from": 6215300,
				"to": 6218380
			},
			"text": " First we'll do the receiver."
		},
		{
			"timestamps": {
				"from": "01:43:38,380",
				"to": "01:43:42,300"
			},
			"offsets": {
				"from": 6218380,
				"to": 6222300
			},
			"text": " So basically the same thing."
		},
		{
			"timestamps": {
				"from": "01:43:42,300",
				"to": "01:44:07,580"
			},
			"offsets": {
				"from": 6222300,
				"to": 6247580
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:44:07,580",
				"to": "01:44:14,580"
			},
			"offsets": {
				"from": 6247580,
				"to": 6254580
			},
			"text": " Then we will store -- oops, inverse."
		},
		{
			"timestamps": {
				"from": "01:44:14,580",
				"to": "01:44:22,540"
			},
			"offsets": {
				"from": 6254580,
				"to": 6262540
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "01:44:22,540",
				"to": "01:44:29,500"
			},
			"offsets": {
				"from": 6262540,
				"to": 6269500
			},
			"text": " So, same thing as before."
		},
		{
			"timestamps": {
				"from": "01:44:29,500",
				"to": "01:44:32,420"
			},
			"offsets": {
				"from": 6269500,
				"to": 6272420
			},
			"text": " Basically once we pass this approval check, we're going to check the balances, make sure"
		},
		{
			"timestamps": {
				"from": "01:44:32,420",
				"to": "01:44:33,820"
			},
			"offsets": {
				"from": 6272420,
				"to": 6273820
			},
			"text": " that it's all good."
		},
		{
			"timestamps": {
				"from": "01:44:33,820",
				"to": "01:44:35,620"
			},
			"offsets": {
				"from": 6273820,
				"to": 6275620
			},
			"text": " Send all this stuff through."
		},
		{
			"timestamps": {
				"from": "01:44:35,620",
				"to": "01:44:40,220"
			},
			"offsets": {
				"from": 6275620,
				"to": 6280220
			},
			"text": " Lastly, we want to do -- before we return is we want to do the log."
		},
		{
			"timestamps": {
				"from": "01:44:40,220",
				"to": "01:44:45,020"
			},
			"offsets": {
				"from": 6280220,
				"to": 6285020
			},
			"text": " So, again, M-Store at zero, the amounts."
		},
		{
			"timestamps": {
				"from": "01:44:45,020",
				"to": "01:44:47,540"
			},
			"offsets": {
				"from": 6285020,
				"to": 6287540
			},
			"text": " Log, come on."
		},
		{
			"timestamps": {
				"from": "01:44:47,540",
				"to": "01:44:48,540"
			},
			"offsets": {
				"from": 6287540,
				"to": 6288540
			},
			"text": " Three."
		},
		{
			"timestamps": {
				"from": "01:44:48,540",
				"to": "01:44:52,300"
			},
			"offsets": {
				"from": 6288540,
				"to": 6292300
			},
			"text": " It's going to start at slot zero, offset of OX20."
		},
		{
			"timestamps": {
				"from": "01:44:52,300",
				"to": "01:44:57,540"
			},
			"offsets": {
				"from": 6292300,
				"to": 6297540
			},
			"text": " Transfer hash is going to be the first, second is going to be the sender, and final is going"
		},
		{
			"timestamps": {
				"from": "01:44:57,540",
				"to": "01:45:00,540"
			},
			"offsets": {
				"from": 6297540,
				"to": 6300540
			},
			"text": " to be the receiver."
		},
		{
			"timestamps": {
				"from": "01:45:00,540",
				"to": "01:45:05,580"
			},
			"offsets": {
				"from": 6300540,
				"to": 6305580
			},
			"text": " And one last thing before we do this, before we return, is we want to make sure we decrease"
		},
		{
			"timestamps": {
				"from": "01:45:05,580",
				"to": "01:45:12,340"
			},
			"offsets": {
				"from": 6305580,
				"to": 6312340
			},
			"text": " the allowance if it is not the max UN256 value."
		},
		{
			"timestamps": {
				"from": "01:45:12,340",
				"to": "01:45:30,900"
			},
			"offsets": {
				"from": 6312340,
				"to": 6330900
			},
			"text": " So, if it is less than we're checking -- I'm not sure of a good way to get this max value"
		},
		{
			"timestamps": {
				"from": "01:45:30,900",
				"to": "01:45:36,180"
			},
			"offsets": {
				"from": 6330900,
				"to": 6336180
			},
			"text": " in assembly in a second."
		},
		{
			"timestamps": {
				"from": "01:45:36,180",
				"to": "01:45:43,260"
			},
			"offsets": {
				"from": 6336180,
				"to": 6343260
			},
			"text": " No, we're going to have to log that or something."
		},
		{
			"timestamps": {
				"from": "01:45:43,260",
				"to": "01:45:46,260"
			},
			"offsets": {
				"from": 6343260,
				"to": 6346260
			},
			"text": " Sorry?"
		},
		{
			"timestamps": {
				"from": "01:45:46,260",
				"to": "01:45:50,700"
			},
			"offsets": {
				"from": 6346260,
				"to": 6350700
			},
			"text": " OX, sorry?"
		},
		{
			"timestamps": {
				"from": "01:45:50,700",
				"to": "01:45:54,740"
			},
			"offsets": {
				"from": 6350700,
				"to": 6354740
			},
			"text": " Right, yeah."
		},
		{
			"timestamps": {
				"from": "01:45:54,740",
				"to": "01:46:00,140"
			},
			"offsets": {
				"from": 6354740,
				"to": 6360140
			},
			"text": " I didn't want to have to do it that way, but it looks like I'm going to have to."
		},
		{
			"timestamps": {
				"from": "01:46:00,140",
				"to": "01:46:06,500"
			},
			"offsets": {
				"from": 6360140,
				"to": 6366500
			},
			"text": " We could underflow, which is one thing that works, but also that does add -- that is computation"
		},
		{
			"timestamps": {
				"from": "01:46:06,500",
				"to": "01:46:12,380"
			},
			"offsets": {
				"from": 6366500,
				"to": 6372380
			},
			"text": " at runtime."
		},
		{
			"timestamps": {
				"from": "01:46:12,380",
				"to": "01:46:14,020"
			},
			"offsets": {
				"from": 6372380,
				"to": 6374020
			},
			"text": " Best way."
		},
		{
			"timestamps": {
				"from": "01:46:14,020",
				"to": "01:46:16,980"
			},
			"offsets": {
				"from": 6374020,
				"to": 6376980
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "01:46:16,980",
				"to": "01:46:23,980"
			},
			"offsets": {
				"from": 6376980,
				"to": 6383980
			},
			"text": " The reason that we actually can't just use -- so normally you could do something like"
		},
		{
			"timestamps": {
				"from": "01:46:23,980",
				"to": "01:46:30,100"
			},
			"offsets": {
				"from": 6383980,
				"to": 6390100
			},
			"text": " type UN256.max, but this actually is disallowed in assembly because this is a higher level"
		},
		{
			"timestamps": {
				"from": "01:46:30,100",
				"to": "01:46:31,100"
			},
			"offsets": {
				"from": 6390100,
				"to": 6391100
			},
			"text": " of functionality."
		},
		{
			"timestamps": {
				"from": "01:46:31,100",
				"to": "01:46:37,100"
			},
			"offsets": {
				"from": 6391100,
				"to": 6397100
			},
			"text": " So, we'll just do that."
		},
		{
			"timestamps": {
				"from": "01:46:37,100",
				"to": "01:46:40,740"
			},
			"offsets": {
				"from": 6397100,
				"to": 6400740
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "01:46:40,740",
				"to": "01:46:50,740"
			},
			"offsets": {
				"from": 6400740,
				"to": 6410740
			},
			"text": " So, if the caller allowance is less than this enormous value, what we want to do then is"
		},
		{
			"timestamps": {
				"from": "01:46:50,740",
				"to": "01:46:59,940"
			},
			"offsets": {
				"from": 6410740,
				"to": 6419940
			},
			"text": " decrease the caller allowance, and we'll store that back in the allowance slot."
		},
		{
			"timestamps": {
				"from": "01:46:59,940",
				"to": "01:47:08,420"
			},
			"offsets": {
				"from": 6419940,
				"to": 6428420
			},
			"text": " And, again, since we already checked to make sure that they have sufficient allowance,"
		},
		{
			"timestamps": {
				"from": "01:47:08,420",
				"to": "01:47:11,420"
			},
			"offsets": {
				"from": 6428420,
				"to": 6431420
			},
			"text": " this should never underflow."
		},
		{
			"timestamps": {
				"from": "01:47:11,420",
				"to": "01:47:13,420"
			},
			"offsets": {
				"from": 6431420,
				"to": 6433420
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:47:13,420",
				"to": "01:47:26,900"
			},
			"offsets": {
				"from": 6433420,
				"to": 6446900
			},
			"text": " Then, finally, we're going to store true, and then we're going to return it."
		},
		{
			"timestamps": {
				"from": "01:47:26,900",
				"to": "01:47:33,900"
			},
			"offsets": {
				"from": 6446900,
				"to": 6453900
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "01:47:33,900",
				"to": "01:47:34,900"
			},
			"offsets": {
				"from": 6453900,
				"to": 6454900
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:47:34,900",
				"to": "01:47:43,860"
			},
			"offsets": {
				"from": 6454900,
				"to": 6463860
			},
			"text": " So, there's a common pattern."
		},
		{
			"timestamps": {
				"from": "01:47:43,860",
				"to": "01:47:49,060"
			},
			"offsets": {
				"from": 6463860,
				"to": 6469060
			},
			"text": " It's not part of the standard, but this is something that I'm seeing increasingly, basically,"
		},
		{
			"timestamps": {
				"from": "01:47:49,060",
				"to": "01:47:53,860"
			},
			"offsets": {
				"from": 6469060,
				"to": 6473860
			},
			"text": " to give an infinite approval, you could just set it to the max UN256 value."
		},
		{
			"timestamps": {
				"from": "01:47:53,860",
				"to": "01:47:58,500"
			},
			"offsets": {
				"from": 6473860,
				"to": 6478500
			},
			"text": " And so, instead of actually having to do like math on that, right, we can just check that."
		},
		{
			"timestamps": {
				"from": "01:47:58,500",
				"to": "01:47:59,500"
			},
			"offsets": {
				"from": 6478500,
				"to": 6479500
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:47:59,500",
				"to": "01:48:02,460"
			},
			"offsets": {
				"from": 6479500,
				"to": 6482460
			},
			"text": " So, if less than, then we s store, so that's all good."
		},
		{
			"timestamps": {
				"from": "01:48:02,460",
				"to": "01:48:03,460"
			},
			"offsets": {
				"from": 6482460,
				"to": 6483460
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "01:48:03,460",
				"to": "01:48:08,100"
			},
			"offsets": {
				"from": 6483460,
				"to": 6488100
			},
			"text": " So, just reviewing this one function one last time, we're going to generate the allowance"
		},
		{
			"timestamps": {
				"from": "01:48:08,100",
				"to": "01:48:11,620"
			},
			"offsets": {
				"from": 6488100,
				"to": 6491620
			},
			"text": " slot, check the allowance, make sure it's sufficient."
		},
		{
			"timestamps": {
				"from": "01:48:11,620",
				"to": "01:48:13,100"
			},
			"offsets": {
				"from": 6491620,
				"to": 6493100
			},
			"text": " If not, we revert."
		},
		{
			"timestamps": {
				"from": "01:48:13,100",
				"to": "01:48:18,940"
			},
			"offsets": {
				"from": 6493100,
				"to": 6498940
			},
			"text": " If it's less than the max value, we're actually going to decrease the caller allowance."
		},
		{
			"timestamps": {
				"from": "01:48:18,940",
				"to": "01:48:24,420"
			},
			"offsets": {
				"from": 6498940,
				"to": 6504420
			},
			"text": " Next, we want to make sure the sender balance is sufficient."
		},
		{
			"timestamps": {
				"from": "01:48:24,420",
				"to": "01:48:26,500"
			},
			"offsets": {
				"from": 6504420,
				"to": 6506500
			},
			"text": " If not, we revert."
		},
		{
			"timestamps": {
				"from": "01:48:26,500",
				"to": "01:48:29,500"
			},
			"offsets": {
				"from": 6506500,
				"to": 6509500
			},
			"text": " Then we want to subtract from the sender balance, this amount."
		},
		{
			"timestamps": {
				"from": "01:48:29,500",
				"to": "01:48:34,340"
			},
			"offsets": {
				"from": 6509500,
				"to": 6514340
			},
			"text": " Then we want to add to the receiver balance, this amount."
		},
		{
			"timestamps": {
				"from": "01:48:34,340",
				"to": "01:48:38,180"
			},
			"offsets": {
				"from": 6514340,
				"to": 6518180
			},
			"text": " Then finally, we're going to log and then return true."
		},
		{
			"timestamps": {
				"from": "01:48:38,180",
				"to": "01:48:42,180"
			},
			"offsets": {
				"from": 6518180,
				"to": 6522180
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "01:48:42,180",
				"to": "01:48:43,180"
			},
			"offsets": {
				"from": 6522180,
				"to": 6523180
			},
			"text": " 165."
		},
		{
			"timestamps": {
				"from": "01:48:43,180",
				"to": "01:48:44,180"
			},
			"offsets": {
				"from": 6523180,
				"to": 6524180
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "01:48:44,180",
				"to": "01:48:45,180"
			},
			"offsets": {
				"from": 6524180,
				"to": 6525180
			},
			"text": " 165."
		},
		{
			"timestamps": {
				"from": "01:48:45,180",
				"to": "01:48:46,180"
			},
			"offsets": {
				"from": 6525180,
				"to": 6526180
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "01:48:46,180",
				"to": "01:48:47,180"
			},
			"offsets": {
				"from": 6526180,
				"to": 6527180
			},
			"text": " 165."
		},
		{
			"timestamps": {
				"from": "01:48:47,180",
				"to": "01:48:48,180"
			},
			"offsets": {
				"from": 6527180,
				"to": 6528180
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "01:48:48,180",
				"to": "01:48:49,180"
			},
			"offsets": {
				"from": 6528180,
				"to": 6529180
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:48:49,180",
				"to": "01:48:55,780"
			},
			"offsets": {
				"from": 6529180,
				"to": 6535780
			},
			"text": " So, this is to generate the hash, so we're storing at slot zero the sender."
		},
		{
			"timestamps": {
				"from": "01:48:55,780",
				"to": "01:49:02,700"
			},
			"offsets": {
				"from": 6535780,
				"to": 6542700
			},
			"text": " And you said the other was 205, 201."
		},
		{
			"timestamps": {
				"from": "01:49:02,700",
				"to": "01:49:03,860"
			},
			"offsets": {
				"from": 6542700,
				"to": 6543860
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "01:49:03,860",
				"to": "01:49:06,420"
			},
			"offsets": {
				"from": 6543860,
				"to": 6546420
			},
			"text": " Same thing, right."
		},
		{
			"timestamps": {
				"from": "01:49:06,420",
				"to": "01:49:10,540"
			},
			"offsets": {
				"from": 6546420,
				"to": 6550540
			},
			"text": " So, at the memory pointer and then at the memory pointer plus OX20."
		},
		{
			"timestamps": {
				"from": "01:49:10,540",
				"to": "01:49:11,540"
			},
			"offsets": {
				"from": 6550540,
				"to": 6551540
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:49:11,540",
				"to": "01:49:21,140"
			},
			"offsets": {
				"from": 6551540,
				"to": 6561140
			},
			"text": " Okay, so we have transfer from, we have approve, we have allowance, we have transfer balance"
		},
		{
			"timestamps": {
				"from": "01:49:21,140",
				"to": "01:49:26,620"
			},
			"offsets": {
				"from": 6561140,
				"to": 6566620
			},
			"text": " of total supply."
		},
		{
			"timestamps": {
				"from": "01:49:26,620",
				"to": "01:49:33,060"
			},
			"offsets": {
				"from": 6566620,
				"to": 6573060
			},
			"text": " And again, we're just going to keep this internal just so we can, you know, for the"
		},
		{
			"timestamps": {
				"from": "01:49:33,060",
				"to": "01:49:35,620"
			},
			"offsets": {
				"from": 6573060,
				"to": 6575620
			},
			"text": " sake of the exercise, write this out."
		},
		{
			"timestamps": {
				"from": "01:49:35,620",
				"to": "01:49:40,260"
			},
			"offsets": {
				"from": 6575620,
				"to": 6580260
			},
			"text": " Now, of course, all of this that we're doing here is like very much over abusing assembly."
		},
		{
			"timestamps": {
				"from": "01:49:40,260",
				"to": "01:49:42,900"
			},
			"offsets": {
				"from": 6580260,
				"to": 6582900
			},
			"text": " And in general, you don't want to use it this much."
		},
		{
			"timestamps": {
				"from": "01:49:42,900",
				"to": "01:49:45,900"
			},
			"offsets": {
				"from": 6582900,
				"to": 6585900
			},
			"text": " This is just to give like a good picture as to like what's actually happening into the"
		},
		{
			"timestamps": {
				"from": "01:49:45,900",
				"to": "01:49:47,900"
			},
			"offsets": {
				"from": 6585900,
				"to": 6587900
			},
			"text": " hood here."
		},
		{
			"timestamps": {
				"from": "01:49:47,900",
				"to": "01:49:54,780"
			},
			"offsets": {
				"from": 6587900,
				"to": 6594780
			},
			"text": " So, total supply is going to get public view function."
		},
		{
			"timestamps": {
				"from": "01:49:54,780",
				"to": "01:49:55,780"
			},
			"offsets": {
				"from": 6594780,
				"to": 6595780
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:49:55,780",
				"to": "01:50:00,500"
			},
			"offsets": {
				"from": 6595780,
				"to": 6600500
			},
			"text": " Now, this one's actually going to be really easy."
		},
		{
			"timestamps": {
				"from": "01:50:00,500",
				"to": "01:50:03,420"
			},
			"offsets": {
				"from": 6600500,
				"to": 6603420
			},
			"text": " Basically, what we want to do is store the value at this slot."
		},
		{
			"timestamps": {
				"from": "01:50:03,420",
				"to": "01:50:06,620"
			},
			"offsets": {
				"from": 6603420,
				"to": 6606620
			},
			"text": " Now, this is slot number three or slot OX02."
		},
		{
			"timestamps": {
				"from": "01:50:06,620",
				"to": "01:50:07,620"
			},
			"offsets": {
				"from": 6606620,
				"to": 6607620
			},
			"text": " This is OX00."
		},
		{
			"timestamps": {
				"from": "01:50:07,620",
				"to": "01:50:08,620"
			},
			"offsets": {
				"from": 6607620,
				"to": 6608620
			},
			"text": " OX01."
		},
		{
			"timestamps": {
				"from": "01:50:08,620",
				"to": "01:50:09,620"
			},
			"offsets": {
				"from": 6608620,
				"to": 6609620
			},
			"text": " OX02."
		},
		{
			"timestamps": {
				"from": "01:50:09,620",
				"to": "01:50:17,340"
			},
			"offsets": {
				"from": 6609620,
				"to": 6617340
			},
			"text": " So, we can M-store at slot zero."
		},
		{
			"timestamps": {
				"from": "01:50:17,340",
				"to": "01:50:22,700"
			},
			"offsets": {
				"from": 6617340,
				"to": 6622700
			},
			"text": " The value that is loaded from OX02."
		},
		{
			"timestamps": {
				"from": "01:50:22,700",
				"to": "01:50:29,060"
			},
			"offsets": {
				"from": 6622700,
				"to": 6629060
			},
			"text": " Then from there, we're turning OX00, OX20."
		},
		{
			"timestamps": {
				"from": "01:50:29,060",
				"to": "01:50:35,700"
			},
			"offsets": {
				"from": 6629060,
				"to": 6635700
			},
			"text": " Are you meeting with me?"
		},
		{
			"timestamps": {
				"from": "01:50:35,700",
				"to": "01:50:40,700"
			},
			"offsets": {
				"from": 6635700,
				"to": 6640700
			},
			"text": " A mint?"
		},
		{
			"timestamps": {
				"from": "01:50:40,700",
				"to": "01:50:41,700"
			},
			"offsets": {
				"from": 6640700,
				"to": 6641700
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:50:41,700",
				"to": "01:50:44,700"
			},
			"offsets": {
				"from": 6641700,
				"to": 6644700
			},
			"text": " So, I was actually going to do that in the constructor."
		},
		{
			"timestamps": {
				"from": "01:50:44,700",
				"to": "01:50:48,700"
			},
			"offsets": {
				"from": 6644700,
				"to": 6648700
			},
			"text": " If we want to do a mint function, we could."
		},
		{
			"timestamps": {
				"from": "01:50:48,700",
				"to": "01:50:50,700"
			},
			"offsets": {
				"from": 6648700,
				"to": 6650700
			},
			"text": " Actually, are we short on time?"
		},
		{
			"timestamps": {
				"from": "01:50:50,700",
				"to": "01:50:51,700"
			},
			"offsets": {
				"from": 6650700,
				"to": 6651700
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:50:51,700",
				"to": "01:50:52,700"
			},
			"offsets": {
				"from": 6651700,
				"to": 6652700
			},
			"text": " Yes, it's always zero."
		},
		{
			"timestamps": {
				"from": "01:50:52,700",
				"to": "01:50:53,700"
			},
			"offsets": {
				"from": 6652700,
				"to": 6653700
			},
			"text": " Best token."
		},
		{
			"timestamps": {
				"from": "01:50:53,700",
				"to": "01:50:56,700"
			},
			"offsets": {
				"from": 6653700,
				"to": 6656700
			},
			"text": " Was there another question?"
		},
		{
			"timestamps": {
				"from": "01:50:56,700",
				"to": "01:50:57,700"
			},
			"offsets": {
				"from": 6656700,
				"to": 6657700
			},
			"text": " Transfer from?"
		},
		{
			"timestamps": {
				"from": "01:50:57,700",
				"to": "01:50:58,700"
			},
			"offsets": {
				"from": 6657700,
				"to": 6658700
			},
			"text": " Hash three slots."
		},
		{
			"timestamps": {
				"from": "01:50:58,700",
				"to": "01:50:59,700"
			},
			"offsets": {
				"from": 6658700,
				"to": 6659700
			},
			"text": " Hash three slots at the same."
		},
		{
			"timestamps": {
				"from": "01:50:59,700",
				"to": "01:51:00,700"
			},
			"offsets": {
				"from": 6659700,
				"to": 6660700
			},
			"text": " Oh, right."
		},
		{
			"timestamps": {
				"from": "01:51:00,700",
				"to": "01:51:03,700"
			},
			"offsets": {
				"from": 6660700,
				"to": 6663700
			},
			"text": " So, if you want to hash three slots, you can use the same value."
		},
		{
			"timestamps": {
				"from": "01:51:03,700",
				"to": "01:51:08,700"
			},
			"offsets": {
				"from": 6663700,
				"to": 6668700
			},
			"text": " If you want to hash three slots, the first argument would be where in memory it is."
		},
		{
			"timestamps": {
				"from": "01:51:08,700",
				"to": "01:51:10,700"
			},
			"offsets": {
				"from": 6668700,
				"to": 6670700
			},
			"text": " Then you would just say, \"OX60.\""
		},
		{
			"timestamps": {
				"from": "01:51:10,700",
				"to": "01:51:11,700"
			},
			"offsets": {
				"from": 6670700,
				"to": 6671700
			},
			"text": " It says three slots."
		},
		{
			"timestamps": {
				"from": "01:51:11,700",
				"to": "01:51:13,700"
			},
			"offsets": {
				"from": 6671700,
				"to": 6673700
			},
			"text": " In this case, we're only over hashing two."
		},
		{
			"timestamps": {
				"from": "01:51:13,700",
				"to": "01:51:15,700"
			},
			"offsets": {
				"from": 6673700,
				"to": 6675700
			},
			"text": " That's just per the Solidity standard."
		},
		{
			"timestamps": {
				"from": "01:51:15,700",
				"to": "01:51:24,700"
			},
			"offsets": {
				"from": 6675700,
				"to": 6684700
			},
			"text": " But you could hash bigger stuff."
		},
		{
			"timestamps": {
				"from": "01:51:24,700",
				"to": "01:51:26,700"
			},
			"offsets": {
				"from": 6684700,
				"to": 6686700
			},
			"text": " Not quite."
		},
		{
			"timestamps": {
				"from": "01:51:26,700",
				"to": "01:51:33,460"
			},
			"offsets": {
				"from": 6686700,
				"to": 6693460
			},
			"text": " The reason that we did the separate hashing here is because the second time we hash, we're"
		},
		{
			"timestamps": {
				"from": "01:51:33,460",
				"to": "01:51:37,460"
			},
			"offsets": {
				"from": 6693460,
				"to": 6697460
			},
			"text": " actually concatenating the caller and the first hash, like digest."
		},
		{
			"timestamps": {
				"from": "01:51:37,460",
				"to": "01:51:43,460"
			},
			"offsets": {
				"from": 6697460,
				"to": 6703460
			},
			"text": " So, it has to be two different hashes."
		},
		{
			"timestamps": {
				"from": "01:51:43,460",
				"to": "01:51:46,460"
			},
			"offsets": {
				"from": 6703460,
				"to": 6706460
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "01:51:46,460",
				"to": "01:51:51,460"
			},
			"offsets": {
				"from": 6706460,
				"to": 6711460
			},
			"text": " So, in our constructor, we will once again abuse assembly."
		},
		{
			"timestamps": {
				"from": "01:51:51,460",
				"to": "01:51:56,460"
			},
			"offsets": {
				"from": 6711460,
				"to": 6716460
			},
			"text": " So, basically, what we'll do here is we'll just do a static total supply for the sake of"
		},
		{
			"timestamps": {
				"from": "01:51:56,460",
				"to": "01:51:57,460"
			},
			"offsets": {
				"from": 6716460,
				"to": 6717460
			},
			"text": " simplicity."
		},
		{
			"timestamps": {
				"from": "01:51:57,460",
				"to": "01:52:02,460"
			},
			"offsets": {
				"from": 6717460,
				"to": 6722460
			},
			"text": " We're going to store into the caller slot the inner."
		},
		{
			"timestamps": {
				"from": "01:52:02,460",
				"to": "01:52:04,460"
			},
			"offsets": {
				"from": 6722460,
				"to": 6724460
			},
			"text": " The slot, the initial supply."
		},
		{
			"timestamps": {
				"from": "01:52:04,460",
				"to": "01:52:12,460"
			},
			"offsets": {
				"from": 6724460,
				"to": 6732460
			},
			"text": " So, first thing we want to do, mStore, the caller."
		},
		{
			"timestamps": {
				"from": "01:52:12,460",
				"to": "01:52:23,460"
			},
			"offsets": {
				"from": 6732460,
				"to": 6743460
			},
			"text": " Next is going to be the slot for balances."
		},
		{
			"timestamps": {
				"from": "01:52:23,460",
				"to": "01:52:31,460"
			},
			"offsets": {
				"from": 6743460,
				"to": 6751460
			},
			"text": " We're going to sStore at the slots."
		},
		{
			"timestamps": {
				"from": "01:52:31,460",
				"to": "01:52:32,460"
			},
			"offsets": {
				"from": 6751460,
				"to": 6752460
			},
			"text": " Total supply."
		},
		{
			"timestamps": {
				"from": "01:52:32,460",
				"to": "01:52:36,460"
			},
			"offsets": {
				"from": 6752460,
				"to": 6756460
			},
			"text": " What do we want to call this?"
		},
		{
			"timestamps": {
				"from": "01:52:36,460",
				"to": "01:52:37,460"
			},
			"offsets": {
				"from": 6756460,
				"to": 6757460
			},
			"text": " Maxint."
		},
		{
			"timestamps": {
				"from": "01:52:37,460",
				"to": "01:52:38,460"
			},
			"offsets": {
				"from": 6757460,
				"to": 6758460
			},
			"text": " Yeah."
		},
		{
			"timestamps": {
				"from": "01:52:38,460",
				"to": "01:52:39,460"
			},
			"offsets": {
				"from": 6758460,
				"to": 6759460
			},
			"text": " I like it."
		},
		{
			"timestamps": {
				"from": "01:52:39,460",
				"to": "01:52:40,460"
			},
			"offsets": {
				"from": 6759460,
				"to": 6760460
			},
			"text": " Cool."
		},
		{
			"timestamps": {
				"from": "01:52:40,460",
				"to": "01:52:41,460"
			},
			"offsets": {
				"from": 6760460,
				"to": 6761460
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "01:52:41,460",
				"to": "01:52:42,460"
			},
			"offsets": {
				"from": 6761460,
				"to": 6762460
			},
			"text": " So, we'll do that."
		},
		{
			"timestamps": {
				"from": "01:52:42,460",
				"to": "01:52:47,460"
			},
			"offsets": {
				"from": 6762460,
				"to": 6767460
			},
			"text": " Now, since this is kind of technically a transfer from the zero address, we'll go ahead and log"
		},
		{
			"timestamps": {
				"from": "01:52:47,460",
				"to": "01:52:49,460"
			},
			"offsets": {
				"from": 6767460,
				"to": 6769460
			},
			"text": " in event for this as well."
		},
		{
			"timestamps": {
				"from": "01:52:49,460",
				"to": "01:52:55,460"
			},
			"offsets": {
				"from": 6769460,
				"to": 6775460
			},
			"text": " So, now, we're going to store into memory."
		},
		{
			"timestamps": {
				"from": "01:52:55,460",
				"to": "01:52:59,460"
			},
			"offsets": {
				"from": 6775460,
				"to": 6779460
			},
			"text": " And then from there, we're going to call log three."
		},
		{
			"timestamps": {
				"from": "01:52:59,460",
				"to": "01:53:00,460"
			},
			"offsets": {
				"from": 6779460,
				"to": 6780460
			},
			"text": " Transfer hash."
		},
		{
			"timestamps": {
				"from": "01:53:00,460",
				"to": "01:53:01,460"
			},
			"offsets": {
				"from": 6780460,
				"to": 6781460
			},
			"text": " No, no, no, no, no, no."
		},
		{
			"timestamps": {
				"from": "01:53:01,460",
				"to": "01:53:02,460"
			},
			"offsets": {
				"from": 6781460,
				"to": 6782460
			},
			"text": " Log three."
		},
		{
			"timestamps": {
				"from": "01:53:02,460",
				"to": "01:53:03,460"
			},
			"offsets": {
				"from": 6782460,
				"to": 6783460
			},
			"text": " Memory pointer."
		},
		{
			"timestamps": {
				"from": "01:53:03,460",
				"to": "01:53:04,460"
			},
			"offsets": {
				"from": 6783460,
				"to": 6784460
			},
			"text": " It's going to be zero."
		},
		{
			"timestamps": {
				"from": "01:53:04,460",
				"to": "01:53:05,460"
			},
			"offsets": {
				"from": 6784460,
				"to": 6785460
			},
			"text": " Memory size."
		},
		{
			"timestamps": {
				"from": "01:53:05,460",
				"to": "01:53:07,460"
			},
			"offsets": {
				"from": 6785460,
				"to": 6787460
			},
			"text": " It's going to be OX20 to store that value."
		},
		{
			"timestamps": {
				"from": "01:53:07,460",
				"to": "01:53:12,460"
			},
			"offsets": {
				"from": 6787460,
				"to": 6792460
			},
			"text": " Transfer hash."
		},
		{
			"timestamps": {
				"from": "01:53:12,460",
				"to": "01:53:13,460"
			},
			"offsets": {
				"from": 6792460,
				"to": 6793460
			},
			"text": " Zero address."
		},
		{
			"timestamps": {
				"from": "01:53:13,460",
				"to": "01:53:15,460"
			},
			"offsets": {
				"from": 6793460,
				"to": 6795460
			},
			"text": " We can just say zero here."
		},
		{
			"timestamps": {
				"from": "01:53:15,460",
				"to": "01:53:20,460"
			},
			"offsets": {
				"from": 6795460,
				"to": 6800460
			},
			"text": " Then receiver."
		},
		{
			"timestamps": {
				"from": "01:53:20,460",
				"to": "01:53:23,460"
			},
			"offsets": {
				"from": 6800460,
				"to": 6803460
			},
			"text": " And all three topics."
		},
		{
			"timestamps": {
				"from": "01:53:23,460",
				"to": "01:53:24,460"
			},
			"offsets": {
				"from": 6803460,
				"to": 6804460
			},
			"text": " Perfect."
		},
		{
			"timestamps": {
				"from": "01:53:24,460",
				"to": "01:53:29,460"
			},
			"offsets": {
				"from": 6804460,
				"to": 6809460
			},
			"text": " Now, from here, we're not going to return because in the constructor of a contract, the way that,"
		},
		{
			"timestamps": {
				"from": "01:53:29,460",
				"to": "01:53:36,460"
			},
			"offsets": {
				"from": 6809460,
				"to": 6816460
			},
			"text": " like, a contract is actually deployed to the chain is we take the entire contract's bytecode and then some."
		},
		{
			"timestamps": {
				"from": "01:53:36,460",
				"to": "01:53:40,460"
			},
			"offsets": {
				"from": 6816460,
				"to": 6820460
			},
			"text": " And basically, what we're doing is returning the entire contract's bytecode."
		},
		{
			"timestamps": {
				"from": "01:53:40,460",
				"to": "01:53:44,460"
			},
			"offsets": {
				"from": 6820460,
				"to": 6824460
			},
			"text": " Like, we're putting the whole bytecode in memory and then calling return on that."
		},
		{
			"timestamps": {
				"from": "01:53:44,460",
				"to": "01:53:46,460"
			},
			"offsets": {
				"from": 6824460,
				"to": 6826460
			},
			"text": " That's how the actual deployment process works."
		},
		{
			"timestamps": {
				"from": "01:53:46,460",
				"to": "01:53:51,460"
			},
			"offsets": {
				"from": 6826460,
				"to": 6831460
			},
			"text": " And part of the reason why deployments get so obscenely expensive because memory gas costs expand,"
		},
		{
			"timestamps": {
				"from": "01:53:51,460",
				"to": "01:53:57,460"
			},
			"offsets": {
				"from": 6831460,
				"to": 6837460
			},
			"text": " gas expansion, sorry, memory expansion, gas costs scale quadratically."
		},
		{
			"timestamps": {
				"from": "01:53:57,460",
				"to": "01:53:59,460"
			},
			"offsets": {
				"from": 6837460,
				"to": 6839460
			},
			"text": " So it gets very, very expensive."
		},
		{
			"timestamps": {
				"from": "01:53:59,460",
				"to": "01:54:08,460"
			},
			"offsets": {
				"from": 6839460,
				"to": 6848460
			},
			"text": " But the reason that I bring this up is we're not going to call return here because a constructor needs to do its job and return the bytecode at the end of this constructor's execution."
		},
		{
			"timestamps": {
				"from": "01:54:08,460",
				"to": "01:54:13,460"
			},
			"offsets": {
				"from": 6848460,
				"to": 6853460
			},
			"text": " So everything compiles."
		},
		{
			"timestamps": {
				"from": "01:54:13,460",
				"to": "01:54:16,460"
			},
			"offsets": {
				"from": 6853460,
				"to": 6856460
			},
			"text": " Moment of truth."
		},
		{
			"timestamps": {
				"from": "01:54:16,460",
				"to": "01:54:20,460"
			},
			"offsets": {
				"from": 6856460,
				"to": 6860460
			},
			"text": " Oops, hold on."
		},
		{
			"timestamps": {
				"from": "01:54:20,460",
				"to": "01:54:21,460"
			},
			"offsets": {
				"from": 6860460,
				"to": 6861460
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "01:54:21,460",
				"to": "01:54:22,460"
			},
			"offsets": {
				"from": 6861460,
				"to": 6862460
			},
			"text": " So first, let's check decimals."
		},
		{
			"timestamps": {
				"from": "01:54:22,460",
				"to": "01:54:23,460"
			},
			"offsets": {
				"from": 6862460,
				"to": 6863460
			},
			"text": " Should be 18."
		},
		{
			"timestamps": {
				"from": "01:54:23,460",
				"to": "01:54:25,460"
			},
			"offsets": {
				"from": 6863460,
				"to": 6865460
			},
			"text": " Name should be Yule token."
		},
		{
			"timestamps": {
				"from": "01:54:25,460",
				"to": "01:54:26,460"
			},
			"offsets": {
				"from": 6865460,
				"to": 6866460
			},
			"text": " Symbol should be Yule."
		},
		{
			"timestamps": {
				"from": "01:54:26,460",
				"to": "01:54:27,460"
			},
			"offsets": {
				"from": 6866460,
				"to": 6867460
			},
			"text": " Total supply."
		},
		{
			"timestamps": {
				"from": "01:54:27,460",
				"to": "01:54:29,460"
			},
			"offsets": {
				"from": 6867460,
				"to": 6869460
			},
			"text": " We did not increase the total supply."
		},
		{
			"timestamps": {
				"from": "01:54:29,460",
				"to": "01:54:32,460"
			},
			"offsets": {
				"from": 6869460,
				"to": 6872460
			},
			"text": " Lol."
		},
		{
			"timestamps": {
				"from": "01:54:32,460",
				"to": "01:54:38,460"
			},
			"offsets": {
				"from": 6872460,
				"to": 6878460
			},
			"text": " So S store that's going to be slot OXO2 and it's going to be max UN256."
		},
		{
			"timestamps": {
				"from": "01:54:38,460",
				"to": "01:54:39,460"
			},
			"offsets": {
				"from": 6878460,
				"to": 6879460
			},
			"text": " Great."
		},
		{
			"timestamps": {
				"from": "01:54:39,460",
				"to": "01:54:40,460"
			},
			"offsets": {
				"from": 6879460,
				"to": 6880460
			},
			"text": " Good coin."
		},
		{
			"timestamps": {
				"from": "01:54:40,460",
				"to": "01:54:45,460"
			},
			"offsets": {
				"from": 6880460,
				"to": 6885460
			},
			"text": " Great tokenomics."
		},
		{
			"timestamps": {
				"from": "01:54:45,460",
				"to": "01:54:47,460"
			},
			"offsets": {
				"from": 6885460,
				"to": 6887460
			},
			"text": " All right."
		},
		{
			"timestamps": {
				"from": "01:54:47,460",
				"to": "01:54:48,460"
			},
			"offsets": {
				"from": 6887460,
				"to": 6888460
			},
			"text": " Total supply."
		},
		{
			"timestamps": {
				"from": "01:54:48,460",
				"to": "01:54:51,460"
			},
			"offsets": {
				"from": 6888460,
				"to": 6891460
			},
			"text": " Now it's this enormous number."
		},
		{
			"timestamps": {
				"from": "01:54:51,460",
				"to": "01:54:56,460"
			},
			"offsets": {
				"from": 6891460,
				"to": 6896460
			},
			"text": " And let's do a quick transfer."
		},
		{
			"timestamps": {
				"from": "01:54:56,460",
				"to": "01:55:01,460"
			},
			"offsets": {
				"from": 6896460,
				"to": 6901460
			},
			"text": " I'm just going to transfer to some random address with yours."
		},
		{
			"timestamps": {
				"from": "01:55:01,460",
				"to": "01:55:02,460"
			},
			"offsets": {
				"from": 6901460,
				"to": 6902460
			},
			"text": " I don't know."
		},
		{
			"timestamps": {
				"from": "01:55:02,460",
				"to": "01:55:09,460"
			},
			"offsets": {
				"from": 6902460,
				"to": 6909460
			},
			"text": " First, let's call balance of on this address just for the sake of seeing what's what."
		},
		{
			"timestamps": {
				"from": "01:55:09,460",
				"to": "01:55:16,460"
			},
			"offsets": {
				"from": 6909460,
				"to": 6916460
			},
			"text": " So balance of this should be the deployers address."
		},
		{
			"timestamps": {
				"from": "01:55:16,460",
				"to": "01:55:21,460"
			},
			"offsets": {
				"from": 6916460,
				"to": 6921460
			},
			"text": " Is it not just a moment?"
		},
		{
			"timestamps": {
				"from": "01:55:21,460",
				"to": "01:55:25,460"
			},
			"offsets": {
				"from": 6921460,
				"to": 6925460
			},
			"text": " Interesting."
		},
		{
			"timestamps": {
				"from": "01:55:25,460",
				"to": "01:55:40,460"
			},
			"offsets": {
				"from": 6925460,
				"to": 6940460
			},
			"text": " So we're going to call our OX00."
		},
		{
			"timestamps": {
				"from": "01:55:40,460",
				"to": "01:55:41,460"
			},
			"offsets": {
				"from": 6940460,
				"to": 6941460
			},
			"text": " Ah, that said."
		},
		{
			"timestamps": {
				"from": "01:55:41,460",
				"to": "01:55:42,460"
			},
			"offsets": {
				"from": 6941460,
				"to": 6942460
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:55:42,460",
				"to": "01:55:43,460"
			},
			"offsets": {
				"from": 6942460,
				"to": 6943460
			},
			"text": " Okay."
		},
		{
			"timestamps": {
				"from": "01:55:43,460",
				"to": "01:55:44,460"
			},
			"offsets": {
				"from": 6943460,
				"to": 6944460
			},
			"text": " There we go."
		},
		{
			"timestamps": {
				"from": "01:55:44,460",
				"to": "01:55:50,460"
			},
			"offsets": {
				"from": 6944460,
				"to": 6950460
			},
			"text": " One more try."
		},
		{
			"timestamps": {
				"from": "01:55:50,460",
				"to": "01:55:56,460"
			},
			"offsets": {
				"from": 6950460,
				"to": 6956460
			},
			"text": " So balance of here are enormous number."
		},
		{
			"timestamps": {
				"from": "01:55:56,460",
				"to": "01:56:03,460"
			},
			"offsets": {
				"from": 6956460,
				"to": 6963460
			},
			"text": " And then finally, we'll just make a quick transfer here for let's say 10 because we're"
		},
		{
			"timestamps": {
				"from": "01:56:03,460",
				"to": "01:56:04,460"
			},
			"offsets": {
				"from": 6963460,
				"to": 6964460
			},
			"text": " stengy."
		},
		{
			"timestamps": {
				"from": "01:56:04,460",
				"to": "01:56:09,460"
			},
			"offsets": {
				"from": 6964460,
				"to": 6969460
			},
			"text": " And then we call and the balance is now 10."
		},
		{
			"timestamps": {
				"from": "01:56:09,460",
				"to": "01:56:13,460"
			},
			"offsets": {
				"from": 6969460,
				"to": 6973460
			},
			"text": " And that's an ERC20 token written purely in Yule."
		},
		{
			"timestamps": {
				"from": "01:56:13,460",
				"to": "01:56:16,460"
			},
			"offsets": {
				"from": 6973460,
				"to": 6976460
			},
			"text": " And that concludes today's workshop."
		},
		{
			"timestamps": {
				"from": "01:56:16,460",
				"to": "01:56:26,460"
			},
			"offsets": {
				"from": 6976460,
				"to": 6986460
			},
			"text": " So, really quick."
		},
		{
			"timestamps": {
				"from": "01:56:26,460",
				"to": "01:56:29,460"
			},
			"offsets": {
				"from": 6986460,
				"to": 6989460
			},
			"text": " These are some other resources that you guys can check out."
		},
		{
			"timestamps": {
				"from": "01:56:29,460",
				"to": "01:56:33,460"
			},
			"offsets": {
				"from": 6989460,
				"to": 6993460
			},
			"text": " Educational resources, EVM codes, obviously the yellow paper if you're the"
		},
		{
			"timestamps": {
				"from": "01:56:33,460",
				"to": "01:56:35,460"
			},
			"offsets": {
				"from": 6993460,
				"to": 6995460
			},
			"text": " general and you're into that kind of thing."
		},
		{
			"timestamps": {
				"from": "01:56:35,460",
				"to": "01:56:39,460"
			},
			"offsets": {
				"from": 6995460,
				"to": 6999460
			},
			"text": " Developer tooling and languages, Hough language is basically a low level assembly language"
		},
		{
			"timestamps": {
				"from": "01:56:39,460",
				"to": "01:56:41,460"
			},
			"offsets": {
				"from": 6999460,
				"to": 7001460
			},
			"text": " that will teach you a lot about the EVM."
		},
		{
			"timestamps": {
				"from": "01:56:41,460",
				"to": "01:56:44,460"
			},
			"offsets": {
				"from": 7001460,
				"to": 7004460
			},
			"text": " The Foundry development environment really good for testing and trying things."
		},
		{
			"timestamps": {
				"from": "01:56:44,460",
				"to": "01:56:48,460"
			},
			"offsets": {
				"from": 7004460,
				"to": 7008460
			},
			"text": " And the remix browser ID for that local testing and the browser."
		},
		{
			"timestamps": {
				"from": "01:56:48,460",
				"to": "01:56:52,460"
			},
			"offsets": {
				"from": 7008460,
				"to": 7012460
			},
			"text": " You had a question?"
		},
		{
			"timestamps": {
				"from": "01:56:52,460",
				"to": "01:57:00,460"
			},
			"offsets": {
				"from": 7012460,
				"to": 7020460
			},
			"text": " Can we use this?"
		},
		{
			"timestamps": {
				"from": "01:57:00,460",
				"to": "01:57:08,460"
			},
			"offsets": {
				"from": 7020460,
				"to": 7028460
			},
			"text": " Can we know if it's adequate or it's a swap?"
		},
		{
			"timestamps": {
				"from": "01:57:08,460",
				"to": "01:57:09,460"
			},
			"offsets": {
				"from": 7028460,
				"to": 7029460
			},
			"text": " Add liquidity or swap?"
		},
		{
			"timestamps": {
				"from": "01:57:09,460",
				"to": "01:57:13,460"
			},
			"offsets": {
				"from": 7029460,
				"to": 7033460
			},
			"text": " So that's not possible now."
		},
		{
			"timestamps": {
				"from": "01:57:13,460",
				"to": "01:57:18,460"
			},
			"offsets": {
				"from": 7033460,
				"to": 7038460
			},
			"text": " Right, because all it has access to is the message sender."
		},
		{
			"timestamps": {
				"from": "01:57:18,460",
				"to": "01:57:23,460"
			},
			"offsets": {
				"from": 7038460,
				"to": 7043460
			},
			"text": " Now maybe."
		},
		{
			"timestamps": {
				"from": "01:57:23,460",
				"to": "01:57:26,460"
			},
			"offsets": {
				"from": 7043460,
				"to": 7046460
			},
			"text": " Right."
		},
		{
			"timestamps": {
				"from": "01:57:26,460",
				"to": "01:57:33,460"
			},
			"offsets": {
				"from": 7046460,
				"to": 7053460
			},
			"text": " Any other questions?"
		},
		{
			"timestamps": {
				"from": "01:57:33,460",
				"to": "01:57:50,460"
			},
			"offsets": {
				"from": 7053460,
				"to": 7070460
			},
			"text": " [ Inaudible ]"
		},
		{
			"timestamps": {
				"from": "01:57:50,460",
				"to": "01:57:56,460"
			},
			"offsets": {
				"from": 7070460,
				"to": 7076460
			},
			"text": " So, right, so some things are trivial, but some things you can actually very heavily optimize."
		},
		{
			"timestamps": {
				"from": "01:57:56,460",
				"to": "01:57:59,460"
			},
			"offsets": {
				"from": 7076460,
				"to": 7079460
			},
			"text": " And that's actually why a lot of people tend to use assembly."
		},
		{
			"timestamps": {
				"from": "01:57:59,460",
				"to": "01:58:04,460"
			},
			"offsets": {
				"from": 7079460,
				"to": 7084460
			},
			"text": " For example, take ABI.encode."
		},
		{
			"timestamps": {
				"from": "01:58:04,460",
				"to": "01:58:09,460"
			},
			"offsets": {
				"from": 7084460,
				"to": 7089460
			},
			"text": " So this is actually fairly gassed intensive, especially, let's say you want to loop a number of external calls."
		},
		{
			"timestamps": {
				"from": "01:58:09,460",
				"to": "01:58:11,460"
			},
			"offsets": {
				"from": 7089460,
				"to": 7091460
			},
			"text": " It's actually ABI encoding every time."
		},
		{
			"timestamps": {
				"from": "01:58:11,460",
				"to": "01:58:13,460"
			},
			"offsets": {
				"from": 7091460,
				"to": 7093460
			},
			"text": " And there's a lot of gassed that's being consumed there."
		},
		{
			"timestamps": {
				"from": "01:58:13,460",
				"to": "01:58:17,460"
			},
			"offsets": {
				"from": 7093460,
				"to": 7097460
			},
			"text": " Whereas maybe you're calling the same function over this entire loop."
		},
		{
			"timestamps": {
				"from": "01:58:17,460",
				"to": "01:58:21,460"
			},
			"offsets": {
				"from": 7097460,
				"to": 7101460
			},
			"text": " Instead, maybe what you could do in assembly is you run that loop, but instead of doing this"
		},
		{
			"timestamps": {
				"from": "01:58:21,460",
				"to": "01:58:26,460"
			},
			"offsets": {
				"from": 7101460,
				"to": 7106460
			},
			"text": " encoding the entire time every single time, you store it once and you kind of like cache that."
		},
		{
			"timestamps": {
				"from": "01:58:26,460",
				"to": "01:58:30,460"
			},
			"offsets": {
				"from": 7106460,
				"to": 7110460
			},
			"text": " So things like that will actually give you massive improvements and gas efficiency."
		},
		{
			"timestamps": {
				"from": "01:58:30,460",
				"to": "01:58:39,460"
			},
			"offsets": {
				"from": 7110460,
				"to": 7119460
			},
			"text": " Okay, so compiler, it's not always that well, free time, so we can do this kind of integration."
		},
		{
			"timestamps": {
				"from": "01:58:39,460",
				"to": "01:58:41,460"
			},
			"offsets": {
				"from": 7119460,
				"to": 7121460
			},
			"text": " Right, it is improving."
		},
		{
			"timestamps": {
				"from": "01:58:41,460",
				"to": "01:58:44,460"
			},
			"offsets": {
				"from": 7121460,
				"to": 7124460
			},
			"text": " So a little bit about the state of the Solidity compiler."
		},
		{
			"timestamps": {
				"from": "01:58:44,460",
				"to": "01:58:47,460"
			},
			"offsets": {
				"from": 7124460,
				"to": 7127460
			},
			"text": " Originally, Solidity used, it's basically its own pipeline."
		},
		{
			"timestamps": {
				"from": "01:58:47,460",
				"to": "01:58:51,460"
			},
			"offsets": {
				"from": 7127460,
				"to": 7131460
			},
			"text": " So it would go from Solidity to Intermediate Representation to bytecode."
		},
		{
			"timestamps": {
				"from": "01:58:51,460",
				"to": "01:58:56,460"
			},
			"offsets": {
				"from": 7131460,
				"to": 7136460
			},
			"text": " Now there's actually a migration happening where basically Solidity will compile to Yule,"
		},
		{
			"timestamps": {
				"from": "01:58:56,460",
				"to": "01:59:02,460"
			},
			"offsets": {
				"from": 7136460,
				"to": 7142460
			},
			"text": " and then we can actually use Yule's pipeline to optimize because the Yule Optimizer is very well developed."
		},
		{
			"timestamps": {
				"from": "01:59:02,460",
				"to": "01:59:08,460"
			},
			"offsets": {
				"from": 7142460,
				"to": 7148460
			},
			"text": " This was actually sort of the original reason of using Yule is that like many high-level languages could compile to Yule"
		},
		{
			"timestamps": {
				"from": "01:59:08,460",
				"to": "01:59:14,460"
			},
			"offsets": {
				"from": 7148460,
				"to": 7154460
			},
			"text": " and have the same basically Intermediate Representation where everybody can take advantage of the same Optimizer."
		},
		{
			"timestamps": {
				"from": "01:59:14,460",
				"to": "01:59:15,460"
			},
			"offsets": {
				"from": 7154460,
				"to": 7155460
			},
			"text": " Okay, thank you very much."
		},
		{
			"timestamps": {
				"from": "01:59:15,460",
				"to": "01:59:16,460"
			},
			"offsets": {
				"from": 7155460,
				"to": 7156460
			},
			"text": " Welcome."
		},
		{
			"timestamps": {
				"from": "01:59:16,460",
				"to": "01:59:26,460"
			},
			"offsets": {
				"from": 7156460,
				"to": 7166460
			},
			"text": " [ Silence ]"
		}
	]
}
